package momime.client.calculations;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import momime.client.MomClient;
import momime.client.graphics.database.GraphicsDatabaseEx;
import momime.common.MomException;
import momime.common.database.UnitSkillEx;
import momime.common.utils.ExpandedUnitDetails;
import momime.common.utils.UnitUtils;

/**
 * Client side only methods dealing with unit calculations
 */
public final class ClientUnitCalculationsImpl implements ClientUnitCalculations
{
	/** Class logger */
	private static final Log log = LogFactory.getLog (ClientUnitCalculationsImpl.class);
	
	/** Graphics database */
	private GraphicsDatabaseEx graphicsDB;

	/** Unit utils */
	private UnitUtils unitUtils;

	/** Multiplayer client */
	private MomClient client;
	
	/**
	 * Chooses the preferred method of movement for this unit, i.e. the one with the lowest preference number (no. 1 is chosen first, then no. 2, etc.)
	 * 
	 * This ensures that e.g. Flying units (whether natural flight, spell-cast Flight or Chaos Channels Flight) all show the
	 * correct flight icon, and units with Swimming/Sailing show the wave icon
	 * 
	 * @param unit Unit to determine the movement graphics for
	 * @return Movement graphics node
	 * @throws MomException If this unit has no skills which have movement graphics, or we can't find its experience level
	 */
	@Override
	public final UnitSkillEx findPreferredMovementSkillGraphics (final ExpandedUnitDetails unit) throws MomException
	{
		log.trace ("Entering findPreferredMovementSkillGraphics: " + unit.getUnitID ());
		
		// Check all movement skills
		UnitSkillEx bestMatch = null;
		for (final UnitSkillEx thisSkill : getClient ().getClientDB ().getUnitSkills ())
			if (thisSkill.getMovementIconImagePreference () != null)
				if ((bestMatch == null) || (thisSkill.getMovementIconImagePreference () < bestMatch.getMovementIconImagePreference ()))
					if (unit.hasModifiedSkill (thisSkill.getUnitSkillID ()))
						bestMatch = thisSkill;
		
		if (bestMatch == null)
			throw new MomException ("Unit " + unit.getUnitID () + " has no skills which have movement graphics");
		
		log.trace ("Exiting findPreferredMovementSkillGraphics = " + bestMatch.getUnitSkillID ());
		return bestMatch;
	}

	/**
	 * combatActionIDs are MELEE when attacking melee, RANGED when attacking ranged, and generated by
	 * this routine when units are not attacking.  It looks up the combatActionIDs depending on what movement
	 * skills the unit has in such a way that we avoid having to hard code combatActionIDs.
	 * 
	 * e.g. a regular unit of swordsmen shows the STAND image while not moving, but if we cast
	 * Flight on them then we need to show the FLY animation instead.
	 *
	 * In the animations as directly converted from the original MoM graphics, WALK and FLY look the same - they
	 * resolve to the same animation, named e.g. UN100_D4_WALKFLY.  However the intention in the long term is
	 * to separate these and show flying units significantly raised up off the ground, so you can actually see flying
	 * units coming down to ground level when they have web cast on them, or swordsmen high up in the
	 * air when they have flight cast on them.
	 * 
	 * @param unit Unit to determine the combat action ID for
	 * @param isMoving Whether the unit is standing still or moving
	 * @return Action ID for a unit standing still or moving
	 * @throws MomException If this unit has no skills which have movement graphics, we can't find its experience level, or a movement skill doesn't specify an action ID
	 */
	@Override
	public final String determineCombatActionID (final ExpandedUnitDetails unit, final boolean isMoving)
		throws MomException
	{
		log.trace ("Entering findPreferredMovementSkillGraphics: " + unit.getUnitID () + ", " + isMoving);
		
		// This is pretty straightforward, findPreferredMovementSkillGraphics does most of the work for us
		final UnitSkillEx movementSkill = findPreferredMovementSkillGraphics (unit);
		final String combatActionID = isMoving ? movementSkill.getMoveActionID () : movementSkill.getStandActionID ();
		
		if (combatActionID == null)
			throw new MomException ("determineCombatActionID for unit " + unit.getUnitID () + " found movement skill " + movementSkill.getUnitSkillID () +
				" but the movement skill doesn't specify a combatActionID for isMoving = " + isMoving); 
		
		log.trace ("Exiting findPreferredMovementSkillGraphics = " + combatActionID);
		return combatActionID;
	}
	
	/**
	 * @return Graphics database
	 */
	public final GraphicsDatabaseEx getGraphicsDB ()
	{
		return graphicsDB;
	}

	/**
	 * @param db Graphics database
	 */
	public final void setGraphicsDB (final GraphicsDatabaseEx db)
	{
		graphicsDB = db;
	}

	/**
	 * @return Unit utils
	 */
	public final UnitUtils getUnitUtils ()
	{
		return unitUtils;
	}

	/**
	 * @param utils Unit utils
	 */
	public final void setUnitUtils (final UnitUtils utils)
	{
		unitUtils = utils;
	}

	/**
	 * @return Multiplayer client
	 */
	public final MomClient getClient ()
	{
		return client;
	}
	
	/**
	 * @param obj Multiplayer client
	 */
	public final void setClient (final MomClient obj)
	{
		client = obj;
	}
}