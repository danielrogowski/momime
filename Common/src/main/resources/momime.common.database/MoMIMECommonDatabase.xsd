<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:nxe="http://www.ndg.com/xmleditor/1.0.0"
	xmlns:map="http://www.ndg.com/map" xmlns:momimecommon="http://momime/common/database" targetNamespace="http://momime/common/database"
	jaxb:version="2.0">
	
	<xsd:import namespace="http://www.ndg.com/map" />
	
	<xsd:annotation>
		<xsd:documentation>Complete MoM IME database including everything needed by the server and client</xsd:documentation>
		<xsd:appinfo>
			<nxe:backuponopen>Y</nxe:backuponopen>
			<nxe:database namespaceURI="http://momime/common/database">
				<nxe:title>MoM IME Database</nxe:title>
				<nxe:xmlfilename>../server/databases/Original Master of Magic 1.31 rules.momime.xml</nxe:xmlfilename>
			</nxe:database>
		</xsd:appinfo>
	</xsd:annotation>

	<xsd:element name="momDatabase">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="plane" type="momimecommon:plane">
					<xsd:key name="fortressPlaneProductionPK">
						<xsd:selector xpath="fortressPlaneProduction" />
						<xsd:field xpath="@productionTypeID" />
					</xsd:key>
					<xsd:key name="planeDescriptionPK">
						<xsd:selector xpath="planeDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="planeRacesTitlePK">
						<xsd:selector xpath="planeRacesTitle" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="productionType" type="momimecommon:productionType">
					<xsd:key name="productionTypeImagePK">
						<xsd:selector xpath="productionTypeImage" />
						<xsd:field xpath="@productionValue" />
					</xsd:key>
					<xsd:key name="productionTypeDescriptionPK">
						<xsd:selector xpath="productionTypeDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="productionTypeSuffixPK">
						<xsd:selector xpath="productionTypeSuffix" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="unitKilledFromLackOfProductionPK">
						<xsd:selector xpath="unitKilledFromLackOfProduction" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="buildingSoldFromLackOfProductionPK">
						<xsd:selector xpath="buildingSoldFromLackOfProduction" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="spellSwitchedOffFromLackOfProductionPK">
						<xsd:selector xpath="spellSwitchedOffFromLackOfProduction" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="cannotEndTurnDueToLackOfProductionPK">
						<xsd:selector xpath="cannotEndTurnDueToLackOfProduction" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapFeature" type="momimecommon:mapFeature">
					<xsd:key name="mapFeatureProductionPK">
						<xsd:selector xpath="mapFeatureProduction" />
						<xsd:field xpath="@productionTypeID" />
					</xsd:key>
					<xsd:key name="mapFeatureMagicRealmPK">
						<xsd:selector xpath="mapFeatureMagicRealm" />
						<xsd:field xpath="@magicRealm" />
					</xsd:key>
					<xsd:key name="mapFeatureTreasureBookRewardPK">
						<xsd:selector xpath="mapFeatureTreasureBookReward" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="mapFeatureDescriptionPK">
						<xsd:selector xpath="mapFeatureDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="mapFeatureCannotBuildCityDescriptionPK">
						<xsd:selector xpath="mapFeatureCannotBuildCityDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="mapFeatureMagicWeaponsDescriptionPK">
						<xsd:selector xpath="mapFeatureMagicWeaponsDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="tileType" type="momimecommon:tileType">
					<xsd:key name="tileTypeFeatureChancePK">
						<xsd:selector xpath="tileTypeFeatureChance" />
						<xsd:field xpath="@planeNumber" />
						<xsd:field xpath="@mapFeatureID" />
					</xsd:key>
					<xsd:key name="tileTypeAreaEffectPK">
						<xsd:selector xpath="tileTypeAreaEffect" />
						<xsd:field xpath="@combatAreaEffectID" />
					</xsd:key>
					<xsd:key name="tileTypeMiniMapPK">
						<xsd:selector xpath="tileTypeMiniMap" />
						<xsd:field xpath="@planeNumber" />
					</xsd:key>
					<xsd:key name="tileTypeRoadPK">
						<xsd:selector xpath="tileTypeRoad" />
						<xsd:field xpath="@direction" />
					</xsd:key>
					<xsd:key name="tileTypeDescriptionPK">
						<xsd:selector xpath="tileTypeDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="tileTypeCannotBuildCityDescriptionPK">
						<xsd:selector xpath="tileTypeCannotBuildCityDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="tileTypeShowAsFeaturePK">
						<xsd:selector xpath="tileTypeShowAsFeature" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickType" type="momimecommon:pickType">
					<xsd:key name="fortressPickTypeProductionPK">
						<xsd:selector xpath="fortressPickTypeProduction" />
						<xsd:field xpath="@productionTypeID" />
					</xsd:key>
					<xsd:key name="pickTypeCountPK">
						<xsd:selector xpath="pickTypeCount" />
						<xsd:field xpath="@count" />
					</xsd:key>
					<xsd:key name="pickTypeDescriptionSingularPK">
						<xsd:selector xpath="pickTypeDescriptionSingular" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="pickTypeDescriptionPluralPK">
						<xsd:selector xpath="pickTypeDescriptionPlural" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="pickTypePrerequisiteSingularPK">
						<xsd:selector xpath="pickTypePrerequisiteSingular" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="pickTypePrerequisitePluralPK">
						<xsd:selector xpath="pickTypePrerequisitePlural" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="pick" type="momimecommon:pick">
					<xsd:key name="pickExclusiveFromPK">
						<xsd:selector xpath="pickExclusiveFrom" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="pickProductionBonusPK">
						<xsd:selector xpath="pickProductionBonus" />
						<xsd:field xpath="@productionTypeID" />
					</xsd:key>
					<xsd:key name="pickFreeSpellPK">
						<xsd:selector xpath="pickFreeSpell" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="mergedFromPickPK">
						<xsd:selector xpath="mergedFromPick" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="bookImageFilePK">
						<xsd:selector xpath="bookImageFile" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:unique name="pickPrerequisitePK">		<!-- This doesn't really work, as key is only checked if both values are present, and they never are -->
						<xsd:selector xpath="pickPrerequisite" />
						<xsd:field xpath="prerequisiteID" />
						<xsd:field xpath="prerequisiteTypeID" />
					</xsd:unique>
					<xsd:key name="pickDescriptionSingularPK">
						<xsd:selector xpath="pickDescriptionSingular" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="pickDescriptionPluralPK">
						<xsd:selector xpath="pickDescriptionPlural" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="bookshelfDescriptionPK">
						<xsd:selector xpath="bookshelfDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="unitMagicRealmPluralPK">
						<xsd:selector xpath="unitMagicRealmPlural" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="pickHelpTextPK">
						<xsd:selector xpath="pickHelpText" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="wizard" type="momimecommon:wizard">
					<xsd:key name="wizardPickCountPK">
						<xsd:selector xpath="wizardPickCount" />
						<xsd:field xpath="@pickCount" />
					</xsd:key>
					<xsd:key name="combatPlayListPK">
						<xsd:selector xpath="combatPlayList" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="wizardNamePK">
						<xsd:selector xpath="wizardName" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="populationTask" type="momimecommon:populationTask">
					<xsd:key name="populationTaskSingularPK">
						<xsd:selector xpath="populationTaskSingular" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="populationTaskPluralPK">
						<xsd:selector xpath="populationTaskPlural" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="race" type="momimecommon:race">
					<xsd:key name="cityNamePK">
						<xsd:selector xpath="cityName" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="racePopulationTaskPK">
						<xsd:selector xpath="racePopulationTask" />
						<xsd:field xpath="@populationTaskID" />
					</xsd:key>
					<xsd:key name="raceCannotBuildPK">
						<xsd:selector xpath="raceCannotBuild" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="raceUnrestPK">
						<xsd:selector xpath="raceUnrest" />
						<xsd:field xpath="@capitalRaceID" />
					</xsd:key>
					<xsd:key name="raceNameSingularPK">
						<xsd:selector xpath="raceNameSingular" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="raceNamePluralPK">
						<xsd:selector xpath="raceNamePlural" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="raceAdvantagesPK">
						<xsd:selector xpath="raceAdvantages" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="raceDisadvantagesPK">
						<xsd:selector xpath="raceDisadvantages" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="taxRate" type="momimecommon:taxRate" />
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="building" type="momimecommon:building">
					<!-- PKs don't tolerate optional attributes
						<xsd:key name="buildingPopulationProductionModifierPK">
							<xsd:selector xpath="buildingPopulationProductionModifier" />
							<xsd:field xpath="@populationTaskID" />
							<xsd:field xpath="@productionTypeID" />
						</xsd:key>
					-->
					<xsd:key name="buildingPrerequisitePK">
						<xsd:selector xpath="buildingPrerequisite" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="buildingRequiresTileTypePK">
						<xsd:selector xpath="buildingRequiresTileType" />
						<xsd:field xpath="@tileTypeID" />
					</xsd:key>
					<xsd:key name="buildingNamePK">
						<xsd:selector xpath="buildingName" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="buildingHelpTextPK">
						<xsd:selector xpath="buildingHelpText" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="citySize" type="momimecommon:citySize">
					<xsd:key name="citySizeNamePK">
						<xsd:selector xpath="citySizeName" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="citySizeNameIncludingOwnerPK">
						<xsd:selector xpath="citySizeNameIncludingOwner" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroSkillType" type="momimecommon:heroSkillType" />
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitType" type="momimecommon:unitType">
					<xsd:key name="experienceLevelPK">
						<xsd:selector xpath="experienceLevel" />
						<xsd:field xpath="@levelNumber" />
					</xsd:key>
					<xsd:key name="unitTypeInexperiencedPK">
						<xsd:selector xpath="unitTypeInexperienced" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="unitTypeExperiencedPK">
						<xsd:selector xpath="unitTypeExperienced" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="unitTypeMaxNaturalExperiencePK">
						<xsd:selector xpath="unitTypeMaxNaturalExperience" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="unitTypeMaxExperiencePK">
						<xsd:selector xpath="unitTypeMaxExperience" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemType" type="momimecommon:heroItemType">
					<xsd:key name="heroItemTypeBasicStatPK">
						<xsd:selector xpath="heroItemTypeBasicStat" />
						<xsd:field xpath="@unitSkillID" />
					</xsd:key>
					<xsd:key name="heroItemTypeAttackTypePK">
						<xsd:selector xpath="heroItemTypeAttackType" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="heroItemTypeAllowedBonusPK">
						<xsd:selector xpath="heroItemTypeAllowedBonus" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="heroItemTypeImageFilePK">
						<xsd:selector xpath="heroItemTypeImageFile" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="heroItemTypeDescriptionPK">
						<xsd:selector xpath="heroItemTypeDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemSlotType" type="momimecommon:heroItemSlotType">
					<xsd:key name="heroSlotAllowedItemTypePK">
						<xsd:selector xpath="heroSlotAllowedItemType" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="basicHeroItemForAiRatingChosenBonusPK">
						<xsd:selector xpath="basicHeroItemForAiRatingChosenBonus" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="slotTypeDescriptionPK">
						<xsd:selector xpath="slotTypeDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemBonus" type="momimecommon:heroItemBonus">
					<xsd:key name="heroItemBonusPrerequisitePK">
						<xsd:selector xpath="heroItemBonusPrerequisite" />
						<xsd:field xpath="@pickID" />
					</xsd:key>
					<xsd:key name="heroItemBonusStatPK">
						<xsd:selector xpath="heroItemBonusStat" />
						<xsd:field xpath="@unitSkillID" />
					</xsd:key>
					<xsd:key name="heroItemBonusDescriptionPK">
						<xsd:selector xpath="heroItemBonusDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItem" type="momimecommon:heroItem">
					<xsd:key name="heroItemChosenBonusPK">
						<xsd:selector xpath="heroItemChosenBonus" />
						<xsd:field xpath="." />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitSkill" type="momimecommon:unitSkill">
					<xsd:key name="unitSkillWeaponGradePK">
						<xsd:selector xpath="unitSkillWeaponGrade" />
						<xsd:field xpath="@weaponGradeNumber" />
					</xsd:key>
					<xsd:key name="grantsSkillPK">
						<xsd:selector xpath="grantsSkill" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="negatedBySkillPK">
						<xsd:selector xpath="negatedBySkill" />
						<xsd:field xpath="@negatedBySkillID" />
					</xsd:key>
					<xsd:key name="attackResolutionPK">
						<xsd:selector xpath="attackResolution" />
						<xsd:field xpath="attackResolutionDescription" />
					</xsd:key>
					<xsd:key name="unitSkillDescriptionPK">
						<xsd:selector xpath="unitSkillDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="unitSkillHelpTextPK">
						<xsd:selector xpath="unitSkillHelpText" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="rangedAttackType" type="momimecommon:rangedAttackType">
					<xsd:key name="rangedAttackTypeWeaponGradePK">
						<xsd:selector xpath="rangedAttackTypeWeaponGrade" />
						<xsd:field xpath="@weaponGradeNumber" />
					</xsd:key>
					<xsd:key name="rangedAttackTypeCombatImagePK">
						<xsd:selector xpath="rangedAttackTypeCombatImage" />
						<xsd:field xpath="@rangedAttackTypeActionID" />
						<xsd:field xpath="@direction" />
					</xsd:key>
					<xsd:key name="rangedAttackTypeDescriptionPK">
						<xsd:selector xpath="rangedAttackTypeDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="damageType" type="momimecommon:damageType">
					<xsd:key name="damageTypeImmunityPK">
						<xsd:selector xpath="damageTypeImmunity" />
						<xsd:field xpath="@unitSkillID" />
					</xsd:key>
					<xsd:key name="damageTypeNamePK">
						<xsd:selector xpath="damageTypeName" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="combatAction" type="momimecommon:combatAction">
					<xsd:key name="canOnlyBeAttackedByUnitsWithSkillPK">
						<xsd:selector xpath="canOnlyBeAttackedByUnitsWithSkill" />
						<xsd:field xpath="." />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="unit" type="momimecommon:unit">
					<xsd:key name="unitHasSkillPK">
						<xsd:selector xpath="unitHasSkill" />
						<xsd:field xpath="@unitSkillID" />
					</xsd:key>
					<xsd:key name="unitCanCastPK">
						<xsd:selector xpath="unitCanCast" />
						<xsd:field xpath="@unitSpellID" />
					</xsd:key>
					<xsd:key name="heroNamePK">
						<xsd:selector xpath="heroName" />
						<xsd:field xpath="@heroNameID" />
					</xsd:key>
					<xsd:key name="unitUpkeepPK">
						<xsd:selector xpath="unitUpkeep" />
						<xsd:field xpath="@productionTypeID" />
					</xsd:key>
					<xsd:key name="unitPrerequisitePK">
						<xsd:selector xpath="unitPrerequisite" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="unitCombatActionPK">
						<xsd:selector xpath="unitCombatAction" />
						<xsd:field xpath="@combatActionID" />
					</xsd:key>
					<xsd:key name="unitPickPrerequisitePK">
						<xsd:selector xpath="unitPickPrerequisite" />
						<xsd:field xpath="@pickID" />
					</xsd:key>
					<xsd:key name="unitNamePK">
						<xsd:selector xpath="unitName" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="unitNamePrefixPK">
						<xsd:selector xpath="unitNamePrefix" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="weaponGrade" type="momimecommon:weaponGrade">
					<xsd:key name="weaponGradeSkillBonusPK">
						<xsd:selector xpath="weaponGradeSkillBonus" />
						<xsd:field xpath="@unitSkillID" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="combatAreaEffect" type="momimecommon:combatAreaEffect">
					<xsd:key name="combatAreaEffectDescriptionPK">
						<xsd:selector xpath="combatAreaEffectDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="combatAreaEffectHelpTextPK">
						<xsd:selector xpath="combatAreaEffectHelpText" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellRank" type="momimecommon:spellRank">
					<xsd:key name="spellRankDescriptionPK">
						<xsd:selector xpath="spellRankDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellBookSection" type="momimecommon:spellBookSection">
					<xsd:key name="spellBookSectionNamePK">
						<xsd:selector xpath="spellBookSectionName" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="spellTargetPromptPK">
						<xsd:selector xpath="spellTargetPrompt" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="spell" type="momimecommon:spell">
					<xsd:key name="summonedUnitPK">
						<xsd:selector xpath="summonedUnit" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="unitSpellEffectPK">
						<xsd:selector xpath="unitSpellEffect" />
						<xsd:field xpath="@unitSkillID" />
					</xsd:key>
					<xsd:key name="spellUpkeepPK">
						<xsd:selector xpath="spellUpkeep" />
						<xsd:field xpath="@productionTypeID" />
					</xsd:key>
					<xsd:key name="spellHasCityEffectPK">
						<xsd:selector xpath="spellHasCityEffect" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="spellHasCombatEffectPK">
						<xsd:selector xpath="spellHasCombatEffect" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:unique name="spellValidUnitTargetPK">
						<!-- This constraint almost works - it prevents two identical Magic Realm IDs, but does not prevent two entries without a Magic Realm ID -->
						<xsd:selector xpath="spellValidUnitTarget" />
						<xsd:field xpath="@targetMagicRealmID" />
					</xsd:unique>
					<xsd:key name="spellValidBorderTargetPK">
						<xsd:selector xpath="spellValidBorderTarget" />
						<xsd:field xpath="." />
					</xsd:key>
					<xsd:key name="spellNamePK">
						<xsd:selector xpath="spellName" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="spellDescriptionPK">
						<xsd:selector xpath="spellDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="spellHelpTextPK">
						<xsd:selector xpath="spellHelpText" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="movementRateRule" type="momimecommon:movementRateRule" />
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="citySpellEffect" type="momimecommon:citySpellEffect">
					<xsd:key name="citySpellEffectNamePK">
						<xsd:selector xpath="citySpellEffectName" />
						<xsd:field xpath="@language" />
					</xsd:key>
					<xsd:key name="citySpellEffectHelpTextPK">
						<xsd:selector xpath="citySpellEffectHelpText" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="aiUnitCategory" type="momimecommon:aiUnitCategory">
					<xsd:key name="movementCodePK">
						<xsd:selector xpath="movementCode" />
						<xsd:field xpath="." />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="overlandMapSize" type="momimecommon:overlandMapSize">
					<xsd:key name="mapSizePlanePK">
						<xsd:selector xpath="mapSizePlane" />
						<xsd:field xpath="@planeNumber" />
					</xsd:key>
					<xsd:key name="overlandMapSizeDescriptionPK">
						<xsd:selector xpath="overlandMapSizeDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="landProportion" type="momimecommon:landProportion">
					<xsd:key name="landProportionTileTypePK">
						<xsd:selector xpath="landProportionTileType" />
						<xsd:field xpath="@tileTypeID" />
					</xsd:key>
					<xsd:key name="landProportionPlanePK">
						<xsd:selector xpath="landProportionPlane" />
						<xsd:field xpath="@planeNumber" />
					</xsd:key>
					<xsd:key name="landProportionDescriptionPK">
						<xsd:selector xpath="landProportionDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="nodeStrength" type="momimecommon:nodeStrength">
					<xsd:key name="nodeStrengthPlanePK">
						<xsd:selector xpath="nodeStrengthPlane" />
						<xsd:field xpath="@planeNumber" />
					</xsd:key>
					<xsd:key name="nodeStrengthDescriptionPK">
						<xsd:selector xpath="nodeStrengthDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="difficultyLevel" type="momimecommon:difficultyLevel">
					<xsd:key name="difficultyLevelPlanePK">
						<xsd:selector xpath="difficultyLevelPlane" />
						<xsd:field xpath="@planeNumber" />
					</xsd:key>
					<xsd:key name="difficultyLevelNodeStrengthPK">
						<xsd:selector xpath="difficultyLevelNodeStrength" />
						<xsd:field xpath="@nodeStrengthID" />
						<xsd:field xpath="@planeNumber" />
					</xsd:key>
					<xsd:key name="difficultyLevelDescriptionPK">
						<xsd:selector xpath="difficultyLevelDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="fogOfWarSetting" type="momimecommon:fogOfWarSetting">
					<xsd:key name="fogOfWarSettingDescriptionPK">
						<xsd:selector xpath="fogOfWarSettingDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitSetting" type="momimecommon:unitSetting">
					<xsd:key name="unitSettingDescriptionPK">
						<xsd:selector xpath="unitSettingDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellSetting" type="momimecommon:spellSetting">
					<xsd:key name="spellSettingDescriptionPK">
						<xsd:selector xpath="spellSettingDescription" />
						<xsd:field xpath="@language" />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="1" name="newGameDefaults" type="momimecommon:newGameDefaults" />			
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="cityImage" type="momimecommon:cityImage">
					<xsd:key name="cityImagePrerequisitePK">
						<xsd:selector xpath="cityImagePrerequisite" />
						<xsd:field xpath="." />
					</xsd:key>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="combatTileBorderImage" type="momimecommon:combatTileBorderImage" />
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="cityViewElementSet" type="momimecommon:cityViewElementSet" />
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="cityViewElement" type="momimecommon:cityViewElement" />
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="combatTileType" type="momimecommon:combatTileType" />
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="combatTileBorder" type="momimecommon:combatTileBorder" />
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="combatMapElement" type="momimecommon:combatMapElement" />
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="tileSet" type="momimecommon:tileSet">
					<xsd:key name="smoothingSystemPK">
						<xsd:selector xpath="smoothingSystem" />
						<xsd:field xpath="@smoothingSystemID" />
					</xsd:key>
					<xsd:unique name="smoothedTileTypePK">		<!-- This doesn't really work, as key is only checked if all 3 values are present -->
						<xsd:selector xpath="smoothedTileType" />
						<xsd:field xpath="@tileTypeID" />
						<xsd:field xpath="@planeNumber" />
						<xsd:field xpath="combatTileTypeID" />
					</xsd:unique>
					<xsd:keyref refer="momimecommon:smoothingSystemPK" name="smoothedTileTypeFKsmoothingSystem">
						<xsd:selector xpath="smoothedTileType" />
						<xsd:field xpath="smoothingSystemID" />
					</xsd:keyref>
				</xsd:element>			
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="animation" type="momimecommon:animation" />
				<xsd:element minOccurs="0" maxOccurs="unbounded" name="playList" type="momimecommon:playList" />
			</xsd:sequence>
		</xsd:complexType>

<!-- Primary keys -->

		<xsd:key name="planePK">
			<xsd:selector xpath="plane" />
			<xsd:field xpath="@planeNumber" />
		</xsd:key>
		<xsd:key name="mapFeaturePK">
			<xsd:selector xpath="mapFeature" />
			<xsd:field xpath="@mapFeatureID" />
		</xsd:key>
		<xsd:key name="tileTypePK">
			<xsd:selector xpath="tileType" />
			<xsd:field xpath="@tileTypeID" />
		</xsd:key>
		<xsd:key name="pickTypePK">
			<xsd:selector xpath="pickType" />
			<xsd:field xpath="@pickTypeID" />
		</xsd:key>
		<xsd:key name="pickPK">
			<xsd:selector xpath="pick" />
			<xsd:field xpath="@pickID" />
		</xsd:key>
		<xsd:key name="wizardPK">
			<xsd:selector xpath="wizard" />
			<xsd:field xpath="@wizardID" />
		</xsd:key>
		<xsd:key name="racePK">
			<xsd:selector xpath="race" />
			<xsd:field xpath="@raceID" />
		</xsd:key>
		<xsd:key name="buildingPK">
			<xsd:selector xpath="building" />
			<xsd:field xpath="@buildingID" />
		</xsd:key>
		<xsd:key name="populationTaskPK">
			<xsd:selector xpath="populationTask" />
			<xsd:field xpath="@populationTaskID" />
		</xsd:key>
		<xsd:key name="taxRatePK">
			<xsd:selector xpath="taxRate" />
			<xsd:field xpath="@taxRateID" />
		</xsd:key>
		<xsd:key name="citySizePK">
			<xsd:selector xpath="citySize" />
			<xsd:field xpath="@citySizeID" />
		</xsd:key>
		<xsd:key name="productionTypePK">
			<xsd:selector xpath="productionType" />
			<xsd:field xpath="@productionTypeID" />
		</xsd:key>
		<xsd:key name="combatActionPK">
			<xsd:selector xpath="combatAction" />
			<xsd:field xpath="@combatActionID" />
		</xsd:key>
		<xsd:key name="unitPK">
			<xsd:selector xpath="unit" />
			<xsd:field xpath="@unitID" />
		</xsd:key>
		<xsd:key name="unitTypePK">
			<xsd:selector xpath="unitType" />
			<xsd:field xpath="@unitTypeID" />
		</xsd:key>
		<xsd:key name="unitSkillPK">
			<xsd:selector xpath="unitSkill" />
			<xsd:field xpath="@unitSkillID" />
		</xsd:key>
		<xsd:key name="heroSkillTypePK">
			<xsd:selector xpath="heroSkillType" />
			<xsd:field xpath="@heroSkillTypeID" />
		</xsd:key>
		<xsd:key name="rangedAttackTypePK">
			<xsd:selector xpath="rangedAttackType" />
			<xsd:field xpath="@rangedAttackTypeID" />
		</xsd:key>
		<xsd:key name="weaponGradePK">
			<xsd:selector xpath="weaponGrade" />
			<xsd:field xpath="@weaponGradeNumber" />
		</xsd:key>
		<xsd:key name="combatAreaEffectPK">
			<xsd:selector xpath="combatAreaEffect" />
			<xsd:field xpath="@combatAreaEffectID" />
		</xsd:key>
		<xsd:key name="spellRankPK">
			<xsd:selector xpath="spellRank" />
			<xsd:field xpath="@spellRankID" />
		</xsd:key>
		<xsd:key name="spellBookSectionPK">
			<xsd:selector xpath="spellBookSection" />
			<xsd:field xpath="@spellBookSectionID" />
		</xsd:key>
		<xsd:key name="spellPK">
			<xsd:selector xpath="spell" />
			<xsd:field xpath="@spellID" />
		</xsd:key>
		<xsd:key name="citySpellEffectPK">
			<xsd:selector xpath="citySpellEffect" />
			<xsd:field xpath="@citySpellEffectID" />
		</xsd:key>
		
		<!-- New game form settings, new for 0.9.2 -->
		<xsd:key name="overlandMapSizePK">
			<xsd:selector xpath="overlandMapSize" />
			<xsd:field xpath="@overlandMapSizeID" />
		</xsd:key>
		<xsd:key name="landProportionPK">
			<xsd:selector xpath="landProportion" />
			<xsd:field xpath="@landProportionID" />
		</xsd:key>
		<xsd:key name="nodeStrengthPK">
			<xsd:selector xpath="nodeStrength" />
			<xsd:field xpath="@nodeStrengthID" />
		</xsd:key>
		<xsd:key name="difficultyLevelPK">
			<xsd:selector xpath="difficultyLevel" />
			<xsd:field xpath="@difficultyLevelID" />
		</xsd:key>
		<xsd:key name="fogOfWarSettingPK">
			<xsd:selector xpath="fogOfWarSetting" />
			<xsd:field xpath="@fogOfWarSettingID" />
		</xsd:key>
		<xsd:key name="unitSettingPK">
			<xsd:selector xpath="unitSetting" />
			<xsd:field xpath="@unitSettingID" />
		</xsd:key>
		<xsd:key name="spellSettingPK">
			<xsd:selector xpath="spellSetting" />
			<xsd:field xpath="@spellSettingID" />
		</xsd:key>

		<!-- Combat map generation, new for 0.9.3 -->
		<xsd:key name="combatTileTypePK">
			<xsd:selector xpath="combatTileType" />
			<xsd:field xpath="@combatTileTypeID" />
		</xsd:key>
		<xsd:key name="combatTileBorderPK">
			<xsd:selector xpath="combatTileBorder" />
			<xsd:field xpath="@combatTileBorderID" />
		</xsd:key>

		<!-- Hero items, new for 0.9.7 -->
		<xsd:key name="heroItemPK">
			<xsd:selector xpath="heroItem" />
			<xsd:field xpath="heroItemName" />	<!-- Not an identifier as such, but names should be unique -->
		</xsd:key>
		<xsd:key name="heroItemTypePK">
			<xsd:selector xpath="heroItemType" />
			<xsd:field xpath="@heroItemTypeID" />
		</xsd:key>
		<xsd:key name="heroItemSlotTypePK">
			<xsd:selector xpath="heroItemSlotType" />
			<xsd:field xpath="@heroItemSlotTypeID" />
		</xsd:key>
		<xsd:key name="heroItemBonusPK">
			<xsd:selector xpath="heroItemBonus" />
			<xsd:field xpath="@heroItemBonusID" />
		</xsd:key>
		
		<!-- Damage types and immunities, new for 0.9.7.2 -->
		<xsd:key name="damageTypePK">
			<xsd:selector xpath="damageType" />
			<xsd:field xpath="@damageTypeID" />
		</xsd:key>

		<!-- Overland AI, new for 0.9.8.0 -->
		<xsd:key name="aiUnitCategoryPK">
			<xsd:selector xpath="aiUnitCategory" />
			<xsd:field xpath="@aiUnitCategoryID" />
		</xsd:key>

		<!-- Merging graphics XSD -->		
		<xsd:key name="animationPK">
			<xsd:selector xpath="animation" />
			<xsd:field xpath="@animationID" />
		</xsd:key>
		<xsd:key name="playListPK">
			<xsd:selector xpath="playList" />
			<xsd:field xpath="@playListID" />
		</xsd:key>
		<xsd:key name="cityViewElementSetPK">
			<xsd:selector xpath="cityViewElementSet" />
			<xsd:field xpath="@cityViewElementSetID" />
		</xsd:key>
		<xsd:key name="tileSetPK">
			<xsd:selector xpath="tileSet" />
			<xsd:field xpath="@tileSetID" />
		</xsd:key>
		
<!-- Foreign keys -->

		<xsd:keyref refer="momimecommon:pickPK" name="planeFKpick">
			<xsd:selector xpath="plane" />
			<xsd:field xpath="prerequisitePickToChooseNativeRace" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:weaponGradePK" name="mapFeatureFKweaponGrade">
			<xsd:selector xpath="mapFeature" />
			<xsd:field xpath="featureMagicWeapons" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="tileTypeFKpick">
			<xsd:selector xpath="tileType" />
			<xsd:field xpath="magicRealmID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:planePK" name="tileTypeFeatureChanceFKplane">
			<xsd:selector xpath="tileType/tileTypeFeatureChance" />
			<xsd:field xpath="@planeNumber" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:mapFeaturePK" name="tileTypeFeatureChanceFKmapFeature">
			<xsd:selector xpath="tileType/tileTypeFeatureChance" />
			<xsd:field xpath="@mapFeatureID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:planePK" name="tileTypeMiniMapFKplane">
			<xsd:selector xpath="tileType/tileTypeMiniMap" />
			<xsd:field xpath="@planeNumber" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="tileTypeRoadFKanimation">
			<xsd:selector xpath="tileType/tileTypeRoad" />
			<xsd:field xpath="roadAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickTypePK" name="pickFKpickType">
			<xsd:selector xpath="pick" />
			<xsd:field xpath="pickType" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:weaponGradePK" name="pickFKweaponGrade">
			<xsd:selector xpath="pick" />
			<xsd:field xpath="pickMagicWeapons" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="pickPrerequisiteFKpick">
			<xsd:selector xpath="pick/pickPrerequisite" />
			<xsd:field xpath="prerequisiteID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="mergedFromPickFKpick">
			<xsd:selector xpath="pick/mergedFromPick" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickTypePK" name="pickPrerequisiteFKpickType">
			<xsd:selector xpath="pick/pickPrerequisite" />
			<xsd:field xpath="prerequisiteTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="wizardPickFKpick">
			<xsd:selector xpath="wizard/wizardPickCount/wizardPick" />
			<xsd:field xpath="@pickID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="pickExclusiveFromFKpick">
			<xsd:selector xpath="pick/pickExclusiveFrom" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:planePK" name="raceFKplane">
			<xsd:selector xpath="race" />
			<xsd:field xpath="nativePlane" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:weaponGradePK" name="buildingFKweaponGrade">
			<xsd:selector xpath="building" />
			<xsd:field xpath="buildingMagicWeapons" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:populationTaskPK" name="racePopulationTaskFKpopulationTask">
			<xsd:selector xpath="race/racePopulationTask" />
			<xsd:field xpath="@populationTaskID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:populationTaskPK" name="buildingPopulationProductionModifierFKpopulationTask">
			<xsd:selector xpath="building/buildingPopulationProductionModifier" />
			<xsd:field xpath="@populationTaskID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:productionTypePK" name="buildingPopulationProductionModifierFKproductionType">
			<xsd:selector xpath="building/buildingPopulationProductionModifier" />
			<xsd:field xpath="@productionTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:racePK" name="raceUnrestFKrace">
			<xsd:selector xpath="race/raceUnrest" />
			<xsd:field xpath="@capitalRaceID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:productionTypePK" name="productionTypeFKproductionType">
			<xsd:selector xpath="productionType" />
			<xsd:field xpath="accumulatesInto" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:productionTypePK" name="racePopulationTaskProductionFKproductionType">
			<xsd:selector xpath="race/racePopulationTask/racePopulationTaskProduction" />
			<xsd:field xpath="@productionTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:productionTypePK" name="mapFeatureProductionFKproductionType">
			<xsd:selector xpath="mapFeature/mapFeatureProduction" />
			<xsd:field xpath="@productionTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:buildingPK" name="buildingPrerequisiteFKbuilding">
			<xsd:selector xpath="building/buildingPrerequisite" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:tileTypePK" name="buildingRequiresTileTypeFKtileType">
			<xsd:selector xpath="building/buildingRequiresTileType" />
			<xsd:field xpath="@tileTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:productionTypePK" name="fortressPickTypeProductionFKproductionType">
			<xsd:selector xpath="pickType/fortressPickTypeProduction" />
			<xsd:field xpath="@productionTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:productionTypePK" name="fortressPlaneProductionFKproductionType">
			<xsd:selector xpath="plane/fortressPlaneProduction" />
			<xsd:field xpath="@productionTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:buildingPK" name="raceCannotBuildFKbuilding">
			<xsd:selector xpath="race/raceCannotBuild" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:racePK" name="unitFKrace">
			<xsd:selector xpath="unit" />
			<xsd:field xpath="unitRaceID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="unitFKpick">
			<xsd:selector xpath="unit" />
			<xsd:field xpath="unitMagicRealm" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:rangedAttackTypePK" name="unitFKrangedAttackType">
			<xsd:selector xpath="unit" />
			<xsd:field xpath="rangedAttackType" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:heroSkillTypePK" name="unitFKheroSkillType">
			<xsd:selector xpath="unit" />
			<xsd:field xpath="heroRandomPickType" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="unitPickPrerequisiteFKpick">
			<xsd:selector xpath="unit/unitPickPrerequisite" />
			<xsd:field xpath="@pickID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:combatActionPK" name="unitCombatActionFKcombatAction">
			<xsd:selector xpath="unit/unitCombatAction" />
			<xsd:field xpath="@combatActionID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="unitCombatImageFKanimation">
			<xsd:selector xpath="unit/unitCombatAction/unitCombatImage" />
			<xsd:field xpath="unitCombatAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:heroSkillTypePK" name="unitSkillFKheroSkillType">
			<xsd:selector xpath="unitSkill" />
			<xsd:field xpath="heroSkillTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:combatActionPK" name="unitSkillFKcombatActionStand">
			<xsd:selector xpath="unitSkill" />
			<xsd:field xpath="standActionID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:combatActionPK" name="unitSkillFKcombatActionMove">
			<xsd:selector xpath="unitSkill" />
			<xsd:field xpath="moveActionID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="canOnlyBeAttackedByUnitsWithSkillFKunitSkill">
			<xsd:selector xpath="combatAction/canOnlyBeAttackedByUnitsWithSkill" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="unitSkillFKanimation">
			<xsd:selector xpath="unitSkill" />
			<xsd:field xpath="unitSkillCombatAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="addsToSkillFKunitSkill1">
			<xsd:selector xpath="unitSkill/addsToSkill" />
			<xsd:field xpath="addsToSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="addsToSkillFKunitSkill2">
			<xsd:selector xpath="unitSkill/addsToSkill" />
			<xsd:field xpath="onlyVersusAttacksFromSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="addsToSkillFKpick1">
			<xsd:selector xpath="unitSkill/addsToSkill" />
			<xsd:field xpath="onlyVersusAttacksFromMagicRealmID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="addsToSkillFKpick2">
			<xsd:selector xpath="unitSkill/addsToSkill" />
			<xsd:field xpath="onlyAppliesToMagicRealmID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:rangedAttackTypePK" name="addsToSkillFKrangedAttackType">
			<xsd:selector xpath="unitSkill/addsToSkill" />
			<xsd:field xpath="rangedAttackTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="negatedBySkillFKunitSkill">
			<xsd:selector xpath="unitSkill/negatedBySkill" />
			<xsd:field xpath="@negatedBySkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="grantsSkillFKunitSkill">
			<xsd:selector xpath="unitSkill/grantsSkill" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="unitSkillFKpick1">
			<xsd:selector xpath="unitSkill" />
			<xsd:field xpath="changesUnitToMagicRealm" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="unitSkillFKpick2">
			<xsd:selector xpath="unitSkill" />
			<xsd:field xpath="magicRealmID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:weaponGradePK" name="unitSkillWeaponGradeFKweaponGrade">
			<xsd:selector xpath="unitSkill/unitSkillWeaponGrade" />
			<xsd:field xpath="@weaponGradeNumber" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="unitHasSkillFKunitSkill">
			<xsd:selector xpath="unit/unitHasSkill" />
			<xsd:field xpath="@unitSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:spellPK" name="unitCanCastFKspell">
			<xsd:selector xpath="unit/unitCanCast" />
			<xsd:field xpath="@unitSpellID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitTypePK" name="pickFKunitType">
			<xsd:selector xpath="pick" />
			<xsd:field xpath="unitTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickTypePK" name="pickFKpick_mastery">
			<xsd:selector xpath="pick" />
			<xsd:field xpath="nodeAndDispelBonus" />
		</xsd:keyref>		
		<xsd:keyref refer="momimecommon:pickPK" name="pickFKpick_cast">
			<xsd:selector xpath="pick" />
			<xsd:field xpath="castSpellsFromPickID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:productionTypePK" name="unitUpkeepFKproductionType">
			<xsd:selector xpath="unit/unitUpkeep" />
			<xsd:field xpath="@productionTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="rangedAttackTypeFKpick">
			<xsd:selector xpath="rangedAttackType" />
			<xsd:field xpath="magicRealmID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="rangedAttackTypeCombatImageFKanimation">
			<xsd:selector xpath="rangedAttackType/rangedAttackTypeCombatImage" />
			<xsd:field xpath="rangedAttackTypeCombatAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:weaponGradePK" name="rangedAttackTypeWeaponGradeFKweaponGrade">
			<xsd:selector xpath="rangedAttackType/rangedAttackTypeWeaponGrade" />
			<xsd:field xpath="@weaponGradeNumber" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="experienceSkillBonusFKunitSkill">
			<xsd:selector xpath="unitType/experienceLevel/experienceSkillBonus" />
			<xsd:field xpath="@unitSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="mapFeatureMagicRealmFKpick">
			<xsd:selector xpath="mapFeature/mapFeatureMagicRealm" />
			<xsd:field xpath="@magicRealm" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:buildingPK" name="unitPrerequisiteFKbuilding">
			<xsd:selector xpath="unit/unitPrerequisite" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="weaponGradeSkillBonusFKunitSkill">
			<xsd:selector xpath="weaponGrade/weaponGradeSkillBonus" />
			<xsd:field xpath="@unitSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:combatAreaEffectPK" name="tileTypeAreaEffectFKcombatAreaEffect">
			<xsd:selector xpath="tileType/tileTypeAreaEffect" />
			<xsd:field xpath="@combatAreaEffectID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="combatAreaEffectFKpick_realm">
			<xsd:selector xpath="combatAreaEffect" />
			<xsd:field xpath="combatAreaEffectMagicRealm" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="combatAreaEffectFKpick_negated">
			<xsd:selector xpath="combatAreaEffect" />
			<xsd:field xpath="combatAreaEffectNegatedByPick" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="combatAreaEffectSkillBonusFKpick">
			<xsd:selector xpath="combatAreaEffect/combatAreaEffectSkillBonus" />
			<xsd:field xpath="effectMagicRealm" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="combatAreaEffectSkillBonusFKunitSkill">
			<xsd:selector xpath="combatAreaEffect/combatAreaEffectSkillBonus" />
			<xsd:field xpath="@unitSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:productionTypePK" name="pickProductionBonusFKproductionType">
			<xsd:selector xpath="pick/pickProductionBonus" />
			<xsd:field xpath="@productionTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="pickProductionBonusFKpick">
			<xsd:selector xpath="pick/pickProductionBonus" />
			<xsd:field xpath="magicRealmID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitTypePK" name="pickProductionBonusFKunitType">
			<xsd:selector xpath="pick/pickProductionBonus" />
			<xsd:field xpath="unitTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="spellFKpick">
			<xsd:selector xpath="spell" />
			<xsd:field xpath="spellRealm" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:spellRankPK" name="spellFKspellRank">
			<xsd:selector xpath="spell" />
			<xsd:field xpath="spellRank" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:buildingPK" name="spellFKbuilding">
			<xsd:selector xpath="spell" />
			<xsd:field xpath="buildingID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="spellFKunitSkill">
			<xsd:selector xpath="spell" />
			<xsd:field xpath="resurrectingAddsSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:tileTypePK" name="spellFKtileType">
			<xsd:selector xpath="spell" />
			<xsd:field xpath="tileTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="spellFKanimationFly">
			<xsd:selector xpath="spell" />
			<xsd:field xpath="combatCastAnimationFly" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="spellFKanimationCast">
			<xsd:selector xpath="spell" />
			<xsd:field xpath="combatCastAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitPK" name="summonedUnitFKunit">
			<xsd:selector xpath="spell/summonedUnit" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="unitSpellEffectFKunitSkill">
			<xsd:selector xpath="spell/unitSpellEffect" />
			<xsd:field xpath="@unitSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:spellRankPK" name="spellCountFKspellRank">
			<xsd:selector xpath="pickType/pickTypeCount/spellCount" />
			<xsd:field xpath="@spellRank" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:spellPK" name="pickFreeSpellFKspell">
			<xsd:selector xpath="pick/pickFreeSpell" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:productionTypePK" name="spellUpkeepFKproductionType">
			<xsd:selector xpath="spell/spellUpkeep" />
			<xsd:field xpath="@productionTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:tileTypePK" name="movementRateRuleFKtileType">
			<xsd:selector xpath="movementRateRule" />
			<xsd:field xpath="tileTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="movementRateRuleFKunitSkill">
			<xsd:selector xpath="movementRateRule" />
			<xsd:field xpath="unitSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="movementRateRuleFKunitStackSkill">
			<xsd:selector xpath="movementRateRule" />
			<xsd:field xpath="unitStackSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:citySpellEffectPK" name="spellHasCityEffectFKcitySpellEffect">
			<xsd:selector xpath="spell/spellHasCityEffect" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:combatAreaEffectPK" name="spellHasCombatEffectFKcombatAreaEffect">
			<xsd:selector xpath="spell/spellHasCombatEffect" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="spellValidUnitTargetFKpick">
			<xsd:selector xpath="spell/spellValidUnitTarget" />
			<xsd:field xpath="@targetMagicRealmID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:combatTileBorderPK" name="spellValidBorderTargetFKcombatTileBorder">
			<xsd:selector xpath="spell/spellValidBorderTarget" />
			<xsd:field xpath="." />
		</xsd:keyref>

		<!-- New game form settings, new for 0.9.2 -->
		<xsd:keyref refer="momimecommon:planePK" name="mapSizePlaneFKplane">
			<xsd:selector xpath="overlandMapSize/mapSizePlane" />
			<xsd:field xpath="@planeNumber" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:tileTypePK" name="landProportionTileTypeFKtileType">
			<xsd:selector xpath="landProportion/landProportionTileType" />
			<xsd:field xpath="@tileTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:planePK" name="landProportionPlaneFKplane">
			<xsd:selector xpath="landProportion/landProportionPlane" />
			<xsd:field xpath="@planeNumber" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:planePK" name="nodeStrengthPlaneFKplane">
			<xsd:selector xpath="nodeStrength/nodeStrengthPlane" />
			<xsd:field xpath="@planeNumber" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:planePK" name="difficultyLevelPlaneFKplane">
			<xsd:selector xpath="difficultyLevel/difficultyLevelPlane" />
			<xsd:field xpath="@planeNumber" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:nodeStrengthPK" name="difficultyLevelNodeStrengthFKnodeStrength">
			<xsd:selector xpath="difficultyLevel/difficultyLevelNodeStrength" />
			<xsd:field xpath="@nodeStrengthID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:planePK" name="difficultyLevelNodeStrengthFKplane">
			<xsd:selector xpath="difficultyLevel/difficultyLevelNodeStrength" />
			<xsd:field xpath="@planeNumber" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:overlandMapSizePK" name="newGameDefaultsFKoverlandMapSize">
			<xsd:selector xpath="newGameDefaults" />
			<xsd:field xpath="defaultOverlandMapSizeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:landProportionPK" name="newGameDefaultsFKlandProportion">
			<xsd:selector xpath="newGameDefaults" />
			<xsd:field xpath="defaultLandProportionID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:nodeStrengthPK" name="newGameDefaultsFKnodeStrength">
			<xsd:selector xpath="newGameDefaults" />
			<xsd:field xpath="defaultNodeStrengthID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:difficultyLevelPK" name="newGameDefaultsFKdifficultyLevel">
			<xsd:selector xpath="newGameDefaults" />
			<xsd:field xpath="defaultDifficultyLevelID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:fogOfWarSettingPK" name="newGameDefaultsFKfogOfWarSetting">
			<xsd:selector xpath="newGameDefaults" />
			<xsd:field xpath="defaultFogOfWarSettingID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSettingPK" name="newGameDefaultsFKunitSetting">
			<xsd:selector xpath="newGameDefaults" />
			<xsd:field xpath="defaultUnitSettingID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:spellSettingPK" name="newGameDefaultsFKspellSetting">
			<xsd:selector xpath="newGameDefaults" />
			<xsd:field xpath="defaultSpellSettingID" />
		</xsd:keyref>

		<!-- Combat map generation, new for 0.9.3 -->
		<xsd:keyref refer="momimecommon:buildingPK" name="combatMapElementFKbuilding">
			<xsd:selector xpath="combatMapElement" />
			<xsd:field xpath="buildingID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:spellPK" name="combatMapElementFKspell">
			<xsd:selector xpath="combatMapElement" />
			<xsd:field xpath="spellID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:tileTypePK" name="combatMapElementFKtileType">
			<xsd:selector xpath="combatMapElement" />
			<xsd:field xpath="tileTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:mapFeaturePK" name="combatMapElementFKmapFeature">
			<xsd:selector xpath="combatMapElement" />
			<xsd:field xpath="mapFeatureID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:combatTileTypePK" name="combatMapElementFKcombatTileType">
			<xsd:selector xpath="combatMapElement" />
			<xsd:field xpath="combatTileTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:combatTileBorderPK" name="combatMapElementFKcombatTileBorder">
			<xsd:selector xpath="combatMapElement" />
			<xsd:field xpath="combatTileBorderID" />
		</xsd:keyref>

		<!-- CAEs from Heavenly Light and Cloud of Shadow, new for 0.9.6 -->
		<xsd:keyref refer="momimecommon:combatAreaEffectPK" name="citySpellEffectFKcombatAreaEffect">
			<xsd:selector xpath="citySpellEffect" />
			<xsd:field xpath="combatAreaEffectID" />
		</xsd:keyref>
		
		<!-- Combat attack resolution, for dealing with exactly what happens if e.g. we have first strike and enemy unit has haste, new for 0.9.6.2 -->
		<xsd:keyref refer="momimecommon:unitSkillPK" name="attackResolutionConditionFKunitSkill1">
			<xsd:selector xpath="unitSkill/attackResolution/attackResolutionCondition" />
			<xsd:field xpath="@unitSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="attackResolutionConditionFKunitSkill2">
			<xsd:selector xpath="unitSkill/attackResolution/attackResolutionCondition" />
			<xsd:field xpath="@alternativeUnitSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="attackResolutionStepFKunitSkill">
			<xsd:selector xpath="unitSkill/attackResolution/attackResolutionStep" />
			<xsd:field xpath="unitSkillID" />
		</xsd:keyref>
		
		<!-- Hero items, new for 0.9.7 -->
		<xsd:keyref refer="momimecommon:heroItemSlotTypePK" name="heroItemSlotFKheroItemSlotType">
			<xsd:selector xpath="unit/heroItemSlot" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="heroItemTypeBasicStatFKunitSkill">
			<xsd:selector xpath="heroItemType/heroItemTypeBasicStat" />
			<xsd:field xpath="@unitSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="heroItemTypeAttackTypeFKunitSkill">
			<xsd:selector xpath="heroItemType/heroItemTypeAttackType" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:heroItemTypePK" name="heroSlotAllowedItemTypeFKheroItemType">
			<xsd:selector xpath="heroItemSlotType/heroSlotAllowedItemType" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:heroItemTypePK" name="heroItemSlotTypeIDFKheroItemType">
			<xsd:selector xpath="heroItemSlotType" />
			<xsd:field xpath="basicHeroItemForAiRatingItemTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="heroItemBonusStatFKunitSkill">
			<xsd:selector xpath="heroItemBonus/heroItemBonusStat" />
			<xsd:field xpath="@unitSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:heroItemBonusPK" name="heroItemTypeAllowedBonusFKheroItemBonus">
			<xsd:selector xpath="heroItemType/heroItemTypeAllowedBonus" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:pickPK" name="heroItemBonusPrerequisiteFKpick">
			<xsd:selector xpath="heroItemBonus/heroItemBonusPrerequisite" />
			<xsd:field xpath="@pickID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:heroItemTypePK" name="heroItemFKheroItemType">
			<xsd:selector xpath="heroItem" />
			<xsd:field xpath="heroItemTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:spellPK" name="heroItemFKspell">
			<xsd:selector xpath="heroItem" />
			<xsd:field xpath="spellID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:heroItemBonusPK" name="heroItemChosenBonusFKheroItemBonus">
			<xsd:selector xpath="heroItem/heroItemChosenBonus" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:heroItemBonusPK" name="basicHeroItemForAiRatingChosenBonusFKheroItemBonus">
			<xsd:selector xpath="heroItemSlotType/basicHeroItemForAiRatingChosenBonus" />
			<xsd:field xpath="." />
		</xsd:keyref>

		<!-- Treasure rewards, new for 0.9.7 -->
		<xsd:keyref refer="momimecommon:pickPK" name="mapFeatureTreasureBookRewardFKpick">
			<xsd:selector xpath="mapFeature/mapFeatureTreasureBookReward" />
			<xsd:field xpath="." />
		</xsd:keyref>

		<!-- Damage types and immunities, new for 0.9.7.2 -->
		<xsd:keyref refer="momimecommon:damageTypePK" name="damageTypeFKdamageType">
			<xsd:selector xpath="damageType" />
			<xsd:field xpath="enhancedVersion" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:unitSkillPK" name="damageTypeImmunityFKunitSkill">
			<xsd:selector xpath="damageType/damageTypeImmunity" />
			<xsd:field xpath="@unitSkillID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:damageTypePK" name="rangedAttackTypeFKdamageType">
			<xsd:selector xpath="rangedAttackType" />
			<xsd:field xpath="damageTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:damageTypePK" name="unitSkillFKdamageType">
			<xsd:selector xpath="unitSkill" />
			<xsd:field xpath="damageTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:damageTypePK" name="spellFKdamageType">
			<xsd:selector xpath="spell" />
			<xsd:field xpath="attackSpellDamageTypeID" />
		</xsd:keyref>
		
		<!-- Overland AI, new for 0.9.8.0 -->
		<xsd:keyref refer="momimecommon:unitSkillPK" name="aiUnitCategoryFKunitSkill">
			<xsd:selector xpath="aiUnitCategory" />
			<xsd:field xpath="unitSkillID" />
		</xsd:keyref>
		
		<!-- Moved from graphics XSD -->
		<xsd:keyref refer="momimecommon:citySizePK" name="cityImageFKcitySize">
			<xsd:selector xpath="cityImage" />
			<xsd:field xpath="citySizeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:buildingPK" name="cityImagePrerequisiteFKbuilding">
			<xsd:selector xpath="cityImage/cityImagePrerequisite" />
			<xsd:field xpath="." />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:cityViewElementSetPK" name="cityViewElementFKcityViewElementSet">
			<xsd:selector xpath="cityViewElement" />
			<xsd:field xpath="cityViewElementSetID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:planePK" name="cityViewElementFKplane">
			<xsd:selector xpath="cityViewElement" />
			<xsd:field xpath="planeNumber" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:citySpellEffectPK" name="cityViewElementFKcitySpellEffect">
			<xsd:selector xpath="cityViewElement" />
			<xsd:field xpath="citySpellEffectID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:tileTypePK" name="cityViewElementFKtileType">
			<xsd:selector xpath="cityViewElement" />
			<xsd:field xpath="tileTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:buildingPK" name="cityViewElementFKbuilding">
			<xsd:selector xpath="cityViewElement" />
			<xsd:field xpath="buildingID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="cityViewElementFKanimation">
			<xsd:selector xpath="cityViewElement" />
			<xsd:field xpath="cityViewAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:combatTileBorderPK" name="combatTileBorderImageFKcombatTileBorder">
			<xsd:selector xpath="combatTileBorderImage" />
			<xsd:field xpath="combatTileBorderID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="combatTileBorderImageFKanimationStandard">
			<xsd:selector xpath="combatTileBorderImage" />
			<xsd:field xpath="standardAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="combatTileBorderImageFKanimationRaising">
			<xsd:selector xpath="combatTileBorderImage" />
			<xsd:field xpath="raisingAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:tileTypePK" name="smoothedTileTypeFKtileType">
			<xsd:selector xpath="tileSet/smoothedTileType" />
			<xsd:field xpath="@tileTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:planePK" name="smoothedTileTypeFKplane">
			<xsd:selector xpath="tileSet/smoothedTileType" />
			<xsd:field xpath="@planeNumber" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:tileTypePK" name="smoothedTileTypeSecondaryFKtileType">
			<xsd:selector xpath="tileSet/smoothedTileType" />
			<xsd:field xpath="secondaryTileTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:tileTypePK" name="smoothedTileTypeTertiaryFKtileType">
			<xsd:selector xpath="tileSet/smoothedTileType" />
			<xsd:field xpath="tertiaryTileTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:combatTileTypePK" name="smoothedTileTypeFKcombatTileType">
			<xsd:selector xpath="tileSet/smoothedTileType" />
			<xsd:field xpath="combatTileTypeID" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="smoothedTileFKanimation">
			<xsd:selector xpath="tileSet/smoothedTileType/smoothedTile" />
			<xsd:field xpath="tileAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="wizardFKanimation1">
			<xsd:selector xpath="wizard" />
			<xsd:field xpath="evaporatingAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="wizardFKanimation2">
			<xsd:selector xpath="wizard" />
			<xsd:field xpath="talkingAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="wizardFKanimation3">
			<xsd:selector xpath="wizard" />
			<xsd:field xpath="chantingAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:animationPK" name="wizardFKanimation4">
			<xsd:selector xpath="wizard" />
			<xsd:field xpath="ballAnimation" />
		</xsd:keyref>
		<xsd:keyref refer="momimecommon:playListPK" name="combatPlayListFKplayList">
			<xsd:selector xpath="wizard/combatPlayList" />
			<xsd:field xpath="." />
		</xsd:keyref>

	</xsd:element>

<!-- Types used in the new game database that the server sends to each client before they create a session so they know available databases and new game params -->

	<xsd:complexType name="overlandMapSize" nxe:singular="Overland map size" nxe:plural="Overland map sizes" nxe:submenu="New game settings">
        <xsd:annotation>
        	<xsd:documentation>Defines standard map sizes, i.e. 60x40.</xsd:documentation>
        </xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="map:coordinateSystem">
				<xsd:sequence>
					<xsd:element minOccurs="0" maxOccurs="unbounded" name="overlandMapSizeDescription" type="momimecommon:languageText" nxe:label="Description" />
					<xsd:element minOccurs="1" maxOccurs="1" name="zoneWidth" type="map:mapDimension" nxe:label="Zone Width" nxe:gridwidth="100" />
					<xsd:element minOccurs="1" maxOccurs="1" name="zoneHeight" type="map:mapDimension" nxe:label="Zone Height" nxe:gridwidth="100" />
					<xsd:element minOccurs="1" maxOccurs="1" name="normalLairCount" type="momimecommon:lairCount" nxe:label="Nbr. normal lairs" nxe:gridwidth="120" />
					<xsd:element minOccurs="1" maxOccurs="1" name="weakLairCount" type="momimecommon:lairCount" nxe:label="Nbr. weak lairs" nxe:gridwidth="100" />
					<xsd:element minOccurs="1" maxOccurs="1" name="towersOfWizardryCount" type="momimecommon:mapTileCount" nxe:label="Nbr. Towers of Wizardry" nxe:gridwidth="150" />
					<xsd:element minOccurs="1" maxOccurs="1" name="towersOfWizardrySeparation" type="momimecommon:integerMapDistance" nxe:label="Towers of Wizardry separation" nxe:gridwidth="180" />
					<xsd:element minOccurs="1" maxOccurs="1" name="continentalRaceChance" type="momimecommon:percentage" nxe:label="% chance that raider cities are the race chosen for the continent" nxe:gridwidth="300" />
					<xsd:element minOccurs="1" maxOccurs="1" name="citySeparation" type="momimecommon:integerMapDistance" nxe:label="City separation" nxe:gridwidth="100" />
					<xsd:element minOccurs="1" maxOccurs="1" name="raiderCityCount" type="momimecommon:cityCount" nxe:label="Nbr. raider cities" nxe:gridwidth="100" />
					<xsd:element minOccurs="1" maxOccurs="1" name="riverCount" type="momimecommon:mapTileCount" nxe:label="Nbr. Rivers on each plane" nxe:gridwidth="150" />
					<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapSizePlane" type="momimecommon:mapSizePlane" />
				</xsd:sequence>
				<xsd:attribute name="overlandMapSizeID" type="momimecommon:overlandMapSizeID" use="optional" nxe:label="Map Size ID" nxe:gridwidth="80" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="mapSizePlane" nxe:singular="Map Size Plane" nxe:plural="Map Size Planes">
        <xsd:annotation>
        	<xsd:documentation>Defines map size details that are different on each plane.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="numberOfNodesOnPlane" type="momimecommon:numberOfNodesOnPlane" nxe:label="Number of nodes on Plane" nxe:gridwidth="200" />
		</xsd:sequence>
		<xsd:attribute name="planeNumber" type="momimecommon:planeNumber" use="required" nxe:label="Plane Number" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>planeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="landProportion" nxe:singular="Land proportion" nxe:plural="Land proportions" nxe:submenu="New game settings">
        <xsd:annotation>
        	<xsd:documentation>Defines land proportions choosable on the new game form, i.e. small/medium/large.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="landProportionDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="1" maxOccurs="1" name="percentageOfMapIsLand" type="momimecommon:percentage" nxe:label="% of map which is land" nxe:gridwidth="170" />
			<xsd:element minOccurs="1" maxOccurs="1" name="percentageOfLandIsHills" type="momimecommon:percentage" nxe:label="% of land which is hills" nxe:gridwidth="170" />
			<xsd:element minOccurs="1" maxOccurs="1" name="percentageOfHillsAreMountains" type="momimecommon:percentage" nxe:label="% of hills which are mountains" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="tundraRowCount" type="momimecommon:mapTileCount" nxe:label="Nbr. rows from map edge where tundra can appear" nxe:gridwidth="300" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="landProportionTileType" type="momimecommon:landProportionTileType" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="landProportionPlane" type="momimecommon:landProportionPlane" />
		</xsd:sequence>
		<xsd:attribute name="landProportionID" type="momimecommon:landProportionID" use="optional" nxe:label="Land Proportion ID" nxe:gridwidth="120" />
	</xsd:complexType>
	
	<xsd:complexType name="landProportionTileType" nxe:singular="Land Proportion Tile Type" nxe:plural="Land Proportion Tile Types">
        <xsd:annotation>
        	<xsd:documentation>Defines charactistics of terrain which is generated in blobs (trees, desert and swamp).</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="percentageOfLand" type="momimecommon:percentage" nxe:label="% of land which is this terrain" nxe:gridwidth="180" />
			<xsd:element minOccurs="1" maxOccurs="1" name="eachAreaTileCount" type="momimecommon:mapTileCount" nxe:label="Approx. size of each area of this terrain" nxe:gridwidth="240" />
		</xsd:sequence>
		<xsd:attribute name="tileTypeID" type="momimecommon:tileTypeID" use="required" nxe:label="Tile Type ID" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>tileTypeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="landProportionPlane" nxe:singular="Land Proportion Plane" nxe:plural="Land Proportion Planes">
        <xsd:annotation>
        	<xsd:documentation>Defines land proportion values that are different on each plane.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="featureChance" type="momimecommon:featureChance" nxe:label="1 in X chance of each terrain tile gaining a special feature/mineral" nxe:gridwidth="400" />
		</xsd:sequence>
		<xsd:attribute name="planeNumber" type="momimecommon:planeNumber" use="required" nxe:label="Plane Number" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>planeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="nodeStrength" nxe:singular="Node strength" nxe:plural="Node strengths" nxe:submenu="New game settings">
        <xsd:annotation>
        	<xsd:documentation>Defines node strengths choosable on the new game form, i.e. weak/normal/powerful.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="nodeStrengthDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="1" maxOccurs="1" name="doubleNodeAuraMagicPower" type="momimecommon:doubledProductionValue" nxe:label="2x node aura magic power" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="nodeStrengthPlane" type="momimecommon:nodeStrengthPlane" />
		</xsd:sequence>
		<xsd:attribute name="nodeStrengthID" type="momimecommon:nodeStrengthID" use="optional" nxe:label="Node Strength ID" nxe:gridwidth="150" />
	</xsd:complexType>

	<xsd:complexType name="nodeStrengthPlane" nxe:singular="Node Strength Plane" nxe:plural="Node Strength Planes">
        <xsd:annotation>
        	<xsd:documentation>Defines node strength characteristics that are different on each plane.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="nodeAuraSquaresMinimum" type="momimecommon:nodeAuraSqaures" nxe:label="Min. map cells node aura covers" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="nodeAuraSquaresMaximum" type="momimecommon:nodeAuraSqaures" nxe:label="Max. map cells node aura covers" nxe:gridwidth="200" />
		</xsd:sequence>
		<xsd:attribute name="planeNumber" type="momimecommon:planeNumber" use="required" nxe:label="Plane Number" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>planeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="difficultyLevel" nxe:singular="Difficulty level" nxe:plural="Difficulty levels" nxe:submenu="New game settings">
        <xsd:annotation>
        	<xsd:documentation>Defines difficulty levels choosable on the new game form, i.e. intro/easy/normal/hard/impossible.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="difficultyLevelDescription" type="momimecommon:languageText" nxe:label="Description" />
			
			<!-- Strategy Guide p397 -->
			<xsd:element minOccurs="1" maxOccurs="1" name="humanSpellPicks" type="momimecommon:pickCount" nxe:label="Human spell picks" nxe:gridwidth="120" />
			<xsd:element minOccurs="1" maxOccurs="1" name="aiSpellPicks" type="momimecommon:pickCount" nxe:label="AI spell picks" nxe:gridwidth="90" />
			<xsd:element minOccurs="1" maxOccurs="1" name="humanStartingGold" type="momimecommon:undoubledProductionValue" nxe:label="Human starting gold" nxe:gridwidth="130" />
			<xsd:element minOccurs="1" maxOccurs="1" name="aiStartingGold" type="momimecommon:undoubledProductionValue" nxe:label="AI starting gold" nxe:gridwidth="100" />
			<xsd:element minOccurs="1" maxOccurs="1" name="customWizards" type="xsd:boolean" nxe:label="Custom wizards?" nxe:gridwidth="120" />
			<xsd:element minOccurs="1" maxOccurs="1" name="aiWizardsPopulationGrowthRateMultiplier" type="momimecommon:uncappedPercentage" nxe:label="AI wizards population growth rate multipler" nxe:gridwidth="230" />
			<xsd:element minOccurs="1" maxOccurs="1" name="aiRaidersPopulationGrowthRateMultiplier" type="momimecommon:uncappedPercentage" nxe:label="AI raiders population growth rate multipler" nxe:gridwidth="230" />
			<xsd:element minOccurs="1" maxOccurs="1" name="aiWizardsProductionRateMultiplier" type="momimecommon:uncappedPercentage" nxe:label="AI wizards production rate multipler" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="aiRaidersProductionRateMultiplier" type="momimecommon:uncappedPercentage" nxe:label="AI raiders production rate multipler" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="aiSpellResearchMultiplier" type="momimecommon:uncappedPercentage" nxe:label="AI spell research multipler" nxe:gridwidth="170" />
			<xsd:element minOccurs="1" maxOccurs="1" name="aiUpkeepMultiplier" type="momimecommon:uncappedPercentage" nxe:label="AI upkeep multipler" nxe:gridwidth="140" />
	
			<!-- New MoM IME settings -->
			<xsd:element minOccurs="1" maxOccurs="1" name="eachWizardOnlyOnce" type="xsd:boolean" nxe:label="Each wizard only once?" nxe:gridwidth="150" />
			<xsd:element minOccurs="1" maxOccurs="1" name="fameRazingPenalty" type="xsd:boolean" nxe:label="Penalize fame for razing?" nxe:gridwidth="150" />
			
			<!-- Strategy Guide p417 -->
			<xsd:element minOccurs="1" maxOccurs="1" name="towerMonstersMinimum" type="momimecommon:monsterStrength" nxe:label="Tower Min. monster strength" nxe:gridwidth="170" />
			<xsd:element minOccurs="1" maxOccurs="1" name="towerMonstersMaximum" type="momimecommon:monsterStrength" nxe:label="Tower Max. monster strength" nxe:gridwidth="170" />
			<xsd:element minOccurs="1" maxOccurs="1" name="towerTreasureMinimum" type="momimecommon:treasureValue" nxe:label="Tower Min. treasure value" nxe:gridwidth="170" />
			<xsd:element minOccurs="1" maxOccurs="1" name="towerTreasureMaximum" type="momimecommon:treasureValue" nxe:label="Tower Max. treasure value" nxe:gridwidth="170" />
			
			<!-- Strategy Guide p426 -->
			<xsd:element minOccurs="1" maxOccurs="1" name="raiderCityStartSizeMin" type="momimecommon:cityPopulationDiv1000" nxe:label="Min. starting size of raider cities" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="raiderCityStartSizeMax" type="momimecommon:cityPopulationDiv1000" nxe:label="Max. starting size of raider cities" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="raiderCityGrowthCap" type="momimecommon:cityPopulationDiv1000" nxe:label="Amount raider cities are allowed to grow" nxe:gridwidth="240" />
			<xsd:element minOccurs="1" maxOccurs="1" name="wizardCityStartSize" type="momimecommon:cityPopulationDiv1000" nxe:label="Starting size of wizard cities" nxe:gridwidth="170" />
			<xsd:element minOccurs="1" maxOccurs="1" name="cityMaxSize" type="momimecommon:cityPopulationDiv1000" nxe:label="Max. city size" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="difficultyLevelPlane" type="momimecommon:difficultyLevelPlane" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="difficultyLevelNodeStrength" type="momimecommon:difficultyLevelNodeStrength" />
		</xsd:sequence>
		<xsd:attribute name="difficultyLevelID" type="momimecommon:difficultyLevelID" use="optional" nxe:label="Difficulty Level ID" nxe:gridwidth="140" />
	</xsd:complexType>

	<xsd:complexType name="difficultyLevelPlane" nxe:singular="Difficulty Level - Plane" nxe:plural="Difficulty Level - Planes">
        <xsd:annotation>
        	<xsd:documentation>Defines difficulty level settings that are different on each plane.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="normalLairMonstersMinimum" type="momimecommon:monsterStrength" nxe:label="Norm. Lair Min. monster strength" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="normalLairMonstersMaximum" type="momimecommon:monsterStrength" nxe:label="Norm. Lair Max. monster strength" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="normalLairTreasureMinimum" type="momimecommon:treasureValue" nxe:label="Norm. Lair Min. treasure value" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="normalLairTreasureMaximum" type="momimecommon:treasureValue" nxe:label="Norm. Lair Max. treasure value" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="weakLairMonstersMinimum" type="momimecommon:monsterStrength" nxe:label="Weak Lair Min. monster strength" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="weakLairMonstersMaximum" type="momimecommon:monsterStrength" nxe:label="Weak Lair Max. monster strength" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="weakLairTreasureMinimum" type="momimecommon:treasureValue" nxe:label="Weak Lair Min. treasure value" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="weakLairTreasureMaximum" type="momimecommon:treasureValue" nxe:label="Weak Lair Max. treasure value" nxe:gridwidth="200" />
		</xsd:sequence>
		<xsd:attribute name="planeNumber" type="momimecommon:planeNumber" use="required" nxe:label="Plane Number" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>planeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="difficultyLevelNodeStrength" nxe:singular="Difficulty Level - Node Strength" nxe:plural="Difficulty Level - Node Strengths">
        <xsd:annotation>
        	<xsd:documentation>Defines difficulty level settings that are different with each node strength and on each plane.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="monstersMinimum" type="momimecommon:monsterStrength" nxe:label="Min. monster strength" nxe:gridwidth="150" />
			<xsd:element minOccurs="1" maxOccurs="1" name="monstersMaximum" type="momimecommon:monsterStrength" nxe:label="Max. monster strength" nxe:gridwidth="150" />
			<xsd:element minOccurs="1" maxOccurs="1" name="treasureMinimum" type="momimecommon:treasureValue" nxe:label="Min. treasure value" nxe:gridwidth="150" />
			<xsd:element minOccurs="1" maxOccurs="1" name="treasureMaximum" type="momimecommon:treasureValue" nxe:label="Max. treasure value" nxe:gridwidth="150" />
		</xsd:sequence>
		<xsd:attribute name="nodeStrengthID" type="momimecommon:nodeStrengthID" use="optional" nxe:label="Node Strength ID" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>nodeStrengthDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="planeNumber" type="momimecommon:planeNumber" use="required" nxe:label="Plane Number" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>planeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="fogOfWarSetting" nxe:singular="Fog of War settings" nxe:plural="Fog of War settings" nxe:submenu="New game settings">
        <xsd:annotation>
        	<xsd:documentation>Defines standard fog of war settings choosable on the new game form, i.e. original/recommended.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="fogOfWarSettingDescription" type="momimecommon:languageText" nxe:label="Description" />
		
			<xsd:element minOccurs="1" maxOccurs="1" name="terrainAndNodeAuras" type="momimecommon:fogOfWarValue" nxe:label="Terrain and Node Auras" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="1" maxOccurs="1" name="citiesSpellsAndCombatAreaEffects" type="momimecommon:fogOfWarValue" nxe:label="Cities, Combat Spells and CAEs" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="1" maxOccurs="1" name="units" type="momimecommon:fogOfWarValue" nxe:label="Units" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="1" maxOccurs="1" name="seeEnemyCityConstruction" type="xsd:boolean" nxe:label="See what enemy cities are constructing?" nxe:gridwidth="200" />
		</xsd:sequence>
		<xsd:attribute name="fogOfWarSettingID" type="momimecommon:fogOfWarSettingID" use="optional" nxe:label="Fog of War Setting ID" nxe:gridwidth="150" />
	</xsd:complexType>

	<xsd:complexType name="unitSetting" nxe:singular="Unit settings" nxe:plural="Unit settings" nxe:submenu="New game settings">
        <xsd:annotation>
        	<xsd:documentation>Defines standard unit settings choosable on the new game form, i.e. original/recommended.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitSettingDescription" type="momimecommon:languageText" nxe:label="Description" />

			<xsd:element minOccurs="1" maxOccurs="1" name="canExceedMaximumUnitsDuringCombat" type="xsd:boolean" nxe:label="Exceed limit during combat?" nxe:gridwidth="150" />
			<xsd:element minOccurs="1" maxOccurs="1" name="rollHeroSkillsAtStartOfGame" type="xsd:boolean" nxe:label="Roll hero skills at start of game?" nxe:gridwidth="170" />
			<xsd:element minOccurs="1" maxOccurs="1" name="maxHeroItemSpellCharges" type="momimecommon:spellCount" nxe:label="Max. spell charges added to hero item" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="1" name="maxHeroes" type="momimecommon:unitCount" nxe:label="Max. heroes hired at once" nxe:gridwidth="150">
		        <xsd:annotation><xsd:documentation>null = unlimited.</xsd:documentation></xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="maxHeroItemBonuses" type="momimecommon:spellCount" nxe:label="Max. bonuses added to hero item" nxe:gridwidth="200">
		        <xsd:annotation><xsd:documentation>null = unlimited.</xsd:documentation></xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="maxHeroItemsInBank" type="momimecommon:spellCount" nxe:label="Unallocated hero item bank size" nxe:gridwidth="200">
		        <xsd:annotation><xsd:documentation>null = unlimited.</xsd:documentation></xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="unitSettingID" type="momimecommon:unitSettingID" use="optional" nxe:label="Unit Setting ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="spellSetting" nxe:singular="Spell settings" nxe:plural="Spell settings" nxe:submenu="New game settings">
        <xsd:annotation>
        	<xsd:documentation>Defines spell settings that must be supplied when creating a new game.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellSettingDescription" type="momimecommon:languageText" nxe:label="Description" />
		
			<xsd:element minOccurs="1" maxOccurs="1" name="switchResearch" type="momimecommon:switchResearch" nxe:label="Switch spell research?" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="1" maxOccurs="1" name="spellBooksToObtainFirstReduction" type="momimecommon:spellBookCount" nxe:label="Spell books to obtain first reduction" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="spellBooksCastingReduction" type="momimecommon:percentage" nxe:label="% casting reduction from each book" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="spellBooksCastingReductionCap" type="momimecommon:castingReductionCap" nxe:label="% casting reduction cap" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="spellBooksCastingReductionCombination" type="momimecommon:castingReductionCombination" nxe:label="Casting reduction combination rule" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="1" maxOccurs="1" name="spellBooksResearchBonus" type="momimecommon:percentage" nxe:label="% research bonus from each book" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="spellBooksResearchBonusCap" type="momimecommon:castingReductionCap" nxe:label="% research bonus cap" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="spellBooksResearchBonusCombination" type="momimecommon:castingReductionCombination" nxe:label="Research bonus combination rule" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="1" maxOccurs="1" name="spellsStolenFromFortress" type="momimecommon:spellCount" nxe:label="Nbr. spells stolen when banishing" nxe:showmaincolumn="false" />
		</xsd:sequence>
		<xsd:attribute name="spellSettingID" type="momimecommon:spellSettingID" use="optional" nxe:label="Spell Setting ID" nxe:gridwidth="120" />
	</xsd:complexType>

	<xsd:complexType name="newGameDefaults" nxe:singular="Default new game settings" nxe:plural="Default new game settings" nxe:submenu="New game settings">
        <xsd:annotation>
        	<xsd:documentation>Default map size, difficulty level and so on to preselect on the new game screen.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="defaultOverlandMapSizeID" type="momimecommon:overlandMapSizeID" nxe:label="Default Overland Map Size" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>overlandMapSizeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="defaultLandProportionID" type="momimecommon:landProportionID" nxe:label="Default Land Proportion" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>landProportionDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="defaultNodeStrengthID" type="momimecommon:nodeStrengthID" nxe:label="Default Node Strength" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>nodeStrengthDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="defaultDifficultyLevelID" type="momimecommon:difficultyLevelID" nxe:label="Default Difficulty Level" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>difficultyLevelDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="defaultFogOfWarSettingID" type="momimecommon:fogOfWarSettingID" nxe:label="Default Fog of War Settings" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>fogOfWarSettingDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="defaultUnitSettingID" type="momimecommon:unitSettingID" nxe:label="Default Unit Settings" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSettingDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="defaultSpellSettingID" type="momimecommon:spellSettingID" nxe:label="Default Spell Settings" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>spellSettingDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

<!-- Types used in the client side database that it sends to each client as they join a session -->

	<xsd:complexType name="plane" nxe:singular="Plane" nxe:plural="Planes" nxe:submenu="Overland Map">
        <xsd:annotation>
        	<xsd:documentation>Defines the multiple planes/worlds.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="planeDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="planeRacesTitle" type="momimecommon:languageText" nxe:label="Races title" />
			<xsd:element minOccurs="0" maxOccurs="1" name="prerequisitePickToChooseNativeRace" type="momimecommon:pickID" nxe:label="Pre-requisite Pick to choose native race from this Plane" nxe:gridwidth="300">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="roadsEnchanted" type="xsd:boolean" nxe:label="Roads always enchanted?" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="fortressPlaneProduction" type="momimecommon:productionTypeAndDoubledValue" nxe:label="Production from fortress on this plane" nxe:plural="Productions from fortress on this plane">
		        <xsd:annotation>
		        	<xsd:documentation>Models that a Wizards' Fortress on Myrror generates +5 magic power.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="planeNumber" type="momimecommon:planeNumber" use="required" nxe:label="Plane Number" nxe:gridwidth="80" />
	</xsd:complexType>

	<xsd:complexType name="productionType" nxe:singular="Production Type" nxe:plural="Production Types" nxe:submenu="Cities">
        <xsd:annotation>
        	<xsd:documentation>Defines the different types of production/resources in the game, e.g. Rations, Gold, Magic Power, which are stored up between turns, and what values we must maintain, 
e.g. we can have negative Gold per turn as long as the accumulated amount stays above zero, but we Rations per turn must stay above zero.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="productionTypeDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="productionTypeSuffix" type="momimecommon:languageText" nxe:label="Suffix" nxe:plural="Suffixes" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitKilledFromLackOfProduction" type="momimecommon:languageText" nxe:label="Unit killed from lack of production" nxe:plural="Units killed from lack of production" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="buildingSoldFromLackOfProduction" type="momimecommon:languageText" nxe:label="Building sold from lack of production" nxe:plural="Buildings sold from lack of production" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellSwitchedOffFromLackOfProduction" type="momimecommon:languageText" nxe:label="Spell switched off from lack of production" nxe:plural="Spells switched off from lack of production" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="cannotEndTurnDueToLackOfProduction" type="momimecommon:languageText" nxe:label="Cannot end turn due to lack of production" />
			<xsd:element minOccurs="1" maxOccurs="1" name="roundingDirectionID" type="momimecommon:roundingDirectionID" nxe:label="Rounding Direction for production from Cities" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="1" maxOccurs="1" name="percentage" type="xsd:boolean" nxe:label="Percentage?" nxe:gridwidth="80" />
			<xsd:element minOccurs="1" maxOccurs="1" name="difficultyLevelMultiplierApplies" type="xsd:boolean" nxe:label="AI Difficulty Level Multiplier applies?" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="1" name="enforceProduction" type="momimecommon:enforceProductionID" nxe:label="Enforce?" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="0" maxOccurs="1" name="accumulatesInto" type="momimecommon:productionTypeID" nxe:label="Accumulates Into" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>productionTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="accumulationHalved" type="momimecommon:roundingDirectionID" nxe:label="Accumulation Halved?" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="0" maxOccurs="1" name="zeroWhenBanished" type="xsd:boolean" nxe:label="Is zero when banished?" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="productionTypeImage" type="momimecommon:productionTypeImage" />
		</xsd:sequence>
		<xsd:attribute name="productionTypeID" type="momimecommon:productionTypeID" use="required" nxe:label="Production Type ID" nxe:gridwidth="110" />
	</xsd:complexType>

	<xsd:complexType name="productionTypeImage" nxe:singular="Production Type Image" nxe:plural="Production Type Images">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="productionImageFile" type="momimecommon:imageFilename" nxe:label="Production type image file" nxe:gridwidth="350" />
		</xsd:sequence>
		<xsd:attribute name="productionValue" type="momimecommon:productionImageValue" use="required" nxe:label="Production Type Value" nxe:gridwidth="150" />
	</xsd:complexType>

	<xsd:complexType name="mapFeature" nxe:singular="Map Feature" nxe:plural="Map Features" nxe:submenu="Overland Map">
        <xsd:annotation>
        	<xsd:documentation>Defines features that can appear on the map on top of the regular terrain, e.g. Gems, Coal, Adamantium, Wild Game, Towers of Wizardry and Monster Lairs.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapFeatureDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapFeatureCannotBuildCityDescription" type="momimecommon:languageText" nxe:label="Description if can't build city here" nxe:plural="Descriptions if can't build city here" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapFeatureMagicWeaponsDescription" type="momimecommon:languageText" nxe:label="Description about Magic weapons" nxe:plural="Descriptions about Magic weapons" />
			<xsd:element minOccurs="1" maxOccurs="1" name="canBuildCity" type="xsd:boolean" nxe:label="Can Build City on this Feature?" nxe:gridwidth="180" />
			<xsd:element minOccurs="1" maxOccurs="1" name="overlandMapImageFile" type="momimecommon:imageFilename" nxe:label="Overland Map image file" nxe:gridwidth="500" />
			<xsd:element minOccurs="0" maxOccurs="1" name="featureSpellProtection" type="xsd:boolean" nxe:label="Protects from Spells?" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="1" name="featureMagicWeapons" type="momimecommon:weaponGradeNumber" nxe:label="Magic Weapons?" nxe:showmaincolumn="false" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>weaponGradeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="raceMineralMultiplerApplies" type="xsd:boolean" nxe:label="Race Mineral Multipler Applies?" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="1" name="monsterFoundImageFile" type="momimecommon:imageFilename" nxe:label="Monster Found image file" nxe:gridwidth="500" />
			<xsd:element minOccurs="0" maxOccurs="1" name="cityQualityEstimate" type="momimecommon:cityQualityEstimate" nxe:label="+ to City Quality Estimate" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapFeatureTreasureBookReward" type="momimecommon:pickID" nxe:label="Treasure book reward" nxe:showmaincolumn="false">
		        <xsd:annotation>
		        	<xsd:documentation>Lists the different books we can win from "special" awards when capturing a lair of this type.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapFeatureProduction" type="momimecommon:productionTypeAndDoubledValue" nxe:label="Map feature generates" nxe:plural="Map feature generates">
		        <xsd:annotation>
		        	<xsd:documentation>Defines the types of production that a particular map feature generates, e.g. +5 Gold from Gems, +2 Magic Power from Adamantium.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="mapFeatureMagicRealm" type="momimecommon:mapFeatureMagicRealm" />
		</xsd:sequence>
		<xsd:attribute name="mapFeatureID" type="momimecommon:mapFeatureID" use="required" nxe:label="Map Feature ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="mapFeatureMagicRealm" nxe:singular="Monster Magic Realm" nxe:plural="Monster Magic Realms">
        <xsd:annotation>
        	<xsd:documentation>For a particular type of map feature that contains monsters, lists the relative chances of it being filled with monsters of each magic realm, e.g. Towers of Wizardry are twice as likely to contain Death creatures as other realms of magic.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="featureChance" type="momimecommon:featureChance" nxe:label="Feature Chance" nxe:gridwidth="100" />
		</xsd:sequence>
		<xsd:attribute name="magicRealm" type="momimecommon:pickID" use="required" nxe:label="Magic Realm" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="tileType" nxe:singular="Tile Type" nxe:plural="Tile Types" nxe:submenu="Overland Map">
        <xsd:annotation>
        	<xsd:documentation>Defines the types of terrain tiles that make up the map, e.g. Grassland, Forest, Mountains, Ocean, Nodes, plus some special entries which aren't really "terrain" - roads and fog of war - for defining movement rate rules.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="tileTypeDetailedDescription" type="momimecommon:description" nxe:label="Tile Type Detailed Description" nxe:gridwidth="220" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="tileTypeDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="tileTypeCannotBuildCityDescription" type="momimecommon:languageText" nxe:label="Description if can't build city here" nxe:plural="Descriptions if can't build city here" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="tileTypeShowAsFeature" type="momimecommon:languageText" nxe:label="Description to make look like a map feature"  nxe:plural="Descriptions to make look like a map feature" />
			<xsd:element minOccurs="0" maxOccurs="1" name="land" type="xsd:boolean" nxe:label="Is Solid Land?" nxe:gridwidth="80" />
			<xsd:element minOccurs="0" maxOccurs="1" name="productionBonus" type="momimecommon:percentage" nxe:label="Production Bonus %" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="1" name="goldBonus" type="momimecommon:percentage" nxe:label="Gold Bonus %" nxe:gridwidth="90" />
			<xsd:element minOccurs="0" maxOccurs="1" name="goldBonusSurroundingTiles" type="xsd:boolean" nxe:label="Gold Bonus from Surrounding Tiles?" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="1" name="doubleFood" type="momimecommon:doubledProductionValue" nxe:label="2x Food Harvest from Tile" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="canBuildCity" type="xsd:boolean" nxe:label="Can Build City on this Terrain?" nxe:gridwidth="180" />
			<xsd:element minOccurs="0" maxOccurs="1" name="magicRealmID" type="momimecommon:pickID" nxe:label="Fill with Monsters" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="canPlaceLair" type="xsd:boolean" nxe:label="Can place a Monster Lair on this Terrain?" nxe:gridwidth="220" />
			<xsd:element minOccurs="0" maxOccurs="1" name="productionToBuildRoad" type="momimecommon:productionCost" nxe:label="Production to build road" nxe:gridwidth="170" />
			<xsd:element minOccurs="0" maxOccurs="1" name="combatDarkTiles" type="momimecommon:combatMapTileCount" nxe:label="Combat Dark Tiles" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="1" name="combatRidgeTiles" type="momimecommon:combatMapTileCount" nxe:label="Combat Ridge Tiles" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="1" name="combatTerrainFeatures" type="momimecommon:combatMapTileCount" nxe:label="Combat Features (e.g. trees)" nxe:gridwidth="180" />
			<xsd:element minOccurs="0" maxOccurs="1" name="monsterFoundImageFile" type="momimecommon:imageFilename" nxe:label="Monster Found image file" nxe:gridwidth="400" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="tileTypeFeatureChance" type="momimecommon:tileTypeFeatureChance" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="tileTypeAreaEffect" type="momimecommon:tileTypeAreaEffect" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="tileTypeMiniMap" type="momimecommon:tileTypeMiniMap" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="tileTypeRoad" type="momimecommon:tileTypeRoad" />
		</xsd:sequence>
		<xsd:attribute name="tileTypeID" type="momimecommon:tileTypeID" use="required" nxe:label="Tile Type ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="tileTypeFeatureChance" nxe:singular="Feature Chance" nxe:plural="Feature Chances">
        <xsd:annotation>
        	<xsd:documentation>If a map feature is going to be placed on a particular terrain tile, this defines the relative chances of each possible type of map feature.  The chance of a map feature being placed in the first place is set on the new game form.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="featureChance" type="momimecommon:featureChance" nxe:label="Feature Chance" nxe:gridwidth="150" />
		</xsd:sequence>
		<xsd:attribute name="planeNumber" type="momimecommon:planeNumber" use="required" nxe:label="Plane" nxe:gridwidth="80">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>planeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="mapFeatureID" type="momimecommon:mapFeatureID" use="required" nxe:label="Map Feature" nxe:gridwidth="100">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>mapFeatureDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="tileTypeAreaEffect" nxe:singular="Tile Type Area Effect" nxe:plural="Tile Type Area Effects">
        <xsd:annotation>
        	<xsd:documentation>Defines the combat area effects that a particular tile type generates, i.e. Auras from the 3 different types of Node.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1" name="extendAcrossNodeAura" type="xsd:boolean" nxe:label="Extend effect out across node aura?" nxe:gridwidth="200" />
		</xsd:sequence>
		<xsd:attribute name="combatAreaEffectID" type="momimecommon:combatAreaEffectID" use="required" nxe:label="Effect" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>combatAreaEffectDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="tileTypeMiniMap" nxe:singular="Mini map" nxe:plural="Mini map" nxe:submenu="Overland Map">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="miniMapPixelColour" type="momimecommon:colour" nxe:label="Mini map colour" nxe:gridwidth="120" />
		</xsd:sequence>
		<xsd:attribute name="planeNumber" type="momimecommon:planeNumber" use="required" nxe:label="Plane Number" nxe:gridwidth="80">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>planeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="tileTypeRoad" nxe:singular="Road" nxe:plural="Roads" nxe:submenu="Overland Map">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1" name="roadAnimation" type="momimecommon:animationID" nxe:label="Road animation" nxe:gridwidth="180">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="roadImageFile" type="momimecommon:imageFilename" nxe:label="Road image file" nxe:gridwidth="400" />
		</xsd:sequence>
		<xsd:attribute name="direction" type="momimecommon:mapDirectionOrNone" use="required" nxe:label="Direction" nxe:gridwidth="70" />
	</xsd:complexType>

	<xsd:complexType name="pickType" nxe:singular="Type of Spell Pick" nxe:plural="Types of Spell Pick" nxe:submenu="Magic">
        <xsd:annotation>
        	<xsd:documentation>Defines types of picks that can be chosen at the start of the game, i.e. Spell Books &amp; Retorts.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickTypeDescriptionSingular" type="momimecommon:languageText" nxe:label="Singular description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickTypeDescriptionPlural" type="momimecommon:languageText" nxe:label="Plural description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickTypePrerequisiteSingular" type="momimecommon:languageText" nxe:label="Singular pre-requisite" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickTypePrerequisitePlural" type="momimecommon:languageText" nxe:label="Plural pre-requisite" />
			<xsd:element minOccurs="0" maxOccurs="1" name="maximumQuantity" nxe:label="Max. Quantity" type="momimecommon:pickTypeCount">
		        <xsd:annotation>
		        	<xsd:documentation>Retorts can only be picked once; books have no such limit so have a null here.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="relativeChance" type="momimecommon:percentage" nxe:label="Special Treasure Relative Chance" nxe:gridwidth="250" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="fortressPickTypeProduction" type="momimecommon:productionTypeAndDoubledValue" nxe:label="Production from each of this type of pick" nxe:plural="Productions from each of this type of pick">
		        <xsd:annotation>
		        	<xsd:documentation>Models that a Wizards' Fortress generates +2 magic power for each spell book the wizard has.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickTypeCount" type="momimecommon:pickTypeCountContainer">
				<xsd:key name="spellCountPK">
					<xsd:selector xpath="spellCount" />
					<xsd:field xpath="@spellRank" />
				</xsd:key>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="pickTypeID" type="momimecommon:pickTypeID" use="required" nxe:label="Pick Type ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="pickTypeCountContainer" nxe:singular="Pick Type Count" nxe:plural="Pick Type Counts">
        <xsd:annotation>
        	<xsd:documentation>Defines characteristics of when we have a certain number of a certain type of pick.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded" name="spellCount" type="momimecommon:pickTypeGrantsSpells" />
		</xsd:sequence>
		<xsd:attribute name="count" type="momimecommon:pickTypeCount" use="required" nxe:label="Count" nxe:gridwidth="60" />
	</xsd:complexType>

	<xsd:complexType name="pickTypeGrantsSpells" nxe:singular="Spell Count" nxe:plural="Spell Counts">
        <xsd:annotation>
        	<xsd:documentation>For a particular number of a certain pick type, lists how many spells of each rank we get for free and can research, e.g. with 2 spell books, we have 5x Common, 2x Uncommon and 1x Rare spell available to search, and 1x Common spell free to start with.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="spellsAvailable" type="momimecommon:spellCount" nxe:label="Spells Available" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="1" name="spellsFreeAtStart" type="momimecommon:spellCount" nxe:label="Spells Free at Start" nxe:gridwidth="120" />
		</xsd:sequence>
		<xsd:attribute name="spellRank" type="momimecommon:spellRankID" use="required" nxe:label="Spell Rank" nxe:gridwidth="100">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>spellRankDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="pick" nxe:singular="Pick" nxe:plural="Picks" nxe:submenu="Magic">
        <xsd:annotation>
        	<xsd:documentation>Defines different picks that can be chosen at the start of the game, i.e. the 5x types of Spell Books &amp; different Retorts.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="pickDetailedDescription" type="momimecommon:description" nxe:label="Pick Detailed Description" nxe:gridwidth="850" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickDescriptionSingular" type="momimecommon:languageText" nxe:label="Singular description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickDescriptionPlural" type="momimecommon:languageText" nxe:label="Plural description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="bookshelfDescription" type="momimecommon:languageText" nxe:label="Bookshelf description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitMagicRealmPlural" type="momimecommon:languageText" nxe:label="Unit magic realm plural description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickHelpText" type="momimecommon:languageText" nxe:label="Help text" />
			<xsd:element minOccurs="1" maxOccurs="1" name="pickType" type="momimecommon:pickTypeID" nxe:label="Pick Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickTypeSingularDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="pickCost" type="momimecommon:pickCost" nxe:label="Cost" nxe:gridwidth="60" />
			<xsd:element minOccurs="0" maxOccurs="1" name="nodeAndDispelBonus" type="momimecommon:pickID" nxe:label="Node + Dispel bonus" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="pickReligiousBuildingBonus" type="momimecommon:percentage" nxe:label="Religious Building Bonus %" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="pickMagicWeapons" type="momimecommon:weaponGradeNumber" nxe:label="Magic Weapons?" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>weaponGradeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="unitTypeID" type="momimecommon:unitTypeID" nxe:label="Unit Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="castSpellsFromPickID" type="momimecommon:pickID" nxe:label="Caster skill (unit) casts spells of which pick?" nxe:gridwidth="300" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="pickInitialSkill" type="momimecommon:pickInitialSkill" nxe:label="Initial Skill" nxe:gridwidth="70" />
			<xsd:element minOccurs="0" maxOccurs="1" name="dynamicSkillBonus" type="momimecommon:pickInitialSkill" nxe:label="Dynamic Skill +" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="dynamicFameBonus" type="momimecommon:fame" nxe:label="Dynamic Fame +" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="enhancesDamageType" type="xsd:boolean" nxe:label="Enhances Damage Type?" nxe:gridwidth="200"> 
				<xsd:annotation>
					<xsd:documentation>Basically this indicates whether this lifeform type ignores Weapon Immunity.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="healEachTurn" type="xsd:boolean" nxe:label="Heal each turn?" nxe:gridwidth="200"> 
				<xsd:annotation>
					<xsd:documentation>Most units heal 1 HP at the start of each turn; Undead do not.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="gainExperienceEachTurn" type="xsd:boolean" nxe:label="Exp each turn?" nxe:gridwidth="200"> 
				<xsd:annotation>
					<xsd:documentation>Most units heal 1 exp at the start of each turn; Undead do not.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="pickBookshelfTitleColour" type="momimecommon:colour" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickExclusiveFrom" type="momimecommon:pickID" nxe:label="Exclusive from" nxe:plural="Exclusive from">
		        <xsd:annotation>
		        	<xsd:documentation>This models that both Life and Death books cannot be chosen together.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="mergedFromPick" type="momimecommon:pickID" nxe:label="Merged from" nxe:plural="Merged from">
		        <xsd:annotation>
		        	<xsd:documentation>This is for modelling units that are both Undead and Chaos Channeled.  So LTUC = LTU + LTC.
When the code is checking for skills that modify a unit's magic realm/lifeform type, if it finds only one then that one becomes its modified magic realm/lifeform type.
If it finds multiple, it will look for a pick with mergedFromPick entries that match the list.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickFreeSpell" type="momimecommon:spellID" nxe:label="Free spell">
		        <xsd:annotation>
		        	<xsd:documentation>Models that the Artificer retort gives you the Enchant Item and Create Artifact spells for free.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>spellName</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="bookImageFile" type="momimecommon:imageFilename" nxe:label="Book image file" nxe:gridwidth="300" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickPrerequisite" type="momimecommon:pickPrerequisite" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="pickProductionBonus" type="momimecommon:pickProductionBonus" />
		</xsd:sequence>
		<xsd:attribute name="pickID" type="momimecommon:pickID" use="required" nxe:label="Pick ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="pickPrerequisite" nxe:singular="Pick Pre-requisite" nxe:plural="Pick Pre-requisites">
        <xsd:annotation>
        	<xsd:documentation>Defines pre-requisites for choosing a particular pick at the start of the game, e.g. that you need 4 Life Books to pick Divine Power.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="prerequisiteCount" type="momimecommon:prerequisiteCount" nxe:label="Count" nxe:gridwidth="60" />
			<xsd:choice minOccurs="1" maxOccurs="1" >
				<xsd:element minOccurs="0" maxOccurs="1" name="prerequisiteID" type="momimecommon:pickID" nxe:label="Pre-requisite Pick" nxe:gridwidth="100">
					<xsd:annotation>
						<xsd:appinfo>
							<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:element>
				<xsd:element minOccurs="0" maxOccurs="1" name="prerequisiteTypeID" type="momimecommon:pickTypeID" nxe:label="Pre-requisite Type" nxe:gridwidth="100">
					<xsd:annotation>
						<xsd:appinfo>
							<nxe:showreferencedfield>pickTypeDescriptionSingular</nxe:showreferencedfield>
						</xsd:appinfo>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="pickProductionBonus" nxe:singular="Pick Production Bonus" nxe:plural="Pick Production Bonuses">
        <xsd:annotation>
        	<xsd:documentation>Models production bonuses from retorts, e.g. Archmage +50% on magic power spent on skill, Sage Master +25% research bonus.  Can apply to specific unit types (e.g. Summoner) or magic realms (e.g. Chaos Mastery).</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="percentageBonus" type="momimecommon:percentage" nxe:label="% bonus" nxe:gridwidth="80" />
			<xsd:element minOccurs="0" maxOccurs="1" name="magicRealmID" type="momimecommon:pickID" nxe:label="Magic Realm" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="magicRealmIdBlank" type="xsd:boolean" nxe:label="Magic Realm must be blank (Arcane)?" />
			<xsd:element minOccurs="0" maxOccurs="1" name="itemCraftingSpells" type="xsd:boolean" nxe:label="Affects only item crafting spells?" />
			<xsd:element minOccurs="0" maxOccurs="1" name="unitTypeID" type="momimecommon:unitTypeID" nxe:label="Unit Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="productionTypeID" type="momimecommon:productionTypeID" use="required" nxe:label="Production Type ID" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>productionTypeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="wizard" nxe:singular="Wizard" nxe:plural="Wizards">
        <xsd:annotation>
        	<xsd:documentation>The pre-built wizards and their standard picks.  Human players can choose a pre-built wizard or a custom wizard; AI players will always choose one of the pre-defined wizards.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="wizardName" type="momimecommon:languageText" nxe:label="Name" />
			<xsd:element minOccurs="1" maxOccurs="1" name="baseNeedForNewUnits" type="momimecommon:weighting" nxe:label="Base need for new units" nxe:gridwidth="150" />
			<xsd:element minOccurs="1" maxOccurs="1" name="buildingChance" type="momimecommon:weighting" nxe:label="Building chance" nxe:gridwidth="120" />
			<xsd:element minOccurs="1" maxOccurs="1" name="settlersChance" type="momimecommon:weighting" nxe:label="Settlers chance" nxe:gridwidth="120" />
			<xsd:element minOccurs="1" maxOccurs="1" name="engineersChance" type="momimecommon:weighting" nxe:label="Engineers chance" nxe:gridwidth="120" />
			<xsd:element minOccurs="1" maxOccurs="1" name="flagColour" type="momimecommon:colour" nxe:label="Flag colour" nxe:gridwidth="80" />
			<xsd:element minOccurs="0" maxOccurs="1" name="portraitImageFile" type="momimecommon:imageFilename" nxe:label="Portrait image file" nxe:gridwidth="270" />
			<xsd:element minOccurs="0" maxOccurs="1" name="standingImageFile" type="momimecommon:imageFilename" nxe:label="Standing image file" nxe:gridwidth="330" />
			<xsd:element minOccurs="0" maxOccurs="1" name="banishingImageFile" type="momimecommon:imageFilename" nxe:label="Banishing image file" nxe:gridwidth="360" />
			<xsd:element minOccurs="0" maxOccurs="1" name="banishingHandImageFile" type="momimecommon:imageFilename" nxe:label="Banishing hand image file" nxe:gridwidth="360" />
			<xsd:element minOccurs="0" maxOccurs="1" name="worldHandsImageFile" type="momimecommon:imageFilename" nxe:label="World hands image file" nxe:gridwidth="390" />
			<xsd:element minOccurs="0" maxOccurs="1" name="evaporatingAnimation" type="momimecommon:animationID" nxe:label="Evaporating anim" nxe:gridwidth="180">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="talkingAnimation" type="momimecommon:animationID" nxe:label="Talking anim" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="chantingAnimation" type="momimecommon:animationID" nxe:label="Chanting anim" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="ballAnimation" type="momimecommon:animationID" nxe:label="Ball anim" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="screamSoundFile" type="momimecommon:imageFilename" nxe:label="Scream sound file" nxe:gridwidth="350" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="combatPlayList" type="momimecommon:playListID" nxe:label="Combat play list" nxe:gridwidth="250" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="wizardPickCount" type="momimecommon:wizardPickCount">
				<xsd:key name="wizardPickPK">
					<xsd:selector xpath="wizardPick" />
					<xsd:field xpath="@pickID" />
				</xsd:key>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="wizardID" type="momimecommon:wizardID" use="required" nxe:label="Wizard ID" nxe:gridwidth="80" />
	</xsd:complexType>

	<xsd:complexType name="wizardPickCount" nxe:singular="Wizard Pick Count" nxe:plural="Wizard Pick Counts">
        <xsd:annotation>
        	<xsd:documentation>Defines the standard picks for a pre-built wizard when they get a certain number of picks at the start of the game, i.e. one entry for if they get 11 picks, another for if they get 15 picks.  This isn't how the original MoM worked so I may change it.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="wizardPick" type="momimecommon:pickAndQuantity" />
		</xsd:sequence>
		<xsd:attribute name="pickCount" type="momimecommon:pickCount" use="required" nxe:label="Pick Count" nxe:gridwidth="80" />
	</xsd:complexType>

	<xsd:complexType name="pickAndQuantity" nxe:singular="Pick" nxe:plural="Picks">
        <xsd:annotation>
        	<xsd:documentation>Stores a pickID and quantity; used in a couple of places with different meanings.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="quantity" type="momimecommon:pickQuantity" nxe:label="Quantity" nxe:gridwidth="80" />
		</xsd:sequence>
		<xsd:attribute name="pickID" type="momimecommon:pickID" use="required" nxe:label="Pick" nxe:gridwidth="80">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="race" nxe:singular="Race" nxe:plural="Races">
        <xsd:annotation>
        	<xsd:documentation>The different races of civilians &amp; units in the game.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="raceNameSingular" type="momimecommon:languageText" nxe:label="Singular description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="raceNamePlural" type="momimecommon:languageText" nxe:label="Plural description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="raceAdvantages" type="momimecommon:languageText" nxe:label="Advantages description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="raceDisadvantages" type="momimecommon:languageText" nxe:label="Disadvantages description" />
			<xsd:element minOccurs="1" maxOccurs="1" name="nativePlane" type="momimecommon:planeNumber" nxe:label="Native Plane" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>planeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="mineralBonusMultiplier" type="momimecommon:mineralBonusMultiplier" nxe:label="Mineral Bonus Multipler" nxe:gridwidth="130" />
			<xsd:element minOccurs="0" maxOccurs="1" name="growthRateModifier" type="momimecommon:cityPopulationGrowthRate" nxe:label="Growth Rate Modifier" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="1" name="goldTradeBonus" type="momimecommon:percentage" nxe:label="Gold Trade Bonus" nxe:gridwidth="130" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="raceCannotBuild" type="momimecommon:buildingID" nxe:label="Cannot build" nxe:plural="Cannot build">
		        <xsd:annotation>
		        	<xsd:documentation>Lists out all the buildings that a particular race cannot build.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>buildingName</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="unbounded" name="cityName" type="momimecommon:description" nxe:label="City name">
		        <xsd:annotation>
		        	<xsd:documentation>Lists all the available city names for a particular race.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="racePopulationTask" type="momimecommon:racePopulationTask">
				<xsd:key name="racePopulationTaskProductionPK">
					<xsd:selector xpath="racePopulationTaskProduction" />
					<xsd:field xpath="@productionTypeID" />
				</xsd:key>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="raceUnrest" type="momimecommon:raceUnrest" />
		</xsd:sequence>
		<xsd:attribute name="raceID" type="momimecommon:raceID" use="required" nxe:label="Race ID" nxe:gridwidth="80" />
	</xsd:complexType>
	
	<xsd:complexType name="racePopulationTask" nxe:singular="Race Population Task" nxe:plural="Race Population Tasks">
        <xsd:annotation>
        	<xsd:documentation>Defines the characteristics of each population task for a particular race.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="civilianImageFile" type="momimecommon:imageFilename" nxe:label="Civilian image file" nxe:gridwidth="290" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="racePopulationTaskProduction" type="momimecommon:productionTypeAndDoubledValue">
		        <xsd:annotation>
		        	<xsd:documentation>Lists the types of production that 1,000 civilians of a particular race performing a particular task produce.  e.g. Defines that
Halfling farmers produce more food, that Klackon and Dwarven workers produce more production, and which races naturally generate magic power.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="populationTaskID" type="momimecommon:populationTaskID" use="required" nxe:label="Population Task ID" nxe:gridwidth="150" />
	</xsd:complexType>

	<xsd:complexType name="raceUnrest" nxe:singular="Unrest" nxe:plural="Unrest">
        <xsd:annotation>
        	<xsd:documentation>For a particular city race, lists out the unrest generated for each possible capital race (the race inhabiting the city where the wizards' fortress is).  Unrest modifier can be a fixed value (Klackons special -2 modifier) or more usually a percentage.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:choice minOccurs="1" maxOccurs="1" >
				<xsd:element minOccurs="0" maxOccurs="1" name="unrestPercentage" type="momimecommon:percentage" nxe:label="Unrest %" nxe:gridwidth="70" />
				<xsd:element minOccurs="0" maxOccurs="1" name="unrestLiteral" type="momimecommon:unrestLiteral" nxe:label="Unrest Literal Amount" nxe:gridwidth="160" />
			</xsd:choice>
		</xsd:sequence>
		<xsd:attribute name="capitalRaceID" type="momimecommon:raceID" use="required" nxe:label="Capital Race ID" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>raceNameSingular</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="taxRate" nxe:singular="Tax Rate" nxe:plural="Tax Rates" nxe:submenu="Cities">
        <xsd:annotation>
        	<xsd:documentation>Lists the tax rates players can choose in the game, and how much gold and unrest is generated by each setting.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="doubleTaxGold" type="momimecommon:doubledProductionValue" nxe:label="2x Gold per Population" nxe:gridwidth="140" />
			<xsd:element minOccurs="1" maxOccurs="1" name="taxUnrestPercentage" type="momimecommon:percentage" nxe:label="Unrest %" nxe:gridwidth="80" />
		</xsd:sequence>
		<xsd:attribute name="taxRateID" type="momimecommon:taxRateID" use="required" nxe:label="Tax Rate ID" nxe:gridwidth="80" />
	</xsd:complexType>
	
	<xsd:complexType name="building" nxe:singular="Building" nxe:plural="Buildings" nxe:submenu="Cities">
        <xsd:annotation>
        	<xsd:documentation>All the different buildings that can be constructed in cities, plus a couple of special entries (the special settings Housing &amp; Trade Goods, the Wizards' Fortress and Summoning Circle).</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="buildingName" type="momimecommon:languageText" nxe:label="Name" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="buildingHelpText" type="momimecommon:languageText" nxe:label="Help text" />
			<xsd:element minOccurs="0" maxOccurs="1" name="buildingUnrestReduction" type="momimecommon:buildingUnrestReduction" nxe:label="Unrest Reduction" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="buildingUnrestReductionImprovedByRetorts" type="xsd:boolean" nxe:label="Unrest reduction improved by DivP/InfP?" nxe:gridwidth="250" />
			<xsd:element minOccurs="0" maxOccurs="1" name="growthRateBonus" type="momimecommon:cityPopulationGrowthRate" nxe:label="Growth Rate Bonus" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="1" name="housingPercentageBonus" type="momimecommon:percentage" nxe:label="Housing %" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="healingRateBonus" type="momimecommon:healingRate" nxe:label="Healing Rate" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="buildingExperience" type="momimecommon:experiencePoints" nxe:label="Experience Granted" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="1" name="buildingMagicWeapons" type="momimecommon:weaponGradeNumber" nxe:label="Magic Weapons?" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>weaponGradeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="productionCost" type="momimecommon:productionCost" nxe:label="Production Cost" nxe:gridwidth="110">
		        <xsd:annotation><xsd:documentation>Builidngs like trade goods, housing, summoning circle don't specify a production cost.</xsd:documentation></xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="buildingScoutingRange" type="momimecommon:scoutingRange" nxe:label="Scouting Range" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="inWizardsStartingCities" type="xsd:boolean" nxe:label="In Wizards' Starting Cities?" />
			<xsd:element minOccurs="0" maxOccurs="1" name="inRaidersStartingCitiesWithPopulationAtLeast" type="momimecommon:cityPopulationDiv1000" nxe:label="In Raider Starting Cities of what size?" nxe:gridwith="180" />
			<xsd:element minOccurs="0" maxOccurs="1" name="aiBuildingTypeID" type="momimecommon:aiBuildingTypeID" nxe:label="AI Building Type" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="0" maxOccurs="1" name="monsterFoundImageFile" type="momimecommon:imageFilename" nxe:label="Monster Found image file" nxe:gridwidth="380" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="buildingPrerequisite" type="momimecommon:buildingID" nxe:label="Building pre-requisite">
		        <xsd:annotation>
		        	<xsd:documentation>For a particular building, defines the buildings you must already have in order to construct it,
e.g. to build a Farmers' Market you must have a Granary and a Marketplace.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>buildingName</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="buildingPopulationProductionModifier" type="momimecommon:buildingPopulationProductionModifier" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="buildingRequiresTileType" type="momimecommon:buildingRequiresTileType" />
		</xsd:sequence>
		<xsd:attribute name="buildingID" type="momimecommon:buildingID" use="required" nxe:label="Building ID" nxe:gridwidth="80" />
	</xsd:complexType>
	
	<xsd:complexType name="buildingPopulationProductionModifier" nxe:singular="Building Population Production Modifier" nxe:plural="Building Population Production Modifiers">
        <xsd:annotation>
        	<xsd:documentation>Defines all the production, consumption (upkeep) and percentage modifiers for a particular type of buildings, including how much gold the building costs to maintain (task blank), 
Animsts' Guilds increasing farmers' ration production, production boost from Sawmills, and the magic power and research produced by Alchemists' and Sages' Guilds.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1" name="doubleAmount" type="momimecommon:doubledProductionValue" nxe:label="2x Modifier Amount" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="1" name="percentageBonus" type="momimecommon:percentage" nxe:label="Percentage Bonus" nxe:gridwidth="120" />
		</xsd:sequence>
		<xsd:attribute name="populationTaskID" type="momimecommon:populationTaskID" use="optional" nxe:label="Population Task ID" nxe:showmaincolumn="false">
	        <xsd:annotation>
	        	<xsd:documentation>Population Task can be ommitted, in which case the modifier applies once to the city as a whole.  If filled in, the modifier applies to each 1,000 civilians performing that task.</xsd:documentation>
	        </xsd:annotation>
        </xsd:attribute>
		<xsd:attribute name="productionTypeID" type="momimecommon:productionTypeID" use="required" nxe:label="Production Type ID" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>productionTypeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="buildingRequiresTileType" nxe:singular="Tile Type Pre-requisite" nxe:plural="Tile Type Pre-requisites">
        <xsd:annotation>
        	<xsd:documentation>For a particular building, specifies if you can only construct this building if there is a particular type of tile within a particular radius, e.g. can only build a Ship Wrights' Guild if there is an adjacent Ocean tile, and can only build a Sawmill if there is some Forest in the city radius.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="distance" type="momimecommon:integerMapDistance" nxe:label="Distance" nxe:gridwidth="80" />
		</xsd:sequence>
		<xsd:attribute name="tileTypeID" type="momimecommon:tileTypeID" use="required" nxe:label="Tile Type Pre-requisite" nxe:gridwidth="150">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>tileTypeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="rangedAttackType" nxe:singular="Ranged Attack Type" nxe:plural="Ranged Attack Types" nxe:submenu="Units">
        <xsd:annotation>
        	<xsd:documentation>Lists all the different types of ranged attacks available, e.g. arrows, rocks, lightning bolts (Storm Giants), purple dots (Dark Elves).  Magic ranged attacks are of a particular magic realm, which is important for spells which resist against particular realms of magic, e.g. Elemental Armour.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="rangedAttackTypeDetailedDescription" type="momimecommon:description" nxe:label="Detailed Description" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="rangedAttackTypeDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="1" maxOccurs="1" name="mithrilAndAdamantiumVersions" type="xsd:boolean" nxe:label="Mithril/Adam?" />
			<xsd:element minOccurs="1" maxOccurs="1" name="wooden" type="xsd:boolean" nxe:label="Wooden?">
				<xsd:annotation>
					<xsd:documentation>Literally this is "Can it be affected by Warp Wood spell".  Magic attacks and large boulders have false here.  Bows and slingshots have true.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="damageTypeID" type="momimecommon:damageTypeID" nxe:label="Damage Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>damageTypeName</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="rangedAttackSoundFile" type="momimecommon:imageFilename" nxe:label="RAT sound file" nxe:gridwidth="400" />
			<xsd:element minOccurs="0" maxOccurs="1" name="magicRealmID" type="momimecommon:pickID" nxe:label="Magic Realm (for e.g. Elem Armour &amp; Righteousness)" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:documentation>Non-magical ranged attacks (such as arrows and rocks) do not have a magic realm ID.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="rangedAttackTypeWeaponGrade" type="momimecommon:rangedAttackTypeWeaponGrade" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="rangedAttackTypeCombatImage" type="momimecommon:rangedAttackTypeCombatImage" />
		</xsd:sequence>
		<xsd:attribute name="rangedAttackTypeID" type="momimecommon:rangedAttackTypeID" use="required" nxe:label="RAT ID" nxe:gridwidth="50" />
	</xsd:complexType>

	<xsd:complexType name="rangedAttackTypeWeaponGrade" nxe:singular="RAT Weapon Grade" nxe:plural="RAT Weapon Grades">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="unitDisplayRangedImageFile" type="momimecommon:imageFilename" nxe:label="Unit Display RAT image file" nxe:gridwidth="380" />
		</xsd:sequence>
		<xsd:attribute name="weaponGradeNumber" type="momimecommon:weaponGradeNumber" use="required" nxe:label="Weapon Grade Number" nxe:gridwidth="120">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>weaponGradeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="rangedAttackTypeCombatImage" nxe:singular="RAT Combat Image" nxe:plural="RAT Combat Images">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1" name="rangedAttackTypeCombatAnimation" type="momimecommon:animationID" nxe:label="RAT combat animation" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="rangedAttackTypeCombatImageFile" type="momimecommon:imageFilename" nxe:label="RAT combat image file" nxe:gridwidth="370" />
		</xsd:sequence>
		<xsd:attribute name="rangedAttackTypeActionID" type="momimecommon:rangedAttackTypeActionID" use="required" nxe:label="Action" nxe:gridwidth="100" />
		<xsd:attribute name="direction" type="map:mapDirection" use="required" nxe:label="Direction" nxe:gridwidth="50" />
	</xsd:complexType>

	<xsd:complexType name="weaponGrade" nxe:singular="Weapon Grade" nxe:plural="Weapon Grades" nxe:submenu="Units">
        <xsd:annotation>
        	<xsd:documentation>Defines the wepaon grades available for normal units, such as that units can have Adamantium instead of regular weapons.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="weaponGradeDescription" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="380" />
			<xsd:element minOccurs="1" maxOccurs="1" name="enhancesDamageType" type="xsd:boolean" nxe:label="Enhances Damage Type?" nxe:gridwidth="200"> 
				<xsd:annotation>
					<xsd:documentation>Basically this indicates whether this weapon grade can punch through Weapon Immunity.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="weaponGradeSkillBonus" type="momimecommon:unitSkillAndValue" nxe:singular="Skill Bonus" nxe:plural="Skill Bonuses" />
		</xsd:sequence>
		<xsd:attribute name="weaponGradeNumber" type="momimecommon:weaponGradeNumber" use="required" nxe:label="Weapon Grade Number" nxe:gridwidth="120" />
	</xsd:complexType>

	<xsd:complexType name="unitSkill" nxe:singular="Unit Skill" nxe:plural="Unit Skills" nxe:submenu="Units">
        <xsd:annotation>
        	<xsd:documentation>Defines all the unit attributes and skills available, e.g. Melee Attack Strength, Defence, Resistance, First Strike, Flame Breath,
Flying, Scouting, as well as skill-like effects from spells (both enchantments and curses), e.g. Bless, Endurance, Flame Blade, Confusion, Black Sleep -
i.e. both the lists of top half and bottom half of the unit info screen.  Their only difference is where they appear on the unit info screen, which
is defined in the graphics XML file.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitSkillDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitSkillHelpText" type="momimecommon:languageText" nxe:label="Help text" />
			<xsd:element minOccurs="1" maxOccurs="1" name="unitSkillTypeID" type="momimecommon:unitSkillTypeID" nxe:label="Skill type" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="changesUnitToMagicRealm" type="momimecommon:pickID" nxe:label="Changes Unit to Magic Realm/Lifeform Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="ignoreCombatTerrain" type="xsd:boolean" nxe:label="Ignore combat terrain?">
		        <xsd:annotation>
		        	<xsd:documentation>If a unit has any skill where this is set to true, they will not be hindered by combat terrain that slows movement, such as
ridges or the Earth to Mud skill.  They also don't gain the benefit of faster movement from roads.  It also allows them to ignore combat tile borders
that normally block movement across them (i.e. stone walls).  Completely impassable tiles such as buildings or stone wall corner sections are still impassable.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="heroSkillTypeID" type="momimecommon:heroSkillTypeID" nxe:label="Hero Skill Type" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="0" maxOccurs="1" name="onlyIfHaveAlready" type="xsd:boolean" nxe:label="Only if have already?" />
			<xsd:element minOccurs="0" maxOccurs="1" name="maxOccurrences" type="momimecommon:heroSkillMaxOccurrences" nxe:label="Max. Occurrences" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="unitSkillScoutingRange" type="momimecommon:scoutingRange" nxe:label="Scouting Range" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="damageTypeID" type="momimecommon:damageTypeID" nxe:label="Damage Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>damageTypeName</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="damageResolutionTypeID" type="momimecommon:damageResolutionTypeID" nxe:label="Damage Res. Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:documentation>Rules for determining the amount of damage dealt by attack skills, e.g. gaze, breath or touch attacks.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="damageResolutionTypeUpgradeable" type="xsd:boolean" nxe:label="Damage Res. Type upgradeable?">
				<xsd:annotation>
					<xsd:documentation>Can the damage resolution type be upgraded by the armour piercing / illusionary attack skills?
Melee, ranged, thrown can, but fire breath for example also deals "single figure" damage, but cannot.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="enhancesDamageType" type="xsd:boolean" nxe:label="Enhances Damage Type?" nxe:gridwidth="200"> 
				<xsd:annotation>
					<xsd:documentation>Basically this indicates whether this skill negates Weapon Immunity for regular attacks,
e.g. Eldritch Weapon is not an attack in itself, but upgrades the unit's regular attacks.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="damagePerFigure" type="momimecommon:damagePerFigureID" nxe:label="Damage Per Figure" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:documentation>False if the unit attacks as a whole (so a damaged unit deals the same damage as a fully healed unit); true if each figure
attacks and so the rating of the unit skill is multiplied up by the number of figures left alive to get the strength of the attack.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="magicRealmID" type="momimecommon:pickID" nxe:label="Magic Realm of Attack" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:documentation>Magic realm of the damage dealt, e.g. lightning breath is considered a Chaos attack.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="aiRatingAdditive" type="momimecommon:aiRatingAdditive" nxe:label="AI Rating Add" nxe:gridwidth="60">
				<xsd:annotation>
					<xsd:documentation>How valuable the AI rates this skill, e.g. +10 for each melee attack point, +20 for each ranged attack point, +30 for Flight and so on.
Valueless skills are taken as if they were strength 1, so will add just this value.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="aiRatingDiminishesAfter" type="momimecommon:unitSkillValue" nxe:label="AI Rating Dim. after" nxe:gridwidth="80">
				<xsd:annotation>
					<xsd:documentation>Most skills like melee/ranged attack and defence are great the higher value you can get, but others like Resistance diminish their usefulness
in high scored - there's little point having any resistance above 15 or so.  So if set, stat scores beyond this value will have their usefulness rated -1 per point.
e.g. If aiRatingAdditive = 10 and aiRatingDiminishesAfter = 5 and unit has score of 8, it would be rated as 10+10+10+10+10+9+8+7</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="aiRatingMultiplicative" type="momimecommon:aiRatingMultiplicative" nxe:label="AI Rating Mult." nxe:gridwidth="60">
				<xsd:annotation>
					<xsd:documentation>Most skills have their values just added together to calculate a rating for the unit.  But some skills by their nature have their usefulness dictated by
how good the unit was already, e.g. put Regeneration on a crap unit of spearmen and it is still a crap unit of spearmen, but put it on a powerful unit and it is exceptionally useful.
Conversely, the Undead skill drastically reduces the value of a unit, no matter how good it was before, so has a multiplicative modifier of less than 1.

Multiple multiplicative modifiers are multiplied together, so if a unit has a x2 and x3 skill, then its overall value will be the sum of additive modifiers x6.

The number of figures left alive in a unit is also a multiplicative modifier, fractional if the lead figure has taken damage, e.g. if an 8 figure unit has lost half the health of
the lead figure then the unit's value will be multiplied by x7.5.

The value of multiplicative skills is ignored, so don't use this for any skill that may take a value.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="unitSkillImageFile" type="momimecommon:imageFilename" nxe:label="Unit skill image file" nxe:gridwidth="300" />
			<xsd:element minOccurs="0" maxOccurs="1" name="movementIconImageFile" type="momimecommon:imageFilename" nxe:label="Movement icon image file" nxe:gridwidth="300" />
			<xsd:element minOccurs="0" maxOccurs="1" name="movementIconImagePreference" type="momimecommon:rulePreferenceWeighting" nxe:label="Movement icon image preference weighting" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="1" name="sampleTileImageFile" type="momimecommon:imageFilename" nxe:label="Sample Tile image file" nxe:gridwidth="400" />
			<xsd:element minOccurs="0" maxOccurs="1" name="standActionID" type="momimecommon:combatActionID" nxe:label="Standing combat action ID" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>combatActionDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="moveActionID" type="momimecommon:combatActionID" nxe:label="Moving combat action ID" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>combatActionDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="unitSkillCombatColour" type="momimecommon:colour" nxe:label="Unit skill (spell effect) colour" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="unitSkillCombatOverlay" type="momimecommon:imageFilename" nxe:label="Unit skill (spell effect) image" nxe:gridwidth="300">
		        <xsd:annotation>
        			<xsd:documentation>Image to draw over the top of the unit in combat when it has this "skill", e.g. Web.  Or can show animation like Confusion below.</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="unitSkillCombatAnimation" type="momimecommon:animationID" nxe:label="Unit skill (spell effect) animation" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="unitSkillCombatOverlayMinimumValue" type="momimecommon:unitSkillValue" nxe:label="Min skill value to draw overlay" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:documentation>If null, unitSkillCombatOverlay or unitSkillCombatAnimation will always be drawn if the unit has this "skill".  If there is a non-null
value here, the image/anim will only be drawn if the unit has a non-null value for the skill of at least this value.  Used for Web which starts with value 12 representing
the remaining HP of the web and decreases and eventually becomes null, at which point we no longer want to draw the web overlay, but the skill still exists to negate flight.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="grantsSkill" type="momimecommon:unitSkillID" nxe:label="Grants skill">
				<xsd:annotation>
					<xsd:documentation>Certain skills implicitly grant other skills, e.g. Invulerability and Wraith Form both implicitly grant Weapon Immunity.
But we can't just duplicate the Weapon Immunity effect because a unit with magical weapons ignores the Weapon Immunity portion of the skill but not the -2 damage portion.
So like this, its possible to basically break skills down into multiple sub-skills, with different immunities to each.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="addsToSkill" type="momimecommon:addsToSkill" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="negatedBySkill" type="momimecommon:negatedBySkill" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitSkillWeaponGrade" type="momimecommon:unitSkillWeaponGrade" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="attackResolution" type="momimecommon:attackResolution">
				<xsd:key name="attackResolutionConditionPK">
					<xsd:selector xpath="attackResolutionCondition" />
					<xsd:field xpath="@combatSide" />
					<xsd:field xpath="@unitSkillID" />
				</xsd:key>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="unitSkillID" type="momimecommon:unitSkillID" use="required" nxe:label="Unit Skill ID" nxe:gridwidth="80" />
	</xsd:complexType>

	<xsd:complexType name="addsToSkill" nxe:singular="Adds to Skill" nxe:plural="Adds to Skills">
		<xsd:annotation>
			<xsd:documentation>Defines when having one skill adds some bonus value to another skill.  This includes hero skills,
e.g. Agility adds to the hero's Defence score, and spell effects e.g. Holy Armour also adds to the unit's Defence score.
A single skill can add a bonus to multiple skills, as is the case with Holy Bonus.  There is no unique key here - it would in theory be
possible to define one skill that adds say +2 defence to ourselves, but +1 to all other units in our stack, so addsToSkillID may be repeated.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="addsToSkillID" type="momimecommon:unitSkillID" nxe:label="Adds to Skill">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="affectsEntireStack" type="xsd:boolean" nxe:label="Affects entire stack?" nxe:gridwidth="150">
		        <xsd:annotation>
        			<xsd:documentation>Usually false.  Set to true if a unit possessing this skill provides the bonus to the entire stack as well as this unit.
Used for Resistance to All and Holy Bonus.  Note in the original MoM, such skills only worked inside combat.</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="addsToSkillDivisor" type="momimecommon:skillDivisor" nxe:label="Skill Level Divisor" nxe:gridwidth="100">
		        <xsd:annotation>
        			<xsd:documentation>This is for hero skills, where the amount of bonus added depends on the level of the hero.  It is 1 for most hero skills,
e.g. Agility adds Level / 1 to the hero's Defence score; the exception is Blademaster which only adds Level / 2 to the hero's +to Hit score.
If addsToSkillID is non-null, either addsToSkillDivisor or addsToSkillFixed must be filled in, but not both.  If both are null, the amount of the
bonus is taken from the numeric value of the skill, e.g. "Resistance to Others 2".</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="addsToSkillFixed" type="momimecommon:unitSkillValue" nxe:label="Skill Fixed Bonus" nxe:gridwidth="100">
		        <xsd:annotation>
        			<xsd:documentation>This is typically for spell effects, where a fixed amount is added to another skill, e.g. Holy Armour adds +2 to Defence.
If addsToSkillID is non-null, either addsToSkillDivisor or addsToSkillFixed must be filled in, but not both.  If both are null, the amount of the
bonus is taken from the numeric value of the skill, e.g. "Resistance to Others 2".</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="onlyAppliesToMagicRealmID" type="momimecommon:pickID" nxe:label="Only applies to Magic Realm/Lifeform Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:documentation>Bonus only applies to unit with this magic realm.  Only makes sense in conjunction with affectsEntireStack = true.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="rangedAttackTypeID" type="momimecommon:rangedAttackTypeID" nxe:label="Ranged attack type" nxe:showmaincolumn="false">
				<xsd:annotation>
        			<xsd:documentation>This is principally here for the "Flame Blade" skill, which only gives +2 ranged attack for certain RATs but not others.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>rangedAttackTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="onlyVersusAttacksFromSkillID" type="momimecommon:unitSkillID" nxe:label="Only applies vs atks from skill" nxe:showmaincolumn="false">
				<xsd:annotation>
        			<xsd:documentation>This is principally here for the "Large Shield" skill, which only gives +2 defence vs. incoming ranged attacks, but not melee.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="negateOnlyVersusAttacksFromSkillID" type="xsd:boolean" nxe:label="Not?" nxe:gridwidth="50">
				<xsd:annotation>
        			<xsd:documentation>Inverts the onlyVersusAttacksFromSkillID check, so will grant bonus if skill is NOT one of those listed.
This is principally here for the ""Large Shield", which is defined as "gives +2 defence vs. all types of incoming attack except melee hits".</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="onlyVersusAttacksFromMagicRealmID" type="momimecommon:pickID" nxe:label="Only applies vs atks from magic realm" nxe:showmaincolumn="false">
				<xsd:annotation>
        			<xsd:documentation>Some spell effects, e.g. Resist Elements or Bless, only provide a stat bonus when the unit is attacked by certain realms of magic.
In that case, the restriction is put here, with multiple addsToSkill records if necessary.  A null here means the bonus always applies no matter the kind of attack.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="onlyInCombat" type="xsd:boolean" nxe:label="Only applies in combat?" nxe:showmaincolumn="false">
				<xsd:annotation>
        			<xsd:documentation>Bonus only applies to damage being rolled to the unit in combat.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="penaltyToEnemy" type="xsd:boolean" nxe:label="Penalty to enemy?" nxe:showmaincolumn="false">
				<xsd:annotation>
        			<xsd:documentation>Skill modification is applied to enemy unit, not us.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="negatedBySkill" nxe:singular="Negated by Skill" nxe:plural="Negated by Skills">
		<xsd:annotation>
			<xsd:documentation>Certain skills cancel each other out, e.g. under First Strike will be a negation record listing the Negate First Strike cancels it out,
and under Resist Elements will be a negation record listing that Elemental Armour cancels it out.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="negatedByUnitID" type="momimecommon:negatedByUnitID" nxe:label="Negated by which unit's skill?" nxe:showmaincolumn="false" />
		</xsd:sequence>
		<xsd:attribute name="negatedBySkillID" type="momimecommon:unitSkillID" use="required" nxe:label="Negated by Skill">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="unitSkillWeaponGrade" nxe:singular="Attr Weapon Grade" nxe:plural="Attr Weapon Grades">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="skillImageFile" type="momimecommon:imageFilename" nxe:label="Unit Skill image file" nxe:gridwidth="350" />
		</xsd:sequence>
		<xsd:attribute name="weaponGradeNumber" type="momimecommon:weaponGradeNumber" use="required" nxe:label="Weapon Grade Number" nxe:gridwidth="120">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>weaponGradeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="unitType" nxe:singular="Unit Type" nxe:plural="Unit Types" nxe:submenu="Units">
        <xsd:annotation>
        	<xsd:documentation>Defines the types of units in the game, i.e. Normal, Summoned and Heroes.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="unitTypeDescription" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitTypeInexperienced" type="momimecommon:languageText" nxe:label="Help text when inexperienced" nxe:plural="Help text when inexperienced" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitTypeExperienced" type="momimecommon:languageText" nxe:label="Help text when experienced" nxe:plural="Help text when experienced" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitTypeMaxNaturalExperience" type="momimecommon:languageText" nxe:label="Help text when at max naturally attainable experience" nxe:plural="Help text when at max naturally attainable experience" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitTypeMaxExperience" type="momimecommon:languageText" nxe:label="Help text when at absolute max experience" nxe:plural="Help text when at absolute max experience" />
			<xsd:element minOccurs="1" maxOccurs="1" name="undeadUpkeepPercentage" type="xsd:unsignedShort" nxe:label="Undead upkeep %" nxe:gridwidth="150" />
			<xsd:element minOccurs="1" maxOccurs="1" name="announceWhenLevelGained" type="xsd:boolean" nxe:label="Announce when level gained?" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="experienceLevel" type="momimecommon:experienceLevel">
				<xsd:key name="experienceSkillBonusPK">
					<xsd:selector xpath="experienceSkillBonus" />
					<xsd:field xpath="@unitSkillID" />
				</xsd:key>
				<xsd:key name="experienceLevelNamePK">
					<xsd:selector xpath="experienceLevelName" />
					<xsd:field xpath="@language" />
				</xsd:key>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="unitTypeID" type="momimecommon:unitTypeID" use="required" nxe:label="Unit Type ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="experienceLevel" nxe:singular="Experience Level" nxe:plural="Experience Levels">
        <xsd:annotation>
        	<xsd:documentation>Defines the different experience levels a particular type of unit can attain.  Normal units and Heroes have different experience tables; Summoned units don't gain experience at all.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="experienceLevelName" type="momimecommon:languageText" nxe:label="Name" />
			<xsd:element minOccurs="1" maxOccurs="1" name="ringColour" type="momimecommon:colour" nxe:label="Ring Colour" nxe:gridwidth="80" />
			<xsd:element minOccurs="1" maxOccurs="1" name="ringCount" type="momimecommon:experienceLevelRingCount" nxe:label="Nbr. Rings" nxe:gridwidth="70" />
			<xsd:element minOccurs="1" maxOccurs="1" name="experienceLevelImageFile" type="momimecommon:imageFilename" nxe:label="Name" nxe:gridwidth="300" />
			<xsd:element minOccurs="0" maxOccurs="1" name="experienceRequired" type="momimecommon:experiencePoints" nxe:label="Experience Required" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:documentation>experienceRequired is omitted for experience levels that cannot be attained simply by gaining experience, i.e. Ultra-Elite and Champion on Normal units (which need Warlord and/or Crusade to attain).
Levels that do not require any experience (i.e. Recruit for normal units) must state a 0 here and not leave the field blank.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="experienceSkillBonus" type="momimecommon:unitSkillAndValue" nxe:label="Bonus to skill" nxe:plural="Bonuses to skills" />
		</xsd:sequence>
		<xsd:attribute name="levelNumber" type="momimecommon:experienceLevelNumber" use="required" nxe:label="Level" nxe:gridwidth="50" />
	</xsd:complexType>

	<xsd:complexType name="combatAction" nxe:singular="Combat Action" nxe:plural="Combat Actions" nxe:submenu="Units">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="combatActionDescription" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="450" />
			<xsd:element minOccurs="0" maxOccurs="1" name="defaultActionSoundFile" type="momimecommon:imageFilename" nxe:label="Default action sound file" nxe:gridwidth="450" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="canOnlyBeAttackedByUnitsWithSkill" type="momimecommon:unitSkillID" nxe:label="Can only be attacked by skill">
				<xsd:annotation>
					<xsd:documentation>Units with combatActionID=FLY in combat can only be attacked by other units with combatActionID=FLY, or who have
one of these listed skills.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="combatActionID" type="momimecommon:combatActionID" use="required" nxe:label="Combat Action ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="unit" nxe:singular="Unit" nxe:plural="Units" nxe:submenu="Units">
        <xsd:annotation>
        	<xsd:documentation>Defines all the units available in the game.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitName" type="momimecommon:languageText" nxe:label="Unit name" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitNamePrefix" type="momimecommon:languageText" nxe:label="Unit name prefix" nxe:plural="Unit name prefixex" />
			<xsd:element minOccurs="1" maxOccurs="1" name="unitMagicRealm" type="momimecommon:pickID" nxe:label="Magic Realm/Lifeform Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="figureCount" type="momimecommon:figureCount" nxe:label="Figure Count" nxe:gridwidth="110" />
			<xsd:element minOccurs="1" maxOccurs="1" name="unitOverlandImageFile" type="momimecommon:imageFilename" nxe:label="Overland image file" nxe:gridwidth="320" />
			<xsd:element minOccurs="0" maxOccurs="1" name="unitOverlandImageFlag" type="momimecommon:imageFilename" nxe:label="Overland image flag" nxe:gridwidth="320" />
			<xsd:element minOccurs="0" maxOccurs="1" name="flagOffsetX" type="momimecommon:pixelCoordinate" nxe:label="Flag offset X" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="flagOffsetY" type="momimecommon:pixelCoordinate" nxe:label="Flag offset Y" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="unitRaceID" type="momimecommon:raceID" nxe:label="Unit Race" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>raceNameSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="includeRaceInUnitName" type="xsd:boolean" nxe:label="Race in Unit Name?" nxe:gridwidth="130" />
			<xsd:element minOccurs="0" maxOccurs="1" name="productionCost" type="momimecommon:productionCost" nxe:label="Cost" nxe:gridwidth="50">
				<xsd:annotation>
					<xsd:documentation>Production cost is optional; units with no production cost are assumed to be infinitely expensive and so can not be 'built' in any conventional manner or put in
nodes/lairs/towers, however they can still be created from summoning spells (whose cost is set by the casting cost of the spell, not the production cost of the unit).
This is used to stop the server putting Floating Islands in Sorcery Nodes.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="rangedAttackType" type="momimecommon:rangedAttackTypeID" nxe:label="Ranged Type" nxe:gridwidth="100">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>rangedAttackTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="transportCapacity" type="momimecommon:transportCapacity" nxe:label="Transport Capacity" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="1" name="nonCombatUnit" type="xsd:boolean" nxe:label="Non-combat unit?" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="hiringFame" type="momimecommon:fame" nxe:label="Req'd Fame" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="heroRandomPickType" type="momimecommon:heroSkillTypeID" nxe:label="Hero Random Pick Type" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="0" maxOccurs="1" name="heroRandomPickCount" type="momimecommon:heroRandomPickCount" nxe:label="Hero Random Picks" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="freeAtStartCount" type="momimecommon:freeAtStartCount" nxe:label="Nbr. Free at Start" nxe:gridwidth="130" />
			<xsd:element minOccurs="0" maxOccurs="1" name="unitSummonImageFile" type="momimecommon:imageFilename" nxe:label="Summoning image file" nxe:gridwidth="350" />
			<xsd:element minOccurs="0" maxOccurs="1" name="heroPortraitImageFile" type="momimecommon:imageFilename" nxe:label="Hero Portrait image file" nxe:gridwidth="320" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitPrerequisite" type="momimecommon:buildingID" nxe:label="Building pre-requisite">
		        <xsd:annotation>
		        	<xsd:documentation>Lists the buildings that we need to have in a city in order to build a particular unit, e.g. that we need a Sawmill to build Bowmen.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>buildingName</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemSlot" type="momimecommon:heroItemSlotTypeID" nxe:label="Hero item slot">
		        <xsd:annotation>
		        	<xsd:documentation>Lists the 3 "item slots" a hero has, so that fighter-type heroes typically have a Sword slot, Shield slot and a special item (Ring) slot, whereas mage-type heroes typically have a Wand slot and two special item (Ring) slots.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>slotTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitUpkeep" type="momimecommon:productionTypeAndUndoubledValue" nxe:label="Upkeep" nxe:plural="Upkeep">
				<xsd:annotation>
					<xsd:documentation>Lists all the types of upkeep for a particular unit, e.g. that Wolf Riders eat 1 ration and use 2 gold per turn.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitHasSkill" type="momimecommon:unitSkillAndValue" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitCanCast" type="momimecommon:unitCanCast" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitCombatAction" type="momimecommon:unitCombatAction">
				<xsd:key name="unitCombatImagePK">
					<xsd:selector xpath="unitCombatImage" />
					<xsd:field xpath="@direction" />
				</xsd:key>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroName" type="momimecommon:heroName">
				<xsd:key name="heroNameLangPK">
					<xsd:selector xpath="heroNameLang" />
					<xsd:field xpath="@language" />
				</xsd:key>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitPickPrerequisite" type="momimecommon:pickAndQuantity" nxe:label="Pick pre-requisite">
				<xsd:annotation>
					<xsd:documentation>Lists any picks necessary in order to be able to summon this unit, e.g. to summon Ravashack the Necromancer you need at least 1 Death Book.
Most summoning spells only summon 1 kind of unit, and hence are restricted by whether the spell can be learned, so this is only used for Summon Hero/Champion
where a number of different heroes may be summoned at random, but some may have restrictions for whether they are available or not.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="unitID" type="momimecommon:unitID" use="required" nxe:label="Unit ID" nxe:gridwidth="50" />
	</xsd:complexType>

	<xsd:complexType name="heroName" nxe:singular="Hero Name" nxe:plural="Hero Names">
        <xsd:annotation>
        	<xsd:documentation>Defines identifiers for all the possible variations of a hero's name.  This is so e.g. "Shalla the Amazon" is called "Shalla l'Amazone" in the French version.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroNameLang" type="momimecommon:languageText" nxe:label="Hero Name" />
		</xsd:sequence>
		<xsd:attribute name="heroNameID" type="momimecommon:heroNameID" use="required" nxe:label="Hero Name ID" nxe:gridwidth="130" />
	</xsd:complexType>

	<xsd:complexType name="unitCanCast" nxe:singular="Unit Spell" nxe:plural="Unit Spells">
        <xsd:annotation>
        	<xsd:documentation>Defines fixed spells a particular unit can cast - Priests casting Healing, Magicians casting Fireball, Warlocks casting Doom Bolt, and Giant Spiders "casting" Web.
Heroes have entries with numberOfTimes left null for the additional spells they know, e.g. Serena the Healer always knows the Healing spell even if her controlling wizard doesn't.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1" name="numberOfTimes" type="momimecommon:spellCount" nxe:label="Number of Times can cast it" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="1" name="immuneToCounterMagic" type="xsd:boolean" nxe:label="Immune to Counter Magic?" nxe:gridwidth="200" />
		</xsd:sequence>
		<xsd:attribute name="unitSpellID" type="momimecommon:spellID" use="required" nxe:label="Spell" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>spellName</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="unitSkillAndValue" nxe:singular="Unit Skills" nxe:plural="Unit Skills">
        <xsd:annotation>
        	<xsd:documentation>Specifies that a unit has a particular skill, or some skill bonus granted from experience, items or so on.
This type is reused in a lot of places.  Some skills are valueless, e.g. First Strike or Flying, while others specify some kind of strength value, e.g. Flame Breath or Scouting.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1" name="unitSkillValue" type="momimecommon:unitSkillValue" nxe:label="Skill Value" nxe:gridwidth="100">
				<xsd:annotation>
					<xsd:documentation>Some skills have a value or saving throw penalty (such as Fire Breath 2 or Fire Breath 20, or Life Steal 2 or Life Steal 6) whereas some skills
don't have a value (such as Fire Immunity or Mountaineer).  By convention MoM IME stores all skill values as positive numbers.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="unitSkillID" type="momimecommon:unitSkillID" use="required" nxe:label="Skill" nxe:gridwidth="200">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="productionTypeAndUndoubledValue" nxe:singular="Undoubled Production" nxe:plural="Undoubled Production">
        <xsd:annotation>
        	<xsd:documentation>Stores a production type ID and value.  Note this is an identical structure to productionTypeAndDoubledValue
but kept these separate to make it totally clear when production values are recorded as is and when they are recorded doubled.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="undoubledProductionValue" type="momimecommon:undoubledProductionValue" nxe:label="Undoubled value" nxe:gridwidth="150" />
		</xsd:sequence>
		<xsd:attribute name="productionTypeID" type="momimecommon:productionTypeID" use="required" nxe:label="Production Type" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>productionTypeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="productionTypeAndDoubledValue" nxe:singular="Doubled Production" nxe:plural="Doubled Production">
        <xsd:annotation>
        	<xsd:documentation>Stores a production type ID and value.  Note this is an identical structure to productionTypeAndUndoubledValue
but kept these separate to make it totally clear when production values are recorded as is and when they are recorded doubled.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="doubledProductionValue" type="momimecommon:doubledProductionValue" nxe:label="Doubled value" nxe:gridwidth="150" />
		</xsd:sequence>
		<xsd:attribute name="productionTypeID" type="momimecommon:productionTypeID" use="required" nxe:label="Production Type" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>productionTypeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="unitCombatAction" nxe:singular="Unit Combat Action" nxe:plural="Unit Combat Actions">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1" name="overrideActionSoundFile" type="momimecommon:imageFilename" nxe:label="Override action sound file" nxe:gridwidth="600" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitCombatImage" type="momimecommon:unitCombatImage" />
		</xsd:sequence>
		<xsd:attribute name="combatActionID" type="momimecommon:combatActionID" use="required" nxe:label="Combat Action ID" nxe:gridwidth="100">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>combatActionDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="unitCombatImage" nxe:singular="Unit Combat Image" nxe:plural="Unit Combat Images">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1" name="unitCombatAnimation" type="momimecommon:animationID" nxe:label="Unit combat animation" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="unitCombatImageFile" type="momimecommon:imageFilename" nxe:label="Unit combat image file" nxe:gridwidth="400" />
			<xsd:element minOccurs="0" maxOccurs="1" name="unitCombatImageFlag" type="momimecommon:imageFilename" nxe:label="Combat image flag" nxe:gridwidth="320" />
			<xsd:element minOccurs="0" maxOccurs="1" name="flagOffsetX" type="momimecommon:pixelCoordinate" nxe:label="Flag offset X" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="flagOffsetY" type="momimecommon:pixelCoordinate" nxe:label="Flag offset Y" nxe:gridwidth="150" />
		</xsd:sequence>
		<xsd:attribute name="direction" type="map:mapDirection" use="required" nxe:label="Direction" nxe:gridwidth="50" />
	</xsd:complexType>
	
	<xsd:complexType name="combatAreaEffect" nxe:singular="Combat Area Effect" nxe:plural="Combat Area Effects" nxe:submenu="Magic">
        <xsd:annotation>
        	<xsd:documentation>Defines area effects that affect an entire combat, or the entire map, e.g. Prayer, Darkness, Crusade, Eternal Night and Node Auras.
"Affects Players" is null for CAEs that don't modify unit stats, e.g. Counter Magic or the dispelling auras of nodes.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="combatAreaEffectDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="combatAreaEffectHelpText" type="momimecommon:languageText" nxe:label="Help text" />
			<xsd:element minOccurs="1" maxOccurs="1" name="combatAreaEffectImageFile" type="momimecommon:imageFilename" nxe:label="CAE image file" nxe:gridwidth="350" />
			<xsd:element minOccurs="0" maxOccurs="1" name="combatAreaAffectsPlayers" type="momimecommon:combatAreaAffectsPlayersID" nxe:label="Bonuses apply to units belonging to" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>combatAreaEffectsPlayersDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="combatAreaEffectMagicRealm" type="momimecommon:pickID" nxe:label="CAE magic realm" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="combatAreaEffectNegatedByPick" type="momimecommon:pickID" nxe:label="Negated by pick" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="dispellingPower" type="momimecommon:unitSkillValue">
				<xsd:annotation>
		        	<xsd:documentation>If positive then dispelling power is fixed (nodes); if negative, dispelling power is taken from spell damage and reduced by
this value each time a dispel attempt is made (counter magic).</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="combatAreaEffectSkillBonus" type="momimecommon:combatAreaEffectSkillBonus" />
		</xsd:sequence>
		<xsd:attribute name="combatAreaEffectID" type="momimecommon:combatAreaEffectID" use="required" nxe:label="Effect ID" nxe:gridwidth="80" />
	</xsd:complexType>

	<xsd:complexType name="combatAreaEffectSkillBonus" nxe:singular="Skill Bonus" nxe:plural="Skill Bonuses">
        <xsd:annotation>
        	<xsd:documentation>Lists the bonuses or penalties to skills that units get from a particular combat area effect, e.g. Chaos creatures getting bonuses to the "attack" type skills such as Fire Breath from Chaos nodes.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
			<xsd:extension base="momimecommon:unitSkillAndValue">
				<xsd:sequence>
					<xsd:element minOccurs="0" maxOccurs="1" name="effectMagicRealm" type="momimecommon:pickID" nxe:label="Bonus applies to creatures of magic realm" nxe:showmaincolumn="false">
						<xsd:annotation>
							<xsd:appinfo>
								<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="spellBookSection" nxe:singular="Spell Book Section" nxe:plural="Spell Book Sections" nxe:submenu="Spells">
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellBookSectionName" type="momimecommon:languageText" nxe:label="Name" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellTargetPrompt" type="momimecommon:languageText" nxe:label="Targeting prompt" />
		</xsd:sequence>
		<xsd:attribute name="spellBookSectionID" type="momimecommon:spellBookSectionID" use="required" nxe:label="Spell Book Section ID" nxe:gridwidth="150" />
	</xsd:complexType>

	<xsd:complexType name="spell" nxe:singular="Spell" nxe:plural="Spells" nxe:submenu="Spells">
        <xsd:annotation>
        	<xsd:documentation>Defines all the spells available to research and cast.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellName" type="momimecommon:languageText" nxe:label="Name" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellDescription" type="momimecommon:languageText" nxe:label="Short description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellHelpText" type="momimecommon:languageText" nxe:label="Long help text" />
			<xsd:element minOccurs="0" maxOccurs="1" name="spellRank" type="momimecommon:spellRankID" nxe:label="Rank" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:documentation>Units with no spell rank can never be researched (this exists solely for the Summon Demon spell)</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>spellRankDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="spellRealm" type="momimecommon:pickID" nxe:label="Realm" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:documentation>'Arcane' is not defined as a spell realm in MoM IME, so spells are defined as Arcane by leaving off the spellRealm element.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="researchCost" type="momimecommon:spellResearchCost" nxe:label="Research Cost" nxe:gridwidth="100">
				<xsd:annotation>
					<xsd:documentation>Arcane spells with no research cost defined (or research cost specified as zero) are given to the player for free at the start of the game, i.e. Magic Spirit and the Spell of Return.  See TMomServerPlayer.PutAllArcaneSpellsIntoSpellBook.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="overlandCastingCost" type="momimecommon:spellCastingCost" nxe:label="Overland Cost" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="combatCastingCost" type="momimecommon:spellCastingCost" nxe:label="Combat Cost" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="immuneToDispelling" type="xsd:boolean" nxe:label="Immune to Dispelling?" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="1" name="overlandDispelCost" type="momimecommon:spellCastingCost" nxe:label="Overland Dispel Cost" nxe:gridwidth="100">
		        <xsd:annotation>
		        	<xsd:documentation>Strength of spell when someone is trying to dispel it; by default = overlandCastingCost, but Spell Lock has a special value here.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="combatDispelCost" type="momimecommon:spellCastingCost" nxe:label="Combat Dispel Cost" nxe:gridwidth="100">
		        <xsd:annotation>
		        	<xsd:documentation>Strength of spell when someone is trying to dispel it; by default = combatCastingCost, but Spell Lock has a special value here.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="blocksOtherDispels" type="xsd:boolean" nxe:label="Blocks other dispels?" nxe:gridwidth="100">
		        <xsd:annotation>
		        	<xsd:documentation>If this is cast on a unit then it is the only enchantment that may be dispelled; all others are protected (Spell Lock).</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="spellBookSectionID" type="momimecommon:spellBookSectionID" nxe:label="Spell Book Section" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="0" maxOccurs="1" name="permanent" type="xsd:boolean" nxe:label="Permanent?" nxe:gridwidth="100">
		        <xsd:annotation>
		        	<xsd:documentation>Permanent spells can never be switched off by any means, either voluntarily by the caster or via dispel-type spells.  Used for Chaos Channels.
(This implies that the spell should have 0 upkeep cost, or the client could get into a deadlock where it won't let you end turn because you don't have enough mana to pay for
spell upkeep, but cannot switch off the spell that's costing the upkeep)</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="buildingID" type="momimecommon:buildingID" nxe:label="Building Created" nxe:showmaincolumn="false">
				<xsd:annotation>
		        	<xsd:documentation>Indicates the building that this spell creates.  Used for: Wall of Stone, Summoning Circle and Move Fortress.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>buildingName</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="resurrectedHealthPercentage" type="momimecommon:percentage" nxe:label="Resurrected health %">
				<xsd:annotation>
		        	<xsd:documentation>Indicates that this is a raise dead-type spell, and the unit comes back with this much health.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="resurrectEnemyUnits" type="xsd:boolean" nxe:label="Resurrect enemy units?">
				<xsd:annotation>
		        	<xsd:documentation>Animate dead can be used to resurrect (and hence steal) enemy units; Raise dead cannot.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="resurrectingAddsSkillID" type="momimecommon:unitSkillID" nxe:label="Resurrecting adds skill" nxe:showmaincolumn="false">
				<xsd:annotation>
		        	<xsd:documentation>Skill added to resurrected units (Animate Dead adds the Undead "skill").</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="attackSpellCombatTarget" type="momimecommon:attackSpellCombatTargetID" nxe:label="Atk Spell Combat Target" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="0" maxOccurs="1" name="attackSpellDamageTypeID" type="momimecommon:damageTypeID" nxe:label="Damage Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>damageTypeName</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="attackSpellDamageResolutionTypeID" type="momimecommon:damageResolutionTypeID" nxe:label="Damage Res. Type" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="0" maxOccurs="1" name="combatBaseDamage" type="momimecommon:unitSkillValue" nxe:label="Combat Base Dmg" nxe:gridwidth="100">
		        <xsd:annotation>
		        	<xsd:documentation>If spell causes direct damage, this is the amount of damage is causes.
If spell causes resistance rolls (e.g. petrify or confusion) then this is the saving throw modifier; 0 means base resistance roll with no modifier.
If spell is curse and there is no base damage defined then no resist roll is possible, the target is automatically cursed.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="combatMaxDamage" type="momimecommon:unitSkillValue" nxe:label="Combat Max Dmg" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="combatManaPerAdditionalDamagePoint" type="momimecommon:spellCastingCost" nxe:label="Combat MP per +1 dmg" nxe:gridwidth="100">
		        <xsd:annotation>
		        	<xsd:documentation>The usual case is that it costs several mana to raise the damage by 1 point, in which case a value is set here.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="combatAdditionalDamagePointsPerMana" type="momimecommon:unitSkillValue" nxe:label="Combat Dmg per +1 MP" nxe:gridwidth="100">
		        <xsd:annotation>
		        	<xsd:documentation>The rare case where a single 1 mana is enough to boost damage by more than 1 point.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="overlandBaseDamage" type="momimecommon:unitSkillValue" nxe:label="Overland Base Dmg" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="overlandMaxDamage" type="momimecommon:unitSkillValue" nxe:label="Overland Max Dmg" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="overlandManaPerAdditionalDamagePoint" type="momimecommon:spellCastingCost" nxe:label="Overland MP per +1 dmg" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="overlandAdditionalDamagePointsPerMana" type="momimecommon:unitSkillValue" nxe:label="Overland Dmg per +1 MP" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="heroItemBonusMaximumCraftingCost" type="momimecommon:spellCastingCost" nxe:label="Item Bonus Max Cost" nxe:gridwidth="150">
		        <xsd:annotation>
		        	<xsd:documentation>For summoning spells, identifies that the spell summons hero items (i.e. Enchant Item or Create Artifact).  The value indicates the most
expensive bonus we are allowed to put onto the item.  A value of 0 allows all bonuses.  Spell Charges are only allowed if the value is 0.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="spellRadius" type="momimecommon:scoutingRange" nxe:label="Scouting Range" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="tileTypeID" type="momimecommon:tileTypeID" nxe:label="Tile Type" nxe:showmaincolumn="false">
				<xsd:annotation>
	        		<xsd:documentation>For spells that affect a certain tile type.  Currently only set to TT99 for Enchant Road spell, to distinguish it from Earth Lore.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>tileTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>			
			<xsd:element minOccurs="0" maxOccurs="1" name="combatCastAnimationFly" type="momimecommon:animationID" nxe:label="Combat cast fly anim" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="combatCastAnimation" type="momimecommon:animationID" nxe:label="Combat cast animation" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="combatCastAnimationFlyXMultiplier" type="momimecommon:pixelCoordinate" nxe:label="X multiplier of fly anim?" nxe:gridWidth="150">
		        <xsd:annotation>
        			<xsd:documentation>X coordinate multiplier of spell's approach to target, so 0 (default) for spells that come
straight down like Doom Bolt, or 1 for spells that come from up-right like Fire Bolt.</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="combatCastAnimationInFront" type="xsd:boolean" nxe:label="Combat cast anim in front?" nxe:gridWidth="150">
		        <xsd:annotation>
        			<xsd:documentation>Defaults to true (spell in front of units); but some ground-level spells need to appear behind the units to look correct, notably Cracks Call.</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="overlandEnchantmentImageFile" type="momimecommon:imageFilename" nxe:label="Overland enchantment image file" nxe:gridwidth="400" />
			<xsd:element minOccurs="0" maxOccurs="1" name="unitCanCastImageFile" type="momimecommon:imageFilename" nxe:label="Unit can cast image file" nxe:gridwidth="400" />
			<xsd:element minOccurs="0" maxOccurs="1" name="spellMusicFile" type="momimecommon:imageFilename" nxe:label="Spell music file" nxe:gridwidth="400" />
			<xsd:element minOccurs="0" maxOccurs="1" name="soundAndImageDelay" type="momimecommon:seconds" nxe:label="Sound &amp; image delay" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="spellSoundFile" type="momimecommon:imageFilename" nxe:label="Spell sound file" nxe:gridwidth="400" />
			<xsd:element minOccurs="0" maxOccurs="1" name="aiResearchOrder" type="momimecommon:aiResearchOrder" nxe:label="AI Research Order" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="summonAnywhere" type="xsd:boolean" nxe:label="Can summon anywhere?" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="summonedUnit" type="momimecommon:unitID" nxe:label="Summoned unit">
		        <xsd:annotation>
		        	<xsd:documentation>For summoning spells, defines all possible units that can be summoned by the spell.
When a player casts the spell, one of the listed units will be chosen at random and summoned.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitName</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellHasCityEffect" type="momimecommon:citySpellEffectID" nxe:label="City effect">
		        <xsd:annotation>
		        	<xsd:documentation>For city enchantments and curses, defines all possible city spell effects the spell can grant.
Unlike unit spell effects, which city spell effect can be chosen by the player when they cast the spell, rather than randomly.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>citySpellEffectName</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellHasCombatEffect" type="momimecommon:combatAreaEffectID" nxe:label="Combat effect">
		        <xsd:annotation>
		        	<xsd:documentation>For combat enchantments, defines all possible combat area effects the spell can grant.
Technically one is chosen at random when the spell is cast, however there's no spells in the original MoM with multiple possible combat area effects.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>combatAreaEffectDescription</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellValidBorderTarget" type="momimecommon:combatTileBorderID" nxe:label="Valid border target">
		        <xsd:annotation>
		        	<xsd:documentation>Some spells (Disrupt) can be aimed at certain kinds of Combat Tile Borders (Stone walls).</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitSpellEffect" type="momimecommon:unitSpellEffect" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellValidUnitTarget" type="momimecommon:spellValidUnitTarget" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellUpkeep" type="momimecommon:productionTypeAndUndoubledValue" nxe:label="Upkeep" nxe:plural="Upkeep">
		        <xsd:annotation>
		        	<xsd:documentation>Defines the upkeep a particular spells costs each turn, typically an amount of mana.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="spellID" type="momimecommon:spellID" use="required" nxe:label="Spell ID" nxe:gridwidth="60" />
	</xsd:complexType>

	<xsd:complexType name="unitSpellEffect" nxe:singular="Unit Effect" nxe:plural="Unit Effects">
        <xsd:annotation>
        	<xsd:documentation>Lists the possible unit skill(s) granted from casting a unit enchantment/curse on a unit.
Normally there's only 1; 3 in the case of Chaos Channels or Warp Creature.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
			<xsd:extension base="momimecommon:unitSkillAndValue">
				<xsd:sequence>
					<xsd:element minOccurs="0" maxOccurs="1" name="permanent" type="xsd:boolean" nxe:label="Permanent?">
				        <xsd:annotation>
				        	<xsd:documentation>If true, this spell effect is added disconnected from the spell that it came from.  Thus can never be removed.
This is used for the fact that Black Channels turns units Undead, and while the Black Channels effect can be switched off, the Undead effect cannot.</xsd:documentation>
				        </xsd:annotation>
					</xsd:element>
					<xsd:element minOccurs="0" maxOccurs="1" name="storeSkillValueAsVariableDamage" type="xsd:boolean" nxe:label="Permanent?">
				        <xsd:annotation>
				        	<xsd:documentation>Usually we don't need to store values of skills granted from spells, because they don't change so we can always
just go back to the spell def and look it up.  But in cases where the value of the granted skill may change, this causes it to be put into the
variableDamage slot instead.  Used to store HP of webs.</xsd:documentation>
				        </xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="spellValidUnitTarget" nxe:singular="Valid Unit Target" nxe:plural="Valid Unit Targets">
        <xsd:annotation>
        	<xsd:documentation>Some spells can only be cast on certain types of unit, e.g. Dispel Evil can only be cast on Chaos &amp; Death creatures, in which case they are listed here.  Also defines saving throw penalties for spells which can be resisted.  
Can have different saving throw depending on the type of unit.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1" name="magicRealmAdditionalSavingThrowModifier" type="momimecommon:savingThrowModifier" nxe:label="Saving Throw Modifier" nxe:gridwidth="150">
			<xsd:annotation>
				<xsd:documentation>Additional saving throw penalty that applies to targets of the specified magic realm, on top of the basic saving throw modifier in the combatBaseDamage field.
So this is only used in unusual situations where different targets have different saving throws, e.g. Dispel Evil or Holy Word..</xsd:documentation>
			</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="targetMagicRealmID" type="momimecommon:pickID" use="required" nxe:label="Magic Realm/Lifeform Type" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:documentation>If any spellValidUnitTarget records exist under a spell, then the spell can only be cast on units of the specified unit type(s).
If there are no spellValidUnitTarget records, the spell can be cast on all types of unit and has the same saving throw (specified in combatBaseDamage) against all types of unit.</xsd:documentation>
				<xsd:appinfo>
					<nxe:showreferencedfield>pickDescriptionSingular</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="combatTileType" nxe:singular="Combat Tile Type" nxe:plural="Combat Tile Types" nxe:submenu="Combat Map">
        <xsd:annotation>
        	<xsd:documentation>Defines logical combat tiles, e.g. "a dark area", "a ridge", "a house".  The actual image used to display the combat tile then depends on the overland terrain type (e.g. grass or mountains)
and the smoothing rules defined in the graphics XML file, especially with regard to ridges and the borders of dark areas which are smoothed in the same way as the overland map.
If there are multiple possible images (e.g. houses) they all have the same logical tile type - the actual image is then chosen at random from the graphics XML file.
Note even combats on mountain terrain, the regular terrain still only costs 1 movement (so movement rates implied by the overland movement rate rules aren't applicable).

Zero value indicates the terrain in this layer has no effect on movement (e.g. houses).  Negative movement value indicates impassable.  Movement rates ignored for flying or non-corporeal units.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="combatTileTypeDescription" type="momimecommon:description" nxe:label="Combat Tile Type Description" nxe:gridwidth="200" />
			<xsd:element minOccurs="1" maxOccurs="1" name="combatMapLayer" type="momimecommon:combatMapLayerID" nxe:label="Layer" nxe:gridwidth="60" />
			<xsd:element minOccurs="0" maxOccurs="1" name="doubleMovement" type="momimecommon:combatTileTypeDoubleMovement" nxe:label="2x Movement to enter this tile" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="1" name="insideCity" type="xsd:boolean" nxe:label="Inside city?" nxe:gridWidth="80">
			<xsd:annotation>
				<xsd:documentation>Presence of this tile on any layer indicates this tile is part of the 4x4 area inside the city.</xsd:documentation>
			</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="combatTileTypeID" type="momimecommon:combatTileTypeID" use="required" nxe:label="Combat Tile Type ID" nxe:gridwidth="130" />
	</xsd:complexType>
	
	<xsd:complexType name="combatTileBorder" nxe:singular="Combat Tile Border" nxe:plural="Combat Tile Borders" nxe:submenu="Combat Map">
        <xsd:annotation>
        	<xsd:documentation>Defines possible borders to combat tiles, i.e. wall of stone/fire/darkness.  These are places on the border between two combat tiles rather than being a tile themselves.
To keep things simple, the graphics XML file has a quite simple mapping which combines the border type with the directions the border runs in to produce a list of possible images - there is no smoothing.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="combatTileBorderDescription" type="momimecommon:description" nxe:label="Combat Tile Border Description" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="1" name="blocksMovement" type="momimecommon:combatTileBorderBlocksMovementID" nxe:label="Blocks movement?" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="0" maxOccurs="1" name="defenceBonus" type="momimecommon:unitSkillValue" nxe:label="Defence Bonus" nxe:gridwidth="100" />
		</xsd:sequence>
		<xsd:attribute name="combatTileBorderID" type="momimecommon:combatTileBorderID" use="required" nxe:label="Combat Tile Border ID" nxe:gridwidth="150" />
	</xsd:complexType>

	<xsd:complexType name="movementRateRule" nxe:singular="Movement Rate Rule" nxe:plural="Movement Rate Rules" nxe:submenu="Units">
        <xsd:annotation>
        	<xsd:documentation>Defines a list of rules for deciding the movement rate of units over different types of terrain.  Rules are evaluated in order, and the first one found that applies will dictate the units' movement over this type of terrain.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="doubleMovement" type="momimecommon:doubleMovement" nxe:label="2x Movement to enter this terrain" nxe:gridwidth="200" />
			<xsd:element minOccurs="0" maxOccurs="1" name="tileTypeID" type="momimecommon:tileTypeID" nxe:label="Tile Type" nxe:gridwidth="80">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>tileTypeDescription</nxe:showreferencedfield>
						<nxe:showreferencedfield>land</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="unitSkillID" type="momimecommon:unitSkillID" nxe:label="Our skill" nxe:gridwidth="100">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="unitStackSkillID" type="momimecommon:unitSkillID" nxe:label="Stacked skill" nxe:gridwidth="100">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="description" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="500" />
		</xsd:sequence>
	</xsd:complexType>

<!-- Hero items, new for 0.9.7 -->
	
	<xsd:complexType name="heroItemType" nxe:singular="Hero Item Type" nxe:plural="Hero Item Types" nxe:submenu="Hero items">
        <xsd:annotation>
        	<xsd:documentation>Types of hero items - sword, axe, ring, shield, plate mail, and so on.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemTypeDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="1" maxOccurs="1" name="baseCraftingCost" type="momimecommon:spellCastingCost" nxe:label="Base Crafting Cost" nxe:gridwidth="150" />
			<xsd:element minOccurs="1" maxOccurs="1" name="itemBonusCraftingCostMultiplier" type="momimecommon:spellCastingCost" nxe:label="Cost Multiplier" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemTypeAttackType" type="momimecommon:unitSkillID" nxe:label="Attack Type" nxe:gridwidth="100">
		        <xsd:annotation>
		        	<xsd:documentation>Specifies the kind of attacks appropriate for the type of item, e.g. swords only affect melee attacks, but axes also affect thrown attacks.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemTypeAllowedBonus" type="momimecommon:heroItemBonusID" nxe:label="Allowed Bonus" nxe:gridwidth="100">
		        <xsd:annotation>
		        	<xsd:documentation>Specifies the list of bonuses which are allowed for each item type, e.g. you can't add +attack onto a shield.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>heroItemBonusDescription</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemTypeImageFile" type="momimecommon:imageFilename" nxe:label="Hero Item Image" nxe:gridwidth="350" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemTypeBasicStat" type="momimecommon:unitSkillAndValue" nxe:label="Basic Stat" nxe:gridwidth="100" />
		</xsd:sequence>
		<xsd:attribute name="heroItemTypeID" type="momimecommon:heroItemTypeID" use="required" nxe:label="Item Type ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="heroItemSlotType" nxe:singular="Hero Item Slot Type" nxe:plural="Hero Item Slot Types" nxe:submenu="Hero items">
        <xsd:annotation>
        	<xsd:documentation>Defines the different "item slots" heroes can have for, e.g. some heroes can only use a sword, some can only use a wand, but some have a slot that can take either.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="slotTypeDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="1" maxOccurs="1" name="basicHeroItemForAiRatingItemTypeID" type="momimecommon:heroItemTypeID" nxe:label="AI basic rating Item Type ID" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>heroItemTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="heroItemSlotTypeImageFile" type="momimecommon:imageFilename" nxe:label="Hero Item Slot Image" nxe:gridwidth="380" />
			<xsd:element minOccurs="1" maxOccurs="1" name="heroItemSlotTypeImageFileWithBackground" type="momimecommon:imageFilename" nxe:label="Slot Image with Background" nxe:gridwidth="380" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroSlotAllowedItemType" type="momimecommon:heroItemTypeID" nxe:label="Allowed item type" nxe:gridwidth="100">
		        <xsd:annotation>
		        	<xsd:documentation>Defines the different kinds of hero items that can be equipped in the different kinds of slots.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>heroItemTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="basicHeroItemForAiRatingChosenBonus" type="momimecommon:heroItemBonusID" nxe:label="AI basic rating Bonuses" nxe:gridwidth="100">
		        <xsd:annotation>
		        	<xsd:documentation>The AI needs to be able to estimate how good a unit may potentially get.  That includes heroes potentially getting amazing items that
they don't currently own.  This lists, for a particular item type, the mods on a theoretically awesome hero item for that purpose.</xsd:documentation>
					<xsd:appinfo>
						<nxe:showreferencedfield>heroItemBonusDescription</nxe:showreferencedfield>
					</xsd:appinfo>
		        </xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="heroItemSlotTypeID" type="momimecommon:heroItemSlotTypeID" use="required" nxe:label="Slot Type ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="heroItemBonus" nxe:singular="Hero Item Bonus" nxe:plural="Hero Item Bonuses" nxe:submenu="Hero items">
        <xsd:annotation>
        	<xsd:documentation>Lists all possible stats and bonuses that can be added to hero items.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemBonusDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="1" maxOccurs="1" name="craftingCostMultiplierApplies" type="xsd:boolean" nxe:label="Cost multiplier applies?" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="bonusCraftingCost" type="momimecommon:spellCastingCost" nxe:label="Bonus Crafting Cost" nxe:gridwidth="150">
		        <xsd:annotation>
		        	<xsd:documentation>Mandatory for every bonus except "Spell Charges", where the cost is calculated depending on which spell is added.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="allowCombiningWithBonusesToSameStat" type="xsd:boolean" nxe:label="Allow combining with bonuses to same stat?" nxe:gridwidth="250">
		        <xsd:annotation>
		        	<xsd:documentation>This is for the "Flaming" hero item bonus.  Normally two bonuses cannot be chosen if they provide a bonus to the same stat, so you cannot
pick both e.g. +1 and +2 attack on the same item.  However "Flaming" looks identical to +3 attack, so we need some flag that indicates that its OK to have both Flaming and +attack together.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemBonusPrerequisite" type="momimecommon:pickAndQuantity" nxe:label="Prerequisites" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemBonusStat" type="momimecommon:heroItemBonusStat" nxe:label="Bonus Stat" nxe:gridwidth="100" />
		</xsd:sequence>
		<xsd:attribute name="heroItemBonusID" type="momimecommon:heroItemBonusID" use="required" nxe:label="Item Bonus ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="heroItemBonusStat" nxe:singular="Hero Item Bonus Stat" nxe:plural="Hero Item Bonus Stats">
        <xsd:annotation>
        	<xsd:documentation>Lists the skills that a particular hero item bonus grants.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
			<xsd:extension base="momimecommon:unitSkillAndValue">
				<xsd:sequence>
					<xsd:element minOccurs="0" maxOccurs="1" name="appliesOnlyToAttacksAppropriateForTypeOfHeroItem" type="xsd:boolean" nxe:label="Applies only to attacks appropriate for type of hero item?">
				        <xsd:annotation>
				        	<xsd:documentation>Attack bonuses such as "Lightning" only grant their effect when the hero is making an attack that's appropriate for the type of hero item the bonus is imbued in.
e.g. The Elven Archer hero can use both swords and bows, but if she has a Sword of Lightning then it doesn't make her ranged attacks armour piercing.</xsd:documentation>
				        </xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="heroItem" nxe:singular="Hero Item" nxe:plural="Hero Items" nxe:submenu="Hero items">
        <xsd:annotation>
        	<xsd:documentation>Defines one actual hero item, whether one of the standard 250 predefined items, or a custom one created via Create Artifact.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
		<xsd:element minOccurs="1" maxOccurs="1" name="heroItemName" type="momimecommon:description" nxe:label="Name" nxe:gridwidth="200" />
		<xsd:element minOccurs="1" maxOccurs="1" name="heroItemTypeID" type="momimecommon:heroItemTypeID" nxe:label="Item Type ID" nxe:gridwidth="100">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>heroItemTypeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:element>
		<xsd:element minOccurs="1" maxOccurs="1" name="heroItemImageNumber" type="momimecommon:imageNumber" nxe:label="Image Number" nxe:gridwidth="100" />
		<xsd:element minOccurs="0" maxOccurs="1" name="spellID" type="momimecommon:spellID" nxe:label="Spell Charges" nxe:gridwidth="100">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>spellName</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:element>
		<xsd:element minOccurs="0" maxOccurs="1" name="spellChargeCount" type="momimecommon:spellCount" nxe:label="Spell Charge Count" nxe:gridwidth="150" />
		<xsd:element minOccurs="0" maxOccurs="unbounded" name="heroItemChosenBonus" type="momimecommon:heroItemBonusID" nxe:label="Bonus" nxe:plural="Bonuses">
	        <xsd:annotation>
	        	<xsd:documentation>Specifies the list of bonuses which this hero item actually has, e.g. +6 attack and Flaming.</xsd:documentation>
				<xsd:appinfo>
					<nxe:showreferencedfield>heroItemBonusDescription</nxe:showreferencedfield>
				</xsd:appinfo>
	        </xsd:annotation>
		</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

<!-- Damage types and immunities, new for 0.9.7.2 -->

	<xsd:complexType name="damageType" nxe:singular="Damage Type" nxe:plural="Damage Types" nxe:submenu="Units">
        <xsd:annotation>
        	<xsd:documentation>Types of damage, e.g. fire, cold, death, disintegrate - these map closely to the different immunity skills.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="damageTypeName" type="momimecommon:languageText" nxe:label="Name" />
			<xsd:element minOccurs="1" maxOccurs="1" name="damageTypeDescription" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="600" />
			<xsd:element minOccurs="1" maxOccurs="1" name="storedDamageTypeID" type="momimecommon:storedDamageTypeID" nxe:label="Stored as" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="0" maxOccurs="1" name="enhancedVersion" type="momimecommon:damageTypeID" nxe:label="Enhanced Version" nxe:showreferencedcolumns="false" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="damageTypeImmunity" type="momimecommon:damageTypeImmunity" nxe:label="Immunity" nxe:plural="Immunities" nxe:gridwidth="100" />
		</xsd:sequence>
		<xsd:attribute name="damageTypeID" type="momimecommon:damageTypeID" use="required" nxe:label="Damage Type ID" nxe:gridwidth="120" />
	</xsd:complexType>

	<xsd:complexType name="damageTypeImmunity" nxe:singular="Immunity" nxe:plural="Immunities">
        <xsd:annotation>
        	<xsd:documentation>Specifies the immunity skills that provide protection against this type of damage, and what kind of protection they provide.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1" name="boostsDefenceTo" type="momimecommon:unitSkillValue" nxe:label="Defence Boost" nxe:gridwidth="100">
		        <xsd:annotation>
        			<xsd:documentation>Indicates the boost to the target's defence stat that having this kind of immunity will grant.  This is a "minimum of", not an addition.
e.g. Weapon Immunity boosts defence to a minimum of 10, so a unit which had defence of 4 gets a defence score of 10, not 14.
If this value is left null, the unit is completely immune to this type of damage and will not be allowed as a target for spells that deal this type of damage.

Implication is that for spells and attacks whose damage resolution is based on resistance rather than defence, that null is the only value that makes sense here.</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
        </xsd:sequence>
		<xsd:attribute name="unitSkillID" type="momimecommon:unitSkillID" use="required" nxe:label="Skill" nxe:gridwidth="200">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

<!-- Moved from server XSD -->

	<xsd:complexType name="populationTask" nxe:singular="Population Task" nxe:plural="Population Tasks" nxe:submenu="Cities">
        <xsd:annotation>
        	<xsd:documentation>Different tasks each block of 1,000 civilians can be allocated to (Farmer, Worker or Rebel).</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="populationTaskSingular" type="momimecommon:languageText" nxe:label="Singular description" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="populationTaskPlural" type="momimecommon:languageText" nxe:label="Plural description" />
		</xsd:sequence>
		<xsd:attribute name="populationTaskID" type="momimecommon:populationTaskID" use="required" nxe:label="Population Task ID" nxe:gridwidth="120" />
	</xsd:complexType>

	<xsd:complexType name="citySize" nxe:singular="City Size" nxe:plural="City Sizes" nxe:submenu="Cities">
        <xsd:annotation>
        	<xsd:documentation>Lists the city size categories, e.g. that a city changes from a "Village" to a "Town" when it goes from 9,999 to 10,000 population.  Each "city size" also has a different appearance on the overland map.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="citySizeName" type="momimecommon:languageText" nxe:label="Name" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="citySizeNameIncludingOwner" type="momimecommon:languageText" nxe:label="Name, including owner" />
			<xsd:element minOccurs="0" maxOccurs="1" name="fameGainedForCapturing" type="momimecommon:fame" nxe:label="Fame Gained for Capturing" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="fameLostForLosing" type="momimecommon:fame" nxe:label="Fame Lost for Losing" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="1" name="citySizeMinimum" type="momimecommon:cityPopulation" nxe:label="Minimum population" nxe:gridwidth="130" />
			<xsd:element minOccurs="0" maxOccurs="1" name="citySizeMaximum" type="momimecommon:cityPopulation" nxe:label="Maximum population" nxe:gridwidth="130" />
		</xsd:sequence>
		<xsd:attribute name="citySizeID" type="momimecommon:citySizeID" use="required" nxe:label="City Size ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="heroSkillType" nxe:singular="Hero Skill Type" nxe:plural="Hero Skill Types" nxe:submenu="Units">
        <xsd:annotation>
        	<xsd:documentation>Defines categories of "hero skills" - additional skills heroes gain randomly each game, i.e. categorised skills into "Fighter Picks" or "Mage Picks".</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="heroSkillTypeDescription" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="90" />
		</xsd:sequence>
		<xsd:attribute name="heroSkillTypeID" type="momimecommon:heroSkillTypeID" use="required" nxe:label="Hero Skill Type ID" nxe:gridwidth="120" />
	</xsd:complexType>

	<xsd:complexType name="spellRank" nxe:singular="Spell Rank" nxe:plural="Spell Ranks" nxe:submenu="Spells">
        <xsd:annotation>
        	<xsd:documentation>Defines spell ranks, i.e. Common, Uncommon, Rare and Very Rare.  A special entry for the Spell of Mastery ensures it will always be the last spell offered as available to research.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellRankDescription" type="momimecommon:languageText" nxe:label="Description" />
			<xsd:element minOccurs="0" maxOccurs="1" name="treasureRewardCost" type="momimecommon:spellCastingCost" nxe:label="Treasure Cost" nxe:gridwidth="150">
		        <xsd:annotation>
        			<xsd:documentation>Cost to receive a spell of this rank from a node/lair/tower; null = spells of this rank can't be received as
treasure rewards, i.e. Spell of Mastery.</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="spellRankID" type="momimecommon:spellRankID" use="required" nxe:label="Spell Rank ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="citySpellEffect" nxe:singular="City Spell Effect" nxe:plural="City Spell Effects" nxe:submenu="Cities">
        <xsd:annotation>
        	<xsd:documentation>Defines all possible spell effects on cities.  This is separate mainly for Spell Ward, which is a single spell with 5 possible effects, depending on the Magic Realm chosen when the spell is casted.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="citySpellEffectName" type="momimecommon:languageText" nxe:label="Name" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="citySpellEffectHelpText" type="momimecommon:languageText" nxe:label="Help text" />
			<xsd:element minOccurs="0" maxOccurs="1" name="combatAreaEffectID" type="momimecommon:combatAreaEffectID" nxe:label="CAE" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>combatAreaEffectDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element >
		</xsd:sequence>
		<xsd:attribute name="citySpellEffectID" type="momimecommon:citySpellEffectID" use="required" nxe:label="City Spell Effect ID" nxe:gridwidth="110" />
	</xsd:complexType>

	<xsd:complexType name="combatMapElement" nxe:singular="Combat Map Element" nxe:plural="Combat Map Elements" nxe:submenu="Combat Map">
        <xsd:annotation>
        	<xsd:documentation>Defines tiles and borders placed on the combat map according to certain conditions, for example that a bunch of wall borders should be added if the city contains
a city wall, a wizards' fortress tile should be added if the city contains the wizards' fortress, or that a house should be added if the city contains over 5,000 population.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="locationX" type="momimecommon:combatMapCoordinate" nxe:label="Location to place X" nxe:gridwidth="150" />
			<xsd:element minOccurs="1" maxOccurs="1" name="locationY" type="momimecommon:combatMapCoordinate" nxe:label="Location to place Y" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="buildingID" type="momimecommon:buildingID" nxe:label="Condition - Building" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>buildingName</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="spellID" type="momimecommon:spellID" nxe:label="Condition - Spell" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>spellName</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="tileTypeID" type="momimecommon:tileTypeID" nxe:label="Condition - Tile Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>tileTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="mapFeatureID" type="momimecommon:mapFeatureID" nxe:label="Condition - Map Feature" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>mapFeatureDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="minimumPopulation" type="momimecommon:cityPopulation" nxe:label="Condition - Minimum population" nxe:gridwidth="130" />
			<xsd:element minOccurs="0" maxOccurs="1" name="maximumPopulation" type="momimecommon:cityPopulation" nxe:label="Condition - Maximum population" nxe:gridwidth="130" />
			<xsd:element minOccurs="0" maxOccurs="1" name="combatTileTypeID" type="momimecommon:combatTileTypeID" nxe:label="Tile to place" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>combatTileTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="combatTileBorderID" type="momimecommon:combatTileBorderID" nxe:label="Border to place" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>combatTileBorderDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="combatTileBorderDirections" type="momimecommon:directions" nxe:label="Border direction(s)" nxe:gridwidth="100" />
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- Combat attack resolution, for dealing with exactly what happens if e.g. we have first strike and enemy unit has haste, new for 0.9.6.2 -->
	
	<xsd:complexType name="attackResolution" nxe:singular="Attack Resolution" nxe:plural="Attack Resolutions">
        <xsd:annotation>
        	<xsd:documentation>Defines attack/counterattack sequences for resolving attacks from different unit attributes.
e.g. some of these get quite long and complicated when there may be first strike, breath attacks or haste involved.
When e.g. a Melee attack is instigated, each possible attack resolution is checked in order until we find one where we meet all the conditions.
Its an error if we can't find any entry that defines how to resolve a particular attack, or to put another way, the final attack resolution entry should have no conditions.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="attackResolutionDescription" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="1500" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="attackResolutionCondition" type="momimecommon:attackResolutionCondition" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="attackResolutionStep" type="momimecommon:attackResolutionStep" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="attackResolutionCondition" nxe:singular="Conditon" nxe:plural="Conditons">
        <xsd:annotation>
        	<xsd:documentation>Conditions that must be met, ANDed together, to select a particular attack resolution.
e.g. attacking unit must have first strike and defending unit must have haste.</xsd:documentation>
        </xsd:annotation>
		<xsd:attribute name="combatSide" type="momimecommon:unitCombatSideID" use="required" nxe:label="Combat side" nxe:showmaincolumn="false" />
		<xsd:attribute name="unitSkillID" type="momimecommon:unitSkillID" use="required" nxe:label="Skill" nxe:showmaincolumn="false">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="alternativeUnitSkillID" type="momimecommon:unitSkillID" use="optional" nxe:label="Alt Skill" nxe:showmaincolumn="false">
			<xsd:annotation>
       			<xsd:documentation>For OR-like conditions, such as Attacker must have Haste (spell) or Haste (item power).</xsd:documentation>
				<xsd:appinfo>
					<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="attackResolutionStep" nxe:singular="Step" nxe:plural="Steps">
        <xsd:annotation>
        	<xsd:documentation>Steps taken to resolve a particular type of attack.
e.g. attacker uses breath weapon, then defender uses breath weapon, then attacker and defender use melee attacks simultaneously.
If multiple steps have the same step number, they are executed simultaneously, i.e. all steps with the same step number are processed before damage is applied to either unit.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="stepNumber" type="xsd:unsignedShort" nxe:label="Step number" />
			<xsd:element minOccurs="1" maxOccurs="1" name="combatSide" type="momimecommon:unitCombatSideID" nxe:label="Combat side" nxe:showmaincolumn="false">
		        <xsd:annotation>
        			<xsd:documentation>This is the unit *making* the attack, not the unit *being* attacked.  So the records read like e.g. "Attacker uses their breath attack".</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="unitSkillID" type="momimecommon:unitSkillID" nxe:label="Skill">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
						<nxe:showreferencedfield>damageTypeID</nxe:showreferencedfield>
						<nxe:showreferencedfield>damageResolutionTypeID</nxe:showreferencedfield>
						<nxe:showreferencedfield>damagePerFigure</nxe:showreferencedfield>
						<nxe:showreferencedfield>magicRealmID</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="repetitions" type="xsd:unsignedShort" nxe:label="Repetitions">
		        <xsd:annotation>
        			<xsd:documentation>Allows step to be executed multiple times - this is used to implement the Haste skill, so we don't have to needlessly duplicate lots of attack steps.
Defaults to 1 if omitted.</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

<!-- Overland AI, new for 0.9.8.0 -->

	<xsd:complexType name="aiUnitCategory" nxe:singular="AI unit category" nxe:plural="AI unit categories" nxe:submenu="AI">
        <xsd:annotation>
        	<xsd:documentation>Different categories that the AI classifies its units under.  Each category then has its own set of movement codes so the
AI can decide how units in that category should move on the overland map.

Ordering of this list is very significant.
- Testing which category a unit falls under works from the bottom-up, and stops when the first match is found.
- Actually processing each category to decide their movement works from the top-down.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="aiUnitCategoryDescription" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="300" />
			<xsd:element minOccurs="0" maxOccurs="1" name="unitSkillID" type="momimecommon:unitSkillID" nxe:label="Must have skill?" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>unitSkillDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="transport" type="xsd:boolean" nxe:label="Must be a transport?" nxe:gridwidth="140" />
			<xsd:element minOccurs="0" maxOccurs="1" name="inTransport" type="xsd:boolean" nxe:label="Must be in a transport?" nxe:gridwidth="140" />
			<xsd:element minOccurs="0" maxOccurs="1" name="allTerrainPassable" type="xsd:boolean" nxe:label="Must be able to pass all terrain types?" nxe:gridwidth="220" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="movementCode" type="momimecommon:aiMovementCode" nxe:label="Movement code" nxe:gridwidth="150">
		        <xsd:annotation>
		        	<xsd:documentation>Ordered list of movement codes that the AI will try in order to decide where to move units overland.</xsd:documentation>
		        </xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="aiUnitCategoryID" type="momimecommon:aiUnitCategoryID" use="required" nxe:label="AI unit category ID" nxe:gridwidth="120" />
	</xsd:complexType>
	
<!-- Merged language XML, new for 0.9.9.0 -->

	<xsd:complexType name="languageText">
        <xsd:annotation>
        	<xsd:documentation>A piece of text in any language.  Used in many places.  Must allow carriage returns in the data for help text.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="text" type="momimecommon:multiLineDescription" nxe:label="Text" nxe:gridwidth="300" />
		</xsd:sequence>
		<xsd:attribute name="language" type="momimecommon:language" use="required" nxe:label="Code" nxe:gridwidth="150" />
	</xsd:complexType>	

<!-- Merged graphics XML, new for 0.9.9.0 -->

	<xsd:complexType name="cityImage" nxe:singular="City Image" nxe:plural="City Images" nxe:submenu="Overland Map">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="citySizeID" type="momimecommon:citySizeID" nxe:label="City Size ID" nxe:gridwidth="100">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>citySizeMinimum</nxe:showreferencedfield>
						<nxe:showreferencedfield>citySizeMaximum</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="1" maxOccurs="1" name="cityImageFile" type="momimecommon:imageFilename" nxe:label="City image file" nxe:gridwidth="350" />
			<xsd:element minOccurs="1" maxOccurs="1" name="flagOffsetX" type="momimecommon:pixelCoordinate" nxe:label="Flag offset X" nxe:gridwidth="150" />
			<xsd:element minOccurs="1" maxOccurs="1" name="flagOffsetY" type="momimecommon:pixelCoordinate" nxe:label="Flag offset Y" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="cityImagePrerequisite" type="momimecommon:buildingID" nxe:label="Building pre-requisite">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>buildingName</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="cityViewElementSet" nxe:singular="City View Element Set" nxe:plural="City View Element Sets" nxe:submenu="City View">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="cityViewElementSetName" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="100" />
		</xsd:sequence>
		<xsd:attribute name="cityViewElementSetID" type="momimecommon:cityViewElementSetID" use="required" nxe:label="City View Element Set ID" nxe:gridwidth="150" />
	</xsd:complexType>
	
	<xsd:complexType name="cityViewElement" nxe:singular="City View Element" nxe:plural="City View Elements" nxe:submenu="City View">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="sizeMultiplier" type="momimecommon:sizeMultiplier" nxe:label="Size Multiplier" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="cityViewAnimation" type="momimecommon:animationID" nxe:label="Image animation" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="cityViewImageFile" type="momimecommon:imageFilename" nxe:label="Image file" nxe:gridwidth="380" />
			<xsd:element minOccurs="0" maxOccurs="1" name="cityViewElementSetID" type="momimecommon:cityViewElementSetID" nxe:label="Element Set" nxe:showmaincolumn="false" />
			<xsd:element minOccurs="0" maxOccurs="1" name="locationX" type="momimecommon:pixelCoordinate" nxe:label="Location X" nxe:gridwidth="100">
		        <xsd:annotation>
        			<xsd:documentation>Location is optional; this is for Trade Goods + Housing special settings that have an image defined but don't appear on the actual city scape image.</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="locationY" type="momimecommon:pixelCoordinate" nxe:label="Location Y" nxe:gridwidth="100">
		        <xsd:annotation>
        			<xsd:documentation>Location is optional; this is for Trade Goods + Housing special settings that have an image defined but don't appear on the actual city scape image.</xsd:documentation>
        		</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="planeNumber" type="momimecommon:planeNumber" nxe:label="Plane Number" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>planeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="citySpellEffectID" type="momimecommon:citySpellEffectID" nxe:label="City Spell Effect" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>citySpellEffectName</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="tileTypeID" type="momimecommon:tileTypeID" nxe:label="Tile Type" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>tileTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="buildingID" type="momimecommon:buildingID" nxe:label="Building" nxe:showmaincolumn="false">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>buildingName</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="cityViewAlternativeImageFile" type="momimecommon:imageFilename" nxe:label="Alternative image file" nxe:gridwidth="420" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="combatTileBorderImage" nxe:singular="Combat Tile Border Image" nxe:plural="Combat Tile Border Images" nxe:submenu="Combat Map">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="combatTileBorderID" type="momimecommon:combatTileBorderID" nxe:label="Combat Tile Border ID" />
			<xsd:element minOccurs="1" maxOccurs="1" name="directions" type="momimecommon:directions" nxe:label="Direction(s)" nxe:gridwidth="100" />
			<xsd:element minOccurs="1" maxOccurs="1" name="frontOrBack" type="momimecommon:frontOrBack" nxe:label="Front/Back" nxe:gridwidth="100" />
			<xsd:element minOccurs="1" maxOccurs="1" name="sortPosition" type="momimecommon:sortPosition" nxe:label="Sort position" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="standardAnimation" type="momimecommon:animationID" nxe:label="Standard animation" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="standardFile" type="momimecommon:imageFilename" nxe:label="Standard image file" nxe:gridwidth="350" />
			<xsd:element minOccurs="0" maxOccurs="1" name="wreckedFile" type="momimecommon:imageFilename" nxe:label="Wrecked image file" nxe:gridwidth="350" />
			<xsd:element minOccurs="0" maxOccurs="1" name="raisingAnimation" type="momimecommon:animationID" nxe:label="Raising animation" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="tileSet" nxe:singular="Tile Set" nxe:plural="Tile Sets" nxe:submenu="Overland Map">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="tileSetName" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="100" />
			<xsd:element minOccurs="1" maxOccurs="1" name="directions" type="map:mapDirection" nxe:label="No. of Directions" nxe:gridwidth="120" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="smoothingSystem" type="momimecommon:smoothingSystem" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="smoothedTileType" type="momimecommon:smoothedTileType" />
		</xsd:sequence>
		<xsd:attribute name="tileSetID" type="momimecommon:tileSetID" use="required" nxe:label="Tile Set ID" nxe:gridwidth="100" />
	</xsd:complexType>

	<xsd:complexType name="smoothingSystem" nxe:singular="Smoothing System" nxe:plural="Smoothing Systems">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="smoothingSystemDescription" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="500" />
			<xsd:element minOccurs="1" maxOccurs="1" name="maxValueEachDirection" type="momimecommon:bit" nxe:label="Max. possible value of each bit in bitmasks" nxe:gridwidth="250" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="smoothingReduction" type="momimecommon:smoothingReduction" />
		</xsd:sequence>
		<xsd:attribute name="smoothingSystemID" type="momimecommon:smoothingSystemID" use="required" nxe:label="Smoothing System ID" nxe:gridwidth="150" />
	</xsd:complexType>

	<xsd:complexType name="smoothingReduction" nxe:singular="Smoothing Reduction Rule" nxe:plural="Smoothing Reduction Rules">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="direction1" type="momimecommon:directions" nxe:label="If (1) out of direction(s)" nxe:gridwidth="100" />
			<xsd:element minOccurs="1" maxOccurs="1" name="repetitions1" type="momimecommon:directionCount" nxe:label="(1) this number of them" nxe:gridwidth="100" />
			<xsd:element minOccurs="1" maxOccurs="1" name="value1" type="momimecommon:possibleBitValues" nxe:label="(1) equal any of these values" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="direction2" type="momimecommon:directions" nxe:label="and (2) out of direction(s)" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="repetitions2" type="momimecommon:directionCount" nxe:label="(2) this number of them" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="value2" type="momimecommon:possibleBitValues" nxe:label="(2) equal any of these values" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="direction3" type="momimecommon:directions" nxe:label="and (3) out of direction(s)" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="repetitions3" type="momimecommon:directionCount" nxe:label="(3) this number of them" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="value3" type="momimecommon:possibleBitValues" nxe:label="(3) equal any of these values" nxe:gridwidth="100" />
			<xsd:element minOccurs="1" maxOccurs="1" name="setDirection1" type="map:mapDirection" nxe:label="then (a) set direction" nxe:gridwidth="100" />
			<xsd:element minOccurs="1" maxOccurs="1" name="setValue1" type="momimecommon:bit" nxe:label="(a) to this value" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="setDirection2" type="map:mapDirection" nxe:label="and (b) set direction" nxe:gridwidth="100" />
			<xsd:element minOccurs="0" maxOccurs="1" name="setValue2" type="momimecommon:bit" nxe:label="(b) to this value" nxe:gridwidth="100" />
			<xsd:element minOccurs="1" maxOccurs="1" name="description" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="500" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="smoothedTileType" nxe:singular="Smoothed Tile Type" nxe:plural="Smoothed Tile Types">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="smoothingSystemID" type="momimecommon:smoothingSystemID" nxe:label="Smoothing System ID" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>smoothingSystemDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="secondaryTileTypeID" type="momimecommon:tileTypeID" nxe:label="Secondary Tile Type ID" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>tileTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="tertiaryTileTypeID" type="momimecommon:tileTypeID" nxe:label="Tertiary Tile Type ID" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>tileTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="combatTileTypeID" type="momimecommon:combatTileTypeID" nxe:label="Combat Tile Type ID" nxe:gridwidth="150">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>combatTileTypeDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="tileOffsetX" type="momimecommon:pixelCoordinate" nxe:label="Tile offset X" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="tileOffsetY" type="momimecommon:pixelCoordinate" nxe:label="Tile offset Y" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="smoothedTile" type="momimecommon:smoothedTile" />
		</xsd:sequence>
		<xsd:attribute name="tileTypeID" type="momimecommon:tileTypeID" use="optional" nxe:label="Tile Type ID" nxe:gridwidth="80">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>tileTypeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="planeNumber" type="momimecommon:planeNumber" use="optional" nxe:label="Plane Number" nxe:gridwidth="80">
			<xsd:annotation>
				<xsd:appinfo>
					<nxe:showreferencedfield>planeDescription</nxe:showreferencedfield>
				</xsd:appinfo>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>

	<xsd:complexType name="smoothedTile" nxe:singular="Smoothed Tile" nxe:plural="Smoothed Tiles">
        <xsd:annotation>
        	<xsd:documentation>Note its valid for the same bitmask to be repeated multiple times; in this case an image will be chosen at random.</xsd:documentation>
        </xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="0" maxOccurs="1" name="tileAnimation" type="momimecommon:animationID" nxe:label="Tile animation" nxe:gridwidth="300">
				<xsd:annotation>
					<xsd:appinfo>
						<nxe:showreferencedfield>animationDescription</nxe:showreferencedfield>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="tileFile" type="momimecommon:imageFilename" nxe:label="Tile image file" nxe:gridwidth="430" />
		</xsd:sequence>
		<xsd:attribute name="bitmask" type="momimecommon:bitmask" use="required" nxe:label="Bitmask" nxe:gridwidth="80" />
	</xsd:complexType>
	
	<xsd:complexType name="animation" nxe:singular="Animation" nxe:plural="Animations">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="animationDescription" type="momimecommon:description" nxe:label="Description" nxe:gridwidth="500" />
			<xsd:element minOccurs="1" maxOccurs="1" name="animationSpeed" type="momimecommon:frameRate" nxe:label="Speed / Frame Rate" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="overlandCastOffsetX" type="momimecommon:pixelCoordinate" nxe:label="Overland cast offset X" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="overlandCastOffsetY" type="momimecommon:pixelCoordinate" nxe:label="Overland cast offset Y" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="combatCastOffsetX" type="momimecommon:pixelCoordinate" nxe:label="Combat cast offset X" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="combatCastOffsetY" type="momimecommon:pixelCoordinate" nxe:label="Combat cast offset Y" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="unbounded" name="frame" type="momimecommon:animationFrame" />
		</xsd:sequence>
		<xsd:attribute name="animationID" type="momimecommon:animationID" use="required" nxe:label="Animation ID" nxe:gridwidth="300" />
	</xsd:complexType>	

	<xsd:complexType name="animationFrame" nxe:singular="Animation frame" nxe:plural="Animation frames">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="imageFile" type="momimecommon:imageFilename" nxe:label="Frame image file" nxe:gridwidth="500" />
			<xsd:element minOccurs="0" maxOccurs="1" name="imageFlag" type="momimecommon:imageFilename" nxe:label="Image flag" nxe:gridwidth="320" />
			<xsd:element minOccurs="0" maxOccurs="1" name="flagOffsetX" type="momimecommon:pixelCoordinate" nxe:label="Flag offset X" nxe:gridwidth="150" />
			<xsd:element minOccurs="0" maxOccurs="1" name="flagOffsetY" type="momimecommon:pixelCoordinate" nxe:label="Flag offset Y" nxe:gridwidth="150" />
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="playList" nxe:singular="Play list" nxe:plural="Play lists">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded" name="audioFile" type="momimecommon:imageFilename" nxe:label="Music file" nxe:gridwidth="500" />
		</xsd:sequence>
		<xsd:attribute name="playListID" type="momimecommon:playListID" use="required" nxe:label="Play list ID" nxe:gridwidth="200" />
	</xsd:complexType>
	
<!-- Generic simple data types that are not really MoM specific -->

	<xsd:simpleType name="description">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="multiLineDescription">
		<xsd:restriction base="xsd:string" />
	</xsd:simpleType>
	
<!-- PK identifiers for the new game database entities defined in this XSD -->

	<xsd:simpleType name="overlandMapSizeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="landProportionID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="nodeStrengthID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="difficultyLevelID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="fogOfWarSettingID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="unitSettingID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="spellSettingID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

<!-- PK identifiers for the client database entities defined in this XSD -->

	<xsd:simpleType name="planeNumber">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="tileTypeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="productionTypeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="mapFeatureID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="pickTypeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="pickID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="wizardID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="raceID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="taxRateID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="buildingID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="rangedAttackTypeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="weaponGradeNumber">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="unitSkillID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="unitTypeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="unitID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="combatAreaEffectID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="spellID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="combatTileTypeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="combatTileBorderID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="heroItemTypeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="heroItemSlotTypeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="heroItemBonusID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="damageTypeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

<!-- PK identifiers for entities defined in the server XSD -->

	<xsd:simpleType name="populationTaskID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="spellRankID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="citySpellEffectID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="citySizeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="heroNameID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
<!-- Moved from new game database XSD -->
	
	<xsd:simpleType name="percentage">
        <xsd:annotation>
        	<xsd:documentation>Percentage values that are limited from 0..100.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:unsignedShort">
			<xsd:maxInclusive value="100"></xsd:maxInclusive>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="uncappedPercentage">
        <xsd:annotation>
        	<xsd:documentation>Percentage values that can take any value.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="doubledProductionValue">
        <xsd:annotation>
        	<xsd:documentation>Stores an amount of production something generates, or upkeep that something consumes.  Most production values in the game are stored as doubled values.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:int" />
	</xsd:simpleType>
	
	<xsd:simpleType name="undoubledProductionValue">
        <xsd:annotation>
        	<xsd:documentation>Stores an amount of production something generates, or upkeep that something consumes.  Most upkeep values in the game are stored directly, not doubled.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:int" />
	</xsd:simpleType>

	<xsd:simpleType name="mapTileCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="featureChance">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="cityPopulation">
        <xsd:annotation>
        	<xsd:documentation>Represents how many people are in a city.</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="cityPopulationDiv1000">
        <xsd:annotation>
        	<xsd:documentation>Represents how many population figures are in a city, i.e. population divided by 1000 rounded down.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="unitCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="monsterStrength">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="treasureValue">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="spellBookCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="castingReductionCap">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="lairCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="cityCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="numberOfNodesOnPlane">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="nodeAuraSqaures">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="pickCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="integerMapDistance">
        <xsd:annotation>
        	<xsd:documentation>The number of map tiles between two locations on the map, as an integer (rounded) number (often the actual number of map moves it will take to get somewhere).</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
<!-- Client database enums -->
	
	<xsd:simpleType name="roundingDirectionID" nxe:singular="Rounding Direction ID">
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="D"><xsd:annotation>
				<xsd:documentation>Round down</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ROUND_DOWN" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="U"><xsd:annotation>
				<xsd:documentation>Round up</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ROUND_UP" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="M"><xsd:annotation>
				<xsd:documentation>Must be an exact multiple</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="MUST_BE_EXACT_MULTIPLE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="enforceProductionID" nxe:singular="Enforce Production ID">
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="T"><xsd:annotation>
				<xsd:documentation>Per Turn amount cannot go below zero</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PER_TURN_AMOUNT_CANNOT_GO_BELOW_ZERO" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="S"><xsd:annotation>
				<xsd:documentation>Stored amount cannot go below zero</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="STORED_AMOUNT_CANNOT_GO_BELOW_ZERO" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="combatTileBorderBlocksMovementID" nxe:singular="Combat Tile Border Blocks Movement">
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="N"><xsd:annotation>
				<xsd:documentation>No</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="NO" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="B"><xsd:annotation>
				<xsd:documentation>Cannot cross specified borders</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="CANNOT_CROSS_SPECIFIED_BORDERS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="D"><xsd:annotation>
				<xsd:documentation>Movement on adjacent diagonals is blocked, but the actual specified border direction is open (door in city walls)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="CANNOT_CROSS_DIAGONALS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="T"><xsd:annotation>
				<xsd:documentation>Whole tile impassable</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="WHOLE_TILE_IMPASSABLE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="combatAreaAffectsPlayersID" nxe:singular="CAE Affects Players">
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="C"><xsd:annotation>
				<xsd:documentation>Player who cast the spell</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="CASTER_ONLY" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="O"><xsd:annotation>
				<xsd:documentation>Combat opponent of player who cast the spell</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="COMBAT_OPPONENT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="B"><xsd:annotation>
				<xsd:documentation>Both players in combat</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="BOTH_PLAYERS_IN_COMBAT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="A"><xsd:annotation>
				<xsd:documentation>All players (even outside of combat)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ALL_EVEN_NOT_IN_COMBAT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="fogOfWarValue" nxe:singular="Fog of War Value">
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="A"><xsd:annotation>
				<xsd:documentation>Always see once seen</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ALWAYS_SEE_ONCE_SEEN" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="R"><xsd:annotation>
				<xsd:documentation>Remember as last seen</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="REMEMBER_AS_LAST_SEEN" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="F"><xsd:annotation>
				<xsd:documentation>Forget</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="FORGET" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="switchResearch" nxe:singular="Switch Research">
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="D"><xsd:annotation>
				<xsd:documentation>Switch disallowed until finish current research</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="DISALLOWED" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="N"><xsd:annotation>
				<xsd:documentation>Switch allowed only if current research not started</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ONLY_IF_NOT_STARTED" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="L"><xsd:annotation>
				<xsd:documentation>Switch allowed but lose research put into current spell</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="LOSE_CURRENT_RESEARCH" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="F"><xsd:annotation>
				<xsd:documentation>Switch freely</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="FREE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="castingReductionCombination" nxe:singular="Casting Reduction Combination">
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="A"><xsd:annotation>
				<xsd:documentation>Additive</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ADDITIVE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="M"><xsd:annotation>
				<xsd:documentation>Multiplicative</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="MULTIPLICATIVE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
<!-- Needed both by the server XSD and message layer -->

	<xsd:simpleType name="combatMapLayerID" nxe:singular="Combat Map Layer">
        <xsd:annotation>
        	<xsd:documentation>Combat maps are split into 3 layers, in such a way that each map cell can then only contain one item in each layer (but may contain an item in all 3).  There are then special layers on top of this contains the borders/walls (4th) and the units (5th).
Lowest layer contains the terrain and ridges.  All terrain is passable, but some ridges cost double to move over (some buildings are impassable).
Middle layer contains the roads, both within the city (if applicable) and roads leading in/out of the map tile.  Roads (including enchanted roads) cost half to move over.
Buildings and terrain featues such as trees are in the top layer.  Some are passable (e.g. housing), some are not (e.g. wizards' fortress).
Movement rules start from the top layer and work down, i.e. check if there is an impassable building, if not then check if there is a road, if not then check if there is a ridge.
   i.e. if there is a road over a ridge, it still only costs half movement.  NB. This means the order these constants are defined in is vitally important.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="T"><xsd:annotation>
				<xsd:documentation>Terrain layer</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="TERRAIN" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="R"><xsd:annotation>
				<xsd:documentation>Road layer</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ROAD" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="B"><xsd:annotation>
				<xsd:documentation>Building/terrain feature layer</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="BUILDINGS_AND_TERRAIN_FEATURES" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="spellBookSectionID" nxe:singular="Spell Book Section">
        <xsd:annotation>
        	<xsd:documentation>Spell book sections not only define the way they're grouped in the spell book UI, but they also define the rules
about what a spell must be targetted on.  e.g. Unit enchantments must be targetted on a friendly unit, but unit curses must be targetted on an enemy unit.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="SC01"><xsd:annotation>
				<xsd:documentation>Summoning spells; if resurrectedHealthPercentage is set then its a raise dead-type spell and spellValidUnitTarget entries apply,
otherwise its a standard summoning spell</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="SUMMONING" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC02"><xsd:annotation>
				<xsd:documentation>Overland enchantments</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="OVERLAND_ENCHANTMENTS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC03"><xsd:annotation>
				<xsd:documentation>City enchantments</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="CITY_ENCHANTMENTS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC04"><xsd:annotation>
				<xsd:documentation>Unit enchantments</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="UNIT_ENCHANTMENTS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC05"><xsd:annotation>
				<xsd:documentation>Combat enchantments</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="COMBAT_ENCHANTMENTS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC06"><xsd:annotation>
				<xsd:documentation>City curses</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="CITY_CURSES" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC07"><xsd:annotation>
				<xsd:documentation>Unit curses</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="UNIT_CURSES" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC08"><xsd:annotation>
				<xsd:documentation>Attack spells</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ATTACK_SPELLS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC09"><xsd:annotation>
				<xsd:documentation>Special spells targetted at our own units; if combatBaseDamage is set then its a healing spell, otherwise its a recall spell; spellValidUnitTarget entries apply</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="SPECIAL_UNIT_SPELLS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC10"><xsd:annotation>
				<xsd:documentation>Special spells targetted at a location on the overland map, can be any map tile, doesn't have to be targetted on a particular unit/city.
If tileTypeID+spellRadius is filled in, this is Enchant Road.  If only spellRadius is filled in, this is Earth Lore.  If both values are null, this is Corruption.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="SPECIAL_OVERLAND_SPELLS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC11"><xsd:annotation>
				<xsd:documentation>Special spells targetted at a location on the combat map, can be any combat tile, doesn't have to be targetted on a particular unit;
the exact type of spell is currently dictated by whether there any spellValidBorderTarget records or not</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="SPECIAL_COMBAT_SPELLS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC12"><xsd:annotation>
				<xsd:documentation>Dispelling spells; if attackSpellCombatTarget is single unit then this is Dispel Magic / True; if attackSpellCombatTarget is all units then
this is Disenchant Area / True; if cannot be cast in combat then this is Disjunction / True.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="DISPEL_SPELLS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC97"><xsd:annotation>
				<xsd:documentation>Special spells that do not require a target at all; exact effect of the spell is simply hard coded by the spellID</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="SPECIAL_SPELLS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC98"><xsd:annotation>
				<xsd:documentation>Researchable now - One of the 8 options for what to research next</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="RESEARCHABLE_NOW" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="SC99"><xsd:annotation>
				<xsd:documentation>Researchable - Just not yet (e.g. you have to research most Common spells before proceeding to Uncommon, etc.)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="RESEARCHABLE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
<!-- Client database data types -->

	<xsd:simpleType name="pickQuantity">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>	
	
	<xsd:simpleType name="pickCost">
        <xsd:annotation>
        	<xsd:documentation>Stores how many start of game picks a particular type of magic book or retort takes to pick, e.g. Warlord costs 2 picks.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="prerequisiteCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="cityPopulationGrowthRate">
        <xsd:annotation>
        	<xsd:documentation>Represents how much a city population grows/dies each turn.  Also used to store modifiers to this, e.g. that a Granary adds +20 population per turn.</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:int" />
	</xsd:simpleType>
	
	<xsd:simpleType name="mineralBonusMultiplier">
		<xsd:restriction base="xsd:unsignedShort">
			<xsd:minInclusive value="1"></xsd:minInclusive>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="unrestLiteral">
        <xsd:annotation>
        	<xsd:documentation>Most unrest is calculated based on percentages.  This is used for the rare situations where unrest is adjusted in terms of a definite number of (1000s of) population.
This is used to model the special -2 adjustment that Klackons get.  This is a literal value, so a calming effect of 2 is stored as -2 (unrest is modified by -2).</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:int" />
	</xsd:simpleType>
	
	<xsd:simpleType name="buildingUnrestReduction">
        <xsd:annotation>
        	<xsd:documentation>Number of (1000s of) people who are calmed by the presence of a particular type of building.
This is a reduction value - so an Oracle with a calming effect of 2 is stored as +2 (a reduction of 2).</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="experiencePoints">
        <xsd:annotation>
        	<xsd:documentation>Stores the number of experience points a particular unit has, gains, or needs.  So for a regular this is 20 (as opposed to the experience *level* for regulars which is 1).</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="experienceLevelNumber">
        <xsd:annotation>
        	<xsd:documentation>Stores the experience level a particular unit has attained or needs.  So for a regular this is 1 (as opposed to the experience *points* for regulars which is 20).</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="productionCost">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="imageNumber">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="unitSkillValue">
        <xsd:annotation>
        	<xsd:documentation>MoM IME by convention uses positive skill values for ALL skills (in the original MoM it was dubious whether saving throw penalty skills like Death Gaze -2 or Death Gaze -4 were stored as -2 or +2).
However we still need to record negative skill modification values, e.g. True Light makes skills of death creatures less effective, and Darkness makes skills of life creatures less effective.</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:int" />
	</xsd:simpleType>
	
	<xsd:simpleType name="skillDivisor">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="scoutingRange">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="colourNoAlpha">
        <xsd:annotation>
        	<xsd:documentation>Colour value, stored as 6 hex characters RRGGBB.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:length value="6" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="colourWithAlpha">
        <xsd:annotation>
        	<xsd:documentation>Colour value, stored as 8 hex characters AARRGGBB.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:length value="8" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="colour">
        <xsd:annotation>
        	<xsd:documentation>Colour value, stored as 6 hex characters RRGGBB or 8 hex characters AARRGGBB.</xsd:documentation>
        </xsd:annotation>
		<xsd:union memberTypes="momimecommon:colourNoAlpha momimecommon:colourWithAlpha" />
	</xsd:simpleType>
	
	<xsd:simpleType name="experienceLevelRingCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="figureCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="doubleMovement">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="spellCastingCost">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="spellResearchCost">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="savingThrowModifier">
        <xsd:annotation>
        	<xsd:documentation>Stores how much a unit's resistance saving throw is modified by a particular spell.  This is a literal value, so e.g. Black Sleep is harder to resist, so has a saving throw modifier of -2.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:int" />
	</xsd:simpleType>
	
	<xsd:simpleType name="combatTileTypeDoubleMovement">
		<xsd:restriction base="xsd:int" />
	</xsd:simpleType>
	
	<xsd:simpleType name="unitCombatSideID">
	    <xsd:annotation>
    		<xsd:documentation>Keeps track of which side of combat a unit is on; null if they aren't involved in a combat at the moment.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="D"><xsd:annotation>
				<xsd:documentation>Defender</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="DEFENDER" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="A"><xsd:annotation>
				<xsd:documentation>Attacker</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ATTACKER" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="transportCapacity">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
<!-- Attack spells and proper attack resolution, new for 0.9.6 -->
	
	<xsd:simpleType name="attackSpellCombatTargetID">
	    <xsd:annotation>
			<xsd:documentation>For attack spells that can be used in combat, specifies whether the spell hits a
single unit (e.g. fire bolt, fireball, doom bolt) or all units (e.g. flame strike)</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="S"><xsd:annotation>
				<xsd:documentation>Caster chooses single enemy unit to aim spell at</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="SINGLE_UNIT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="A"><xsd:annotation>
				<xsd:documentation>Spell automatically hits all enemy units in combat (e.g. flame strike)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ALL_UNITS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="storedDamageTypeID">
		<xsd:annotation>
			<xsd:documentation>Damage is stored against units under the following categories.
Note the order of these is important - damage will always be healed in the order listed here - so we heal healable damage first, then
life stealing damage, then permanent damage.  Permanent damage can't be healed by healing spells, only by the regular 1 HP healing per turn on the overland map,
which is why it is last in the list, so it will only be healed when all healable and life stealing damage is taken care of.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="H"><xsd:annotation>
				<xsd:documentation>Healable damage (normal damage that will heal itself over time, or can be healed with spells)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="HEALABLE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="L"><xsd:annotation>
				<xsd:documentation>Life stealing damage (damage from ghouls and life drain; if more than half of damage dealt is life stealing, the unit will become undead)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="LIFE_STEALING" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="P"><xsd:annotation>
				<xsd:documentation>Permanent damage (damage from stoning, banishing, disintegration and such that cannot be healed)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PERMANENT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="damageResolutionTypeID">
		<xsd:annotation>
			<xsd:documentation>Different rules for resolving damage that can be dealt by different skills, attacks and attack spells.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="S"><xsd:annotation>
				<xsd:documentation>Single figure (normal attack where first figure defends and takes hits, then second figure defends and takes hits, and so on)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="SINGLE_FIGURE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="A"><xsd:annotation>
				<xsd:documentation>Armour piercing (same as S, but target's defence is halved)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ARMOUR_PIERCING" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="I"><xsd:annotation>
				<xsd:documentation>Illusionary (same as S, but target's defence is zeroed)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ILLUSIONARY" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="M"><xsd:annotation>
				<xsd:documentation>Multi figure (immolation attack where all figures are hit, regardless of how many actually die)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="MULTI_FIGURE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="R"><xsd:annotation>
				<xsd:documentation>Resist or take damage equal to the amount the resistance roll was missed by (life drain/steal)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="RESIST_OR_TAKE_DAMAGE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="T"><xsd:annotation>
				<xsd:documentation>Make n resistance rolls, losing 1 HP for each failed roll (poison touch)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="RESISTANCE_ROLLS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="P"><xsd:annotation>
				<xsd:documentation>Each figure must resist or die (petrify, stoning gaze)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="EACH_FIGURE_RESIST_OR_DIE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="F"><xsd:annotation>
				<xsd:documentation>Single figure must resist or die (stoning touch)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="SINGLE_FIGURE_RESIST_OR_DIE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="D"><xsd:annotation>
				<xsd:documentation>Doom (constant damage)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="DOOM" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="N"><xsd:annotation>
				<xsd:documentation>Disintegrate if resistance 9 or less</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="DISINTEGRATE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="C"><xsd:annotation>
				<xsd:documentation>Fixed % chance of whole unit dying completely (cracks call)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="CHANCE_OF_DEATH" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="Z"><xsd:annotation>
				<xsd:documentation>Zeroes ammo remaining (warp wood)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ZEROES_AMMO" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="Y"><xsd:annotation>
				<xsd:documentation>Each figure must resist or can make no further attacks during this attack resolution (fear)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="FEAR" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>


	<xsd:simpleType name="negatedByUnitID">
        <xsd:annotation>
        	<xsd:documentation>Some skills are negated by enemy skills (e.g. Negate First Strike); others are negated by our own skills (e.g. Resist Elements).</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="O"><xsd:annotation>
				<xsd:documentation>Negated by a skill on our unit</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="OUR_UNIT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="E"><xsd:annotation>
				<xsd:documentation>Negated by a skill on the enemy unit</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ENEMY_UNIT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
<!-- Datatypes not needed directly here, but used both in server and other XSDs -->
	
	<xsd:simpleType name="spellCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="directions">
	    <xsd:annotation>
    		<xsd:documentation>List of directions from 0..8 in length, of numbers 1..8.  Ideally should change this to a 0..unbounded of type map:mapDirection.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="pickTypeCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="unitSkillComponent">
	    <xsd:annotation>
			<xsd:documentation>Different things that can contribute to a unit's skill values; defined so we can colour them separately on the Unit Info screen.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="A"><xsd:annotation>
				<xsd:documentation>Total of all the below (this is all the server ever uses)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ALL" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="B"><xsd:annotation>
				<xsd:documentation>Basic value defined in the server XML</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="BASIC" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="W"><xsd:annotation>
				<xsd:documentation>Bonus from normal unit having magical, mithril or adamantium weapons</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="WEAPON_GRADE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="E"><xsd:annotation>
				<xsd:documentation>Bonus from normal unit or hero being experienced</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="EXPERIENCE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="H"><xsd:annotation>
				<xsd:documentation>Bonus from the types of hero skills that simply add to an attribute, e.g. Might +5 simply adds +5 to melee attack strength</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="HERO_SKILLS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="I"><xsd:annotation>
				<xsd:documentation>Bonus from equipped hero items</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="HERO_ITEMS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="S"><xsd:annotation>
				<xsd:documentation>Bonus from other skills or spell effects, e.g. Holy Armour adding +2 to defence</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="SPELL_EFFECTS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="T"><xsd:annotation>
				<xsd:documentation>Bonus from other skills or spell effects that affect the whole unit stack, e.g. Resistance to All, Holy Bonus or hero Leadership skill</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="STACK" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="C"><xsd:annotation>
				<xsd:documentation>Bonus from combat area effects, including CAE-type spells, e.g. node auras or prayer</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="COMBAT_AREA_EFFECTS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="P"><xsd:annotation>
				<xsd:documentation>Penalties given to us by enemy unit, e.g. -1 to hit invisible enemy</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PENALTIES" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="unitSkillPositiveNegative">
	    <xsd:annotation>
			<xsd:documentation>This is used on the unit info screen to show when stats have been reduced, e.g. by Black Prayer, Vertigo, Warp Reality.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="P"><xsd:annotation>
				<xsd:documentation>Positive</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="POSITIVE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="N"><xsd:annotation>
				<xsd:documentation>Negative</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="NEGATIVE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="B"><xsd:annotation>
				<xsd:documentation>Both</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="BOTH" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="unitSpecialOrder">
	    <xsd:annotation>
    		<xsd:documentation>Different special orders that units can be given.
All of these except for msoPatrol are only used in simultaneous turn games - in one-player-at-a-time games, these kinds of commands are executed instantly.
Units with special orders won't be asked for movement orders and look visibly different on the map.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="P"><xsd:annotation>
				<xsd:documentation>Patrol</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PATROL" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="C"><xsd:annotation>
				<xsd:documentation>Build city</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="BUILD_CITY" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="R"><xsd:annotation>
				<xsd:documentation>Build road</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="BUILD_ROAD" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="M"><xsd:annotation>
				<xsd:documentation>Meld with node</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="MELD_WITH_NODE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="U"><xsd:annotation>
				<xsd:documentation>Purify</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PURIFY" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="S"><xsd:annotation>
				<xsd:documentation>Plane Shift</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PLANE_SHIFT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="D"><xsd:annotation>
				<xsd:documentation>Dismiss</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="DISMISS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
<!-- Enums cannot be extended, so I avoid defining any in the server/client XSDs to avoid changing dozens of import statements between MoM IME versions -->	

	<xsd:simpleType name="aiBuildingTypeID">
        <xsd:annotation>
        	<xsd:documentation>Building types that the AI uses to decide which order to construct buildings in raider and AI wizards' cities.'</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="G"><xsd:annotation>
				<xsd:documentation>Growth</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="GROWTH" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="P"><xsd:annotation>
				<xsd:documentation>Production</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PRODUCTION" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="M"><xsd:annotation>
				<xsd:documentation>Unrest / Magic Power</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="UNREST_AND_MAGIC_POWER" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="R"><xsd:annotation>
				<xsd:documentation>Research</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="RESEARCH" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="T"><xsd:annotation>
				<xsd:documentation>Units</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="UNITS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="Z"><xsd:annotation>
				<xsd:documentation>Gold</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="GOLD" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="U"><xsd:annotation>
				<xsd:documentation>Unrest without Magic Power</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="UNREST_WITHOUT_MAGIC_POWER" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="N"><xsd:annotation>
				<xsd:documentation>Naval units</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="NAVAL" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="D"><xsd:annotation>
				<xsd:documentation>Defence</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="DEFENCE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="aiMovementCode">
		<xsd:annotation>
			<xsd:documentation>Condition checks and rules the AI can use to decide where to move overland.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="R"><xsd:annotation>
				<xsd:documentation>If there are any reachable undefended (our/their empty cities, empty nodes/lairs/towers) or underdefended locations (our cities/nodes/towers), then head there.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="REINFORCE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="A"><xsd:annotation>
				<xsd:documentation>If there are any reachable defended locations (their cities/nodes/lairs/towers) where the sum of our UARs > the sum of their UARs, then head there/attack them.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ATTACK_STATIONARY" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="W"><xsd:annotation>
				<xsd:documentation>If there are any reachable enemy unit stacks where the sum of our UARs > the sum of their UARs, then head there/attack them.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ATTACK_WANDERING" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="S"><xsd:annotation>
				<xsd:documentation>If there is any reachable unscouted terrain with an adjacent land tile then head there.
(This doesn't imply the units can walk on land - boats use this to trace coastlines).</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="SCOUT_LAND" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="Z"><xsd:annotation>
				<xsd:documentation>If there is any reachable unscouted terrain then head there.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="SCOUT_ALL" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="J"><xsd:annotation>
				<xsd:documentation>If there are any reachable defended locations (their cities/nodes/lairs/towers) where the sum of their UARs >= the sum of our UARs,
but the sum of our UARs if totalled across all reachable stacks of our units of the same category > the sum of their UARs, then head to join the unit stacks together.
(Wording this to avoid a bunch of swordsmen fruitlessly joining together just because they can see a node full of Sky Drakes).
(This needs some care so that in simultaneous turns games, the two unit stacks don't keep crossing past each other).</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="JOIN_STACK" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="P"><xsd:annotation>
				<xsd:documentation>If there is a reachable Tower that is garrisoned by our units, and if we imagine we are standing at the tower and recheck all
preceeding movement codes then we would have something useful to do on the other plane, then head to the tower.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PLANE_SHIFT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="T"><xsd:annotation>
				<xsd:documentation>If we are in a transport then stay there.  If we aren't in a transport but can reach one that has space remaining, then head for it.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="GET_IN_TRANSPORT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="D"><xsd:annotation>
				<xsd:documentation>If we can reach any of our defended locations (cities/nodes/towers) then head there.
Also, this flags up an alert that there are units on this island/continent that have nothing to do, so red flags the entire continent as "transport needed here".</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="OVERDEFEND" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="B"><xsd:annotation>
				<xsd:documentation>If we can reach a good spot to build a city then head there and do so.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="BUILD_CITY" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="E"><xsd:annotation>
				<xsd:documentation>If we can see any two of our cities on the same land mass unconnected by road, then trace a path between them a build road there.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="BUILD_ROAD" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="O"><xsd:annotation>
				<xsd:documentation>If we can reach any corrupted terrain that's in the resource radius for one of our cities then head there and purify it.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PURIFY" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="N"><xsd:annotation>
				<xsd:documentation>If we can reach any node not captured by us that has no enemy defending it then head there and try to meld with it.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="MELD_WITH_NODE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="C"><xsd:annotation>
				<xsd:documentation>If we are currently carrying any unit stack(s) then check all islands/continents we could take them to.  Imagine we unloaded the units there,
then use the movement codes of the unit stack(s) being carried to see if they would have something useful to do on that island/continent.  If so, then take them there.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="CARRY_UNITS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="L"><xsd:annotation>
				<xsd:documentation>If we are currently empty, and can reach any island/continent that was red flagged by the OVERDEFEND (D) code, then head there.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="LOAD_UNITS" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="F"><xsd:annotation>
				<xsd:documentation>If we are on the same plane as our Wizard's Fortress, then head to the island/continent that it is on.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="FORTRESS_ISLAND" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>	

	<xsd:simpleType name="rangedAttackTypeActionID">
        <xsd:annotation>
        	<xsd:documentation>Types of action we can define an image for a ranged attack type for.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="FLY">
				<xsd:annotation><xsd:documentation>Image of the rock/fireball/etc flying towards its target</xsd:documentation></xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="STRIKE">
				<xsd:annotation><xsd:documentation>Image of the rock/fireball/etc striking its target</xsd:documentation></xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="frontOrBack">
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="F"><xsd:annotation>
				<xsd:documentation>Front</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="FRONT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="B"><xsd:annotation>
				<xsd:documentation>Back</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="BACK" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="damagePerFigureID">
        <xsd:annotation>
        	<xsd:documentation>Defines whether damage is dealt from a unit as a whole or individual figures.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="U"><xsd:annotation>
				<xsd:documentation>The unit deals the damage as a whole, no matter how many it figures it has alive or has lost</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PER_UNIT" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="C"><xsd:annotation>
				<xsd:documentation>The damage is multiplied by the number of alive figures and dealt as a single combined attack</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PER_FIGURE_COMBINED" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="S"><xsd:annotation>
				<xsd:documentation>Each alive figure makes a separate attack that can be defended against separately</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="PER_FIGURE_SEPARATE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="unitSkillTypeID">
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="A"><xsd:annotation>
				<xsd:documentation>Unit attributes such as Melee attack Strength, Resistance and Hit Points.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ATTRIBUTE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="M"><xsd:annotation>
				<xsd:documentation>Skills alterable by modifiers such as node auras, prayer, weapon grade bonuses, or experience, e.g. Thrown Weapons or Breath attacks.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="MODIFYABLE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="F"><xsd:annotation>
				<xsd:documentation>Skills that have a fixed unmodifyable value, e.g. Poison Attack or Immolation.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="FIXED" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="N"><xsd:annotation>
				<xsd:documentation>Skills that have no value, e.g. Create Outpost or Invisibility.</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="NO_VALUE" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
<!-- Moved from server XSD -->

	<xsd:simpleType name="fame">
        <xsd:annotation>
        	<xsd:documentation>How much fame a wizard has, gains or loses.</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="heroSkillTypeID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="combatMapCoordinate">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="aiUnitCategoryID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="cityQualityEstimate">
		<xsd:restriction base="xsd:int" />
	</xsd:simpleType>
	
	<xsd:simpleType name="combatMapTileCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="pickInitialSkill">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="weighting">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="heroSkillMaxOccurrences">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="aiRatingAdditive">
		<xsd:restriction base="xsd:int" />
	</xsd:simpleType>

	<xsd:simpleType name="aiRatingMultiplicative">
		<xsd:restriction base="xsd:double" />
	</xsd:simpleType>
	
	<xsd:simpleType name="heroRandomPickCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="freeAtStartCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="aiResearchOrder">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
<!-- Merging language XSD -->

	<xsd:simpleType name="language">
		<xsd:restriction base="xsd:language">
			<xsd:enumeration value="en"><xsd:annotation>
				<xsd:documentation>English</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ENGLISH" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="fr"><xsd:annotation>
				<xsd:documentation>French</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="FRENCH" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="de"><xsd:annotation>
				<xsd:documentation>German</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="GERMAN" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="pl"><xsd:annotation>
				<xsd:documentation>Polish</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="POLISH" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

<!-- Merging graphics XSD -->

	<xsd:simpleType name="imageFilename">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="animationID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="pixelCoordinate">
		<xsd:restriction base="xsd:int" />
	</xsd:simpleType>

	<xsd:simpleType name="frameRate">
		<xsd:restriction base="xsd:double" />
	</xsd:simpleType>
	
	<xsd:simpleType name="productionImageValue">
        <xsd:annotation>
        	<xsd:documentation>Production quantities that the client expects to be able to find images for; not all values are required for all types of production.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="1" />
			<xsd:enumeration value="10" />
			<xsd:enumeration value="-1" />
			<xsd:enumeration value="-10" />
			<xsd:enumeration value="½" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="seconds">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="combatActionID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="rulePreferenceWeighting">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="cityViewElementSetID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="sizeMultiplier">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="sortPosition">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
	<xsd:simpleType name="mapDirectionOrNone">
	    <xsd:annotation>
    		<xsd:documentation>Map direction 1..8, 1 being north, 2 being north-east and so on; with addition of 0 for "no direction"</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedShort">
			<xsd:minInclusive value="0" />
			<xsd:maxInclusive value="8" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="tileSetID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="bit">
        <xsd:annotation>
        	<xsd:documentation>1 if the tile type at a particular location equals a certain value, 0 if its something else.  2 is a special case for river mouths.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:int">
			<xsd:enumeration value="0" />
			<xsd:enumeration value="1" />
			<xsd:enumeration value="2" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="smoothingSystemID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>

	<xsd:simpleType name="directionCount">
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="possibleBitValues">
        <xsd:annotation>
        	<xsd:documentation>Possible values to test a number of bits against.</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="0" />
			<xsd:enumeration value="1" />
			<xsd:enumeration value="2" />
			<xsd:enumeration value="01" />
			<xsd:enumeration value="02" />
			<xsd:enumeration value="12" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="bitmask">
        <xsd:annotation>
        	<xsd:documentation>Set of 8 values denoting bit value of each tile type in if we move in each of the 8 direction from here; or the special value "NoSmooth".</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:length value="8" />
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="playListID">
		<xsd:restriction base="xsd:normalizedString" />
	</xsd:simpleType>
	
	<xsd:simpleType name="healingRate">
        <xsd:annotation>
        	<xsd:documentation>Healing rates are defined in 1/60ths..</xsd:documentation>
        </xsd:annotation>
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
</xsd:schema>