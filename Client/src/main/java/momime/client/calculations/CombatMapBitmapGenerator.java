package momime.client.calculations;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Map;

import com.ndg.map.coordinates.MapCoordinates3DEx;

import momime.common.database.CombatMapLayerID;
import momime.common.database.RecordNotFoundException;
import momime.common.database.SmoothedTile;
import momime.common.database.SmoothedTileTypeEx;
import momime.common.database.TileSetEx;
import momime.common.messages.MapAreaOfCombatTiles;

/**
 * Deals with deriving combat tiles and generating the combat scenery bitmap.
 */
public interface CombatMapBitmapGenerator
{
	/**
	 * Creates the smoothedTiles array as the correct size
	 */
	public void afterJoinedSession ();
	
	/**
	 * Converts the tile types sent by the server into actual tile numbers, smoothing the edges of various terrain types in the process
	 * 
	 * @param combatLocation Overland map coordinates where combat it taking place (we need to know e.g. what tile type it is there and what plane it is on)
	 * @param combatTerrain Scenery tiles generated by the server for this combat map
	 * @throws RecordNotFoundException If required entries in the graphics XML cannot be found
	 */
	public void smoothMapTerrain (final MapCoordinates3DEx combatLocation, final MapAreaOfCombatTiles combatTerrain) throws RecordNotFoundException;

	/**
	 * Generates big bitmaps of the entire combat map in each frame of animation.
	 * Delphi client did this rather differently, by building Direct3D vertex buffers to display all the map tiles; equivalent method there was RegenerateCompleteSceneryView.
	 * 
	 * Generated bitmaps will all be the exact size of the terrain portion of the combat UI.
	 * 
	 * @param combatTerrain Scenery tiles generated by the server for this combat map (needed to look for muddy tiles)
	 * @return Array of combat map bitmaps
	 * @throws IOException If there is a problem loading any of the images
	 */
	public BufferedImage [] generateCombatMapBitmaps (final MapAreaOfCombatTiles combatTerrain) throws IOException;
	
	/**
	 * @param x Coordinates of a particular combat tile
	 * @param y Coordinates of a particular combat tile
	 * @param combatMapTileSet Combat map tile set
	 * @return Left edge of tile in pixel coordinates
	 */
	public int combatCoordinatesX (final int x, final int y, final TileSetEx combatMapTileSet);
	
	/**
	 * @param x Coordinates of a particular combat tile
	 * @param y Coordinates of a particular combat tile
	 * @param combatMapTileSet Combat map tile set
	 * @return Top edge of tile in pixel coordinates
	 */
	public int combatCoordinatesY (final int x, final int y, final TileSetEx combatMapTileSet);

	/**
	 * @return Smoothed tile types to display at every map cell
	 */
	public Map<CombatMapLayerID, SmoothedTileTypeEx [] []> getSmoothedTileTypes ();

	/**
	 * @return Smoothed tiles to display at every map cell
	 */	
	public Map<CombatMapLayerID, SmoothedTile [] []> getSmoothedTiles ();
}