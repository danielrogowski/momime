<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
	xmlns:mp="http://www.ndg.com/multiplayer/base" xmlns:mps="http://www.ndg.com/multiplayer/sessionbase" xmlns:map="http://www.ndg.com/map"
	xmlns:momimecommon="http://momime/common/database" xmlns:momimemsgs="http://momime/common/messages"
	xmlns:momimectos="http://momime/common/messages/clienttoserver" targetNamespace="http://momime/common/messages/clienttoserver"
	jaxb:version="2.0">

	<xsd:import namespace="http://www.ndg.com/map" />
	<xsd:import namespace="http://www.ndg.com/multiplayer/base" />
	<xsd:import namespace="http://www.ndg.com/multiplayer/sessionbase" />
	<xsd:import namespace="http://momime/common/database" />
	<xsd:import namespace="http://momime/common/messages" />
    
    <xsd:annotation>
    	<xsd:documentation>Defines all the messages sent from the MoM IME client to the server.</xsd:documentation>
	</xsd:annotation>

<!-- General -->

	<xsd:element name="chatMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends to server to send a chat message to other players</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="text" type="xsd:normalizedString" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

<!-- Join game process of picking wizard, photo, picks and so on -->	

	<xsd:element name="chooseWizardMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message we send to the server when we choose which wizard we want to be</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="0" maxOccurs="1" name="wizardID" type="momimecommon:wizardID" />		<!-- blank or missing = custom wizard -->
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="chooseStandardPhotoMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message we send to the server when we've chosen a custom wizard and then which standard (wizard) photo we want</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="photoID" type="momimecommon:wizardID" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="uploadCustomPhotoMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message clients send to the server when they choose a custom photo</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="ndgBmpImage" type="xsd:base64Binary" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="chooseCustomFlagColourMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message client sends to server to give the server the custom colour of their flag</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="flagColour" type="momimecommon:colour" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="chooseCustomPicksMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client telling Server about all the custom picks they've chosen</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="pick" type="momimecommon:pickAndQuantity" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="chooseInitialSpellsMessage">
	    <xsd:annotation>
    		<xsd:documentation>Tells server which spell choices we made, e.g. that 11 books grants 1 free rare spell.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="pickID" type="momimecommon:pickID" />
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="spell" type="momimecommon:spellID" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="chooseRaceMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message we send to the server when we choose which race we want to be</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="raceID" type="momimecommon:raceID" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

<!-- Turn system -->

	<xsd:element name="nextTurnButtonMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message clients send out when the next turn button is clicked.
Server figures out the effect, based on the type of game (one-at-a-time or simultaneous).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage" />
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- City placing and building -->

	<xsd:element name="chooseCityNameMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message client sends to server to tell them what name we chose for a city</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="cityLocation" type="map:mapCoordinates3D" />
						<xsd:element minOccurs="1" maxOccurs="1" name="cityName" type="momimecommon:description" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="changeCityConstructionMessage">
	    <xsd:annotation>
    		<xsd:documentation>Clients send this to set what they want to build in a city</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="cityLocation" type="map:mapCoordinates3D" />
						<xsd:element minOccurs="0" maxOccurs="1" name="buildingID" type="momimecommon:buildingID" />
						<xsd:element minOccurs="0" maxOccurs="1" name="unitID" type="momimecommon:unitID" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="changeOptionalFarmersMessage">
	    <xsd:annotation>
    		<xsd:documentation>Clients send this when player wants to change how many farmers/workers are in this city.
Server uses standard updateCity to reply.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="cityLocation" type="map:mapCoordinates3D" />
						<xsd:element minOccurs="1" maxOccurs="1" name="optionalFarmers" type="momimecommon:cityPopulationDiv1000" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="rushBuyMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message client sends to server when they want to rush buy the current construction project in a particular city</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="cityLocation" type="map:mapCoordinates3D" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="sellBuildingMessage">
	    <xsd:annotation>
    		<xsd:documentation>Clients send this when they want to sell a building from a city, or cancel a pending sale</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="cityLocation" type="map:mapCoordinates3D" />
						<xsd:element minOccurs="0" maxOccurs="1" name="buildingURN" type="momimemsgs:buildingURN">
						    <xsd:annotation><xsd:documentation>null = Cancel pending sale</xsd:documentation></xsd:annotation>
						</xsd:element>
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

<!-- Global economy -->

	<xsd:element name="changeTaxRateMessage">
	    <xsd:annotation>
    		<xsd:documentation>Clients send this to the server to request a change in their global tax rate</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="taxRateID" type="momimecommon:taxRateID" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Units -->

	<xsd:element name="dismissUnitMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client can send this to request that a unit of theirs be killed off</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="cancelPendingMovementAndSpecialOrdersMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this to server if they decide to cancel a pending movement and/or special orders</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="requestOverlandMovementDistancesMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this to server to request coordinates where this unit stack can move to</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="moveFrom" type="map:mapCoordinates3D" />
						<xsd:element minOccurs="1" maxOccurs="unbounded" name="unitURN" type="momimemsgs:unitURN" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="requestMoveOverlandUnitStackMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this to server to request a unit stack be moved on the overland map</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="moveFrom" type="map:mapCoordinates3D" />
						<xsd:element minOccurs="1" maxOccurs="1" name="moveTo" type="map:mapCoordinates3D" />
						<xsd:element minOccurs="1" maxOccurs="unbounded" name="unitURN" type="momimemsgs:unitURN" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="requestUpdateUnitNameMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message client sends to server to tell them what name we want to rename a hero to</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN" />
						<xsd:element minOccurs="1" maxOccurs="1" name="unitName" type="momimecommon:description" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="specialOrderButtonMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this to server when a special order button is clicked with a particular unit stack</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="mapLocation" type="map:mapCoordinates3D" />
						<xsd:element minOccurs="1" maxOccurs="1" name="specialOrder" type="momimecommon:unitSpecialOrder" />
						<xsd:element minOccurs="1" maxOccurs="unbounded" name="unitURN" type="momimemsgs:unitURN" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Combat -->

	<xsd:element name="requestMoveCombatUnitMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this to server to request a unit be moved in combat</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN" />
						<xsd:element minOccurs="1" maxOccurs="1" name="moveTo" type="map:mapCoordinates2D" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="endCombatTurnMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message client sends to server when all units have been moved in combat</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="combatLocation" type="map:mapCoordinates3D" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="combatAutoControlMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message client sends to server when they want the server to use its AI to move their combat units for this combat turn.
Client re-sends this each combat turn - the server has no persistent memory of whether a client has
Auto switched on or not - this makes it easier to allow the player to switch Auto back off again.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="combatLocation" type="map:mapCoordinates3D" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="captureCityDecisionMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this to tell the server whether they want to raze or capture a city they just took.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="cityLocation" type="map:mapCoordinates3D" />
						<xsd:element minOccurs="1" maxOccurs="1" name="defendingPlayerID" type="mps:playerID" />
						<xsd:element minOccurs="1" maxOccurs="1" name="captureCityDecision" type="momimemsgs:captureCityDecisionID" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

<!-- Magic -->

	<xsd:element name="updateMagicPowerDistributionMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends updated slider bar positions when clicking OK from the magic screen</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="distribution" type="momimemsgs:magicPowerDistribution" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="alchemyMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this to server when they want to convert Gold to Mana or vice versa</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="fromProductionTypeID" type="momimecommon:productionTypeID">
						    <xsd:annotation>
    							<xsd:documentation>toProductionTypeID is implied; if from=Gold then to=Mana, and if from=Mana then to=Gold</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element minOccurs="1" maxOccurs="1" name="fromValue" type="momimecommon:undoubledProductionValue" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="requestResearchSpellMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this when they want to pick which spell they want to research</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="spellID" type="momimecommon:spellID" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Spells -->
	
	<xsd:element name="requestCastSpellMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this to request a spell being cast, in combat or overland.
If overland, all the combat elements are ommitted.  In this case we don't send which unit/location we're targetting it at just yet, since it might take multiple turns to cast.
If in combat, and casting at a unit, then combatTargetUnitURN willspecify which unit (overland spells, even unit enchantments, work differently via NTMs).
If in combat, and casting at a location (e.g. summoning), combatTargetLocation will specify the target location.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="spellID" type="momimecommon:spellID" />
						<xsd:element minOccurs="0" maxOccurs="1" name="combatLocation" type="map:mapCoordinates3D" />
						<xsd:element minOccurs="0" maxOccurs="1" name="combatTargetLocation" type="map:mapCoordinates2D" />
						<xsd:element minOccurs="0" maxOccurs="1" name="combatTargetUnitURN" type="momimemsgs:unitURN" />
						<xsd:element minOccurs="0" maxOccurs="1" name="combatCastingUnitURN" type="momimemsgs:unitURN">
						    <xsd:annotation>
    							<xsd:documentation>In combat, if spell is being cast by a unit with their own mana pool (e.g. Archangel or hero), or from the spell charges imbued
into a hero item, then this will be set.  If spell is being cast by the wizard themselves then this remains as null.  Not applicable for overland cast requests.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element minOccurs="0" maxOccurs="1" name="combatCastingFixedSpellNumber" type="momimectos:heroItemSlotNumber">
						    <xsd:annotation>
    							<xsd:documentation>In combat, if using one of a unit's fixed spells (e.g. Giant Spiders casting Web), this indicates which number spell it is;
combatCastingUnitURN must also be set.  If casting from the wizard's or a unit's MP pool then this is left null.  Not applicable for overland cast requests.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element minOccurs="0" maxOccurs="1" name="combatCastingSlotNumber" type="momimectos:heroItemSlotNumber">
						    <xsd:annotation>
    							<xsd:documentation>In combat, if using one of the spell charges imbued into a hero item, this indicates which slot the item is in;
combatCastingUnitURN must also be set.  If casting from the wizard's or a unit's MP pool then this is left null.  Not applicable for overland cast requests.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element minOccurs="0" maxOccurs="1" name="variableDamage" type="momimecommon:unitSkillValue">
						    <xsd:annotation>
    							<xsd:documentation>For spells such as fire bolt where variable mana can be channeled into the spell to increase damage,
this indicates the damage chosen when casting the spell, beteween baseDamage and maxDamage.  The MP cost can be inferred from this.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element minOccurs="0" maxOccurs="1" name="heroItem" type="momimecommon:heroItem" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="requestSwitchOffMaintainedSpellMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this when they want to switch off a maintained spell (overland, unit or city).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="spellURN" type="momimemsgs:spellURN" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="targetSpellMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this to specify where they want to cast a spell they've completed casting overland.
(combat spells' targets are sent in the original requestCastSpellMessage).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="spellID" type="momimecommon:spellID" />
						<xsd:element minOccurs="0" maxOccurs="1" name="overlandTargetUnitURN" type="momimemsgs:unitURN" />
						<xsd:element minOccurs="0" maxOccurs="1" name="overlandTargetLocation" type="map:mapCoordinates3D" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="cancelTargetSpellMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends this to specify that, after bothering to finish casting an overland spell, they don't want to pick a target for it after all.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="spellID" type="momimecommon:spellID" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

<!-- Hero items, new for 0.9.7 -->

	<xsd:element name="requestMoveHeroItemMessage">
	    <xsd:annotation>
    		<xsd:documentation>Client sends to request that a hero item be moved from one location to another.
The to/from locations can be their bank, the anvil, or actually being used by a hero.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:clientToServerMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="heroItemURN" type="momimemsgs:heroItemURN" />
						<xsd:element minOccurs="1" maxOccurs="1" name="fromLocation" type="momimectos:heroItemLocationID" />
						<xsd:element minOccurs="1" maxOccurs="1" name="toLocation" type="momimectos:heroItemLocationID" />

						<xsd:element minOccurs="0" maxOccurs="1" name="fromUnitURN" type="momimemsgs:unitURN" />
						<xsd:element minOccurs="0" maxOccurs="1" name="fromSlotNumber" type="momimectos:heroItemSlotNumber" />
						<xsd:element minOccurs="0" maxOccurs="1" name="toUnitURN" type="momimemsgs:unitURN" />
						<xsd:element minOccurs="0" maxOccurs="1" name="toSlotNumber" type="momimectos:heroItemSlotNumber" />
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

<!-- Simple types -->

	<xsd:simpleType name="heroItemSlotNumber">
	    <xsd:annotation>
    		<xsd:documentation>Numbers the individual hero items slots on a particular unit (0, 1, 2).</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
<!--  Enums -->

	<xsd:simpleType name="heroItemLocationID">
	    <xsd:annotation>
    		<xsd:documentation>The possible places we can move a hero item from/to</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="U"><xsd:annotation>
				<xsd:documentation>Unassigned (sitting in bank vault in wizard's fortress)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="UNASSIGNED" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="D"><xsd:annotation>
				<xsd:documentation>Destroyed on anvil to get MP (this obviously isn't valid as a "from" location)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="DESTROY" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="H"><xsd:annotation>
				<xsd:documentation>Being used by one of our heroes</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="HERO" /></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

</xsd:schema>