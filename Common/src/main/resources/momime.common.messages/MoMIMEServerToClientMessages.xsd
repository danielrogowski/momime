<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
	xmlns:mp="http://www.ndg.com/multiplayer/base" xmlns:mps="http://www.ndg.com/multiplayer/sessionbase" xmlns:map="http://www.ndg.com/map"
	xmlns:momimenewgame="http://momime/common/database/newgame/v0_9_5" xmlns:momimecommon="http://momime/common/database/v0_9_5"
	xmlns:momimeclient="http://momime/client/database/v0_9_5" xmlns:momimemsgs="http://momime/common/messages/v0_9_5"
	xmlns:momimestoc="http://momime/common/messages/servertoclient/v0_9_5" targetNamespace="http://momime/common/messages/servertoclient/v0_9_5"
	jaxb:version="2.0">

	<xsd:import namespace="http://www.ndg.com/map"/>
	<xsd:import namespace="http://www.ndg.com/multiplayer/base"/>
	<xsd:import namespace="http://www.ndg.com/multiplayer/sessionbase"/>
	<xsd:import namespace="http://momime/common/database/newgame/v0_9_5"/>
	<xsd:import namespace="http://momime/common/database/v0_9_5"/>
	<xsd:import namespace="http://momime/common/messages/v0_9_5"/>
	<xsd:import namespace="http://momime/client/database/v0_9_5"/>
    
    <xsd:annotation>
    	<xsd:documentation>Defines all the messages sent from the MoM IME server to the client.</xsd:documentation>
	</xsd:annotation>

<!-- General -->

	<xsd:element name="newGameDatabaseMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message server sends to clients as they connect, to tell them what databases and pre-defined settings are available</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="newGameDatabase" type="momimeclient:newGameDatabase"/>
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="textPopupMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends to clients for warning/error messages</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="text" type="xsd:normalizedString"/>
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="broadcastChatMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server bounces this back to all clients for chat messages.
PlayerName is not passed as a PlayerID so that chat messages can originate from the server.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="text" type="xsd:normalizedString"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="playerName" type="mps:playerName"/>
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Join game process of picking wizard, photo, picks and so on -->

	<xsd:element name="chosenWizardMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message server sends to players to tell them which wizards players have chosen.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="playerID" type="mps:playerID"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="wizardID" type="momimecommon:wizardID">
						    <xsd:annotation>
    							<xsd:documentation>Blank indicates custom wizard chosen.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="yourPhotoIsOkMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message server sends to a player to let them know their choice of photo was OK (regardless of whether it was a
standard wizard portrait or custom .ndgbmp), so proceed to the next stage of game setup.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="chooseInitialSpellsNowRank">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="spellRankID" type="momimecommon:spellRankID"/>
			<xsd:element minOccurs="1" maxOccurs="1" name="freeSpellCount" type="momimecommon:spellCount"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:element name="chooseInitialSpellsNowMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to client to tell them how many spells of each rank they can choose for free at the start of the game.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
		        	<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="magicRealmID" type="momimecommon:pickID"/>
						<xsd:element minOccurs="1" maxOccurs="unbounded" name="spellRank" type="momimestoc:chooseInitialSpellsNowRank"/>
		        	</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="chooseYourRaceNowMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message server sends to a player when they've finished picking free spells at the start of the game, since the
client can't predict how many of what spell ranks and magic realms they need to pick.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="yourRaceIsOkMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message server sends to a player to let them know their choice of race was OK.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="startGameProgressMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server broadcasts messages as the game starts up</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="stage" type="momimestoc:startGameProgressStageID"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

<!-- Sent just before game starts to inform players of each others' choices -->

	<xsd:element name="chosenStandardPhotoMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message server sends to players to tell them that a player is using a standard photo
(either because they're using a standard wizard, or a custom wizard with a standard photo)</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="playerID" type="mps:playerID"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="photoID" type="momimecommon:wizardID"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="chosenCustomPhotoMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message server sends to players to tell them that a player chose a custom wizard with a custom photo and flag colour</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="playerID" type="mps:playerID"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="flagColour" type="momimecommon:colour"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="ndgBmpImage" type="xsd:base64Binary"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="replacePicksMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server updating client with the complete list of picks that a particular player now has; this could change because:
1) They've chosen a standard wizard and the server is confirming what picks that standard wizard has;
2) Chosen a custom wizard and server is confirming that the custom picks chosen are OK; or
3) Found a book/retort from a node/lair/tower during the game.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="playerID" type="mps:playerID"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="pick" type="momimemsgs:playerPick"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="startGameMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message server broadcasts when all game setup is complete and its time for clients to actually switch to the map screen</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Turn system -->

	<xsd:element name="addNewTurnMessagesMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this if additional messages are generated during a turn
(e.g. casting an overland enchantment instantly, or capturing or losing a node)</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="expireMessages" type="xsd:boolean"/>
						<xsd:element minOccurs="1" maxOccurs="unbounded" name="message" type="momimemsgs:newTurnMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="startSimultaneousTurnMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to all clients at the start of a new turn in a simultaneous turns game</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="turnNumber" type="momimemsgs:turnNumber"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="expireMessages" type="xsd:boolean"/>
						<xsd:element minOccurs="1" maxOccurs="unbounded" name="message" type="momimemsgs:newTurnMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="setCurrentPlayerMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to all clients at the start of a new players' turn in a one-at-a-time turns game</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="currentPlayerID" type="mps:playerID"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="turnNumber" type="momimemsgs:turnNumber"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="expireMessages" type="xsd:boolean"/>
						<xsd:element minOccurs="1" maxOccurs="unbounded" name="message" type="momimemsgs:newTurnMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="onePlayerSimultaneousTurnDoneMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to all clients to notify that one player has finished allocating simultaneous movement
(so the client can show a 'tick' next to them in the turn bar)</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="playerID" type="mps:playerID"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Economy and production -->

	<xsd:element name="updateProductionSoFarMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to the owner of a city to tell them how many production points they've put into the current construction project so far.
Only the owner of the city gets this - so you cannot tell how much production has been generated from cities that you don't own.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="cityLocation" type="map:mapCoordinates3D"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="productionSoFar" type="momimecommon:productionCost"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="pendingSaleMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this in a simultaneous turns game to inform the city owner *only* that a building will be sold at the end of the turn.
It can also be sent with buildingID omitted, to cancel selling anything at the end of the turn.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="cityLocation" type="map:mapCoordinates3D"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="buildingID" type="momimecommon:buildingID"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="updateGlobalEconomyMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to each client to tell them what their current production rates and storage are.

This is a good place to send OverlandCastingSkillRemainingThisTurn to the client as well, since any instantly cast spells
will result in mana being reduced so new GPVs will need to be sent anyway (and recalc'd in case the new instantly cast spell has some maintenance).

Similarly the OverlandCastingSkillRemainingThisTurn value needs to be set on the client at the start of each turn, so why not include it in the GPV message.

Also both stored mana and OverlandCastingSkillRemainingThisTurn being set on the client simultaneously is convenient for working out EffectiveCastingSkillRemainingThisTurn.

CastingSkillRemainingThisCombat is also sent by the server to avoid having to repeat the skill calc on the client,
since new GPVs are sent (to update mana) every time we cast a combat spell.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="overlandCastingSkillRemainingThisTurn" type="momimenewgame:undoubledProductionValue"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="castingSkillRemainingThisCombat" type="momimenewgame:undoubledProductionValue"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="resourceValue" type="momimemsgs:momResourceValue"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="taxRateChangedMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this back to clients who request a tax rate change to acknowledge that their request was OK</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="taxRateID" type="momimecommon:taxRateID"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Overland movement -->

	<xsd:element name="erasePendingMovementsMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends to clients to tell them to wipe out their pending movement store, before new pending movements are about to be sent</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="endOfContinuedMovementMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends to client to tell them that it has finished processed their continued unit movement
left over from the last turn, and so they can start to allocate new movement.
This is only sent for one-at-a-time games - since with simultaneous turns movement, movement is at the end rather than the beginning of a turn.
It is also only sent to the player whose turn it now is.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="overlandMovementTypesMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this back to clients who clicked on a unit stack to tell them where the unit stack can and cannot move to</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="movementTypes" type="momimestoc:mapVolumeOfOverlandMoveType"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="setSpecialOrderMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to the player owning the units to set a special order on them (not used for Patrolling)</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="specialOrder" type="momimemsgs:unitSpecialOrder"/>
						<xsd:element minOccurs="1" maxOccurs="unbounded" name="unitURN" type="momimemsgs:unitURN"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="pendingMovementMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to clients who request that units move further than they can reach in one turn, or in "simultaneous turns" mode.
This is that tells the client where to draw the white arrows showing the unit stack's intended movement.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="pendingMovement" type="momimemsgs:pendingMovement"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="updateOverlandMovementRemainingUnit">
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN"/>
			<xsd:element minOccurs="1" maxOccurs="1" name="doubleMovesLeft" type="momimenewgame:integerMapDistance"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:element name="updateOverlandMovementRemainingMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server tells the client how much movement each unit in a stack has left after completing its move (in case it can move again.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="unbounded" name="unit" type="momimestoc:updateOverlandMovementRemainingUnit"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="selectNextUnitToMoveOverlandMessage">
	    <xsd:annotation>
    		<xsd:documentation>When the server is sending a sequence of messages resulting from a unit moving, it sends this to say that the
sequence is over and the client should then ask for movement for the next unit.

So typical sequence is: MoveUnit -> VisAreaChg -> MoveUnit -> VisAreaChg -> SelectNextUnitToMove</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage"/>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

<!-- Combat -->

	<xsd:element name="setUnitIntoOrTakeUnitOutOfCombatMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to client when a combat is over to take those units out of combat.
For taking units out of combat, all the values will be omitted except for the unitURN.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="combatLocation" type="map:mapCoordinates3D"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="combatPosition" type="map:mapCoordinates2D"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="combatHeading" type="map:mapDirection"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="combatSide" type="momimemsgs:unitCombatSideID"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="summonedBySpellID" type="momimecommon:spellID">
						    <xsd:annotation>
    							<xsd:documentation>non-blank only when msg is being sent as a result of a new unit being summoned directly into combat
(e.g. Phantom Warriors); in this case the client needs to know that it won't already have images created for the unit</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="startCombatMessageUnit">
	    <xsd:annotation>
    		<xsd:documentation>Gives the details of the combat positioning of one unit involved in the combat.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN"/>
			<xsd:element minOccurs="1" maxOccurs="1" name="combatPosition" type="map:mapCoordinates2D"/>
			<xsd:element minOccurs="1" maxOccurs="1" name="combatHeading" type="map:mapDirection"/>
			<xsd:element minOccurs="1" maxOccurs="1" name="combatSide" type="momimemsgs:unitCombatSideID"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:element name="startCombatMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to the client when they are involved in a combat to start things off - this includes
details of all the units in the combat and the terrain, so is probably the most complex multiplayer messages other than the massive FOW message.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="combatLocation" type="map:mapCoordinates3D"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="scheduledCombatURN" type="momimemsgs:scheduledCombatURN"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="combatTerrain" type="momimemsgs:mapAreaOfCombatTiles"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="unitPlacement" type="momimestoc:startCombatMessageUnit"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="setCombatPlayerMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to clients involved in particular combat to tell them whose turn it is next.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="combatLocation" type="map:mapCoordinates3D"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="playerID" type="mps:playerID"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="moveUnitInCombatMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server breaks down client move requests into a series of directions and sends them back to the client.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="moveFrom" type="map:mapCoordinates2D"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="direction" type="map:mapDirection"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="doubleCombatMovesLeft" type="momimenewgame:integerMapDistance"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="damageCalculationMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server telling the two players involved in a combat how damage was calculated.
Either attackSkillID or attackAttributeID will be filled in, but not both:
	attackSkillID will be filled in if the attack is is a special skill like First Strike, Fire Breath etc.
	attackAttributeID will be filled in (UA01 or UA02) if the attack is a standard melee or ranged attack.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="messageType" type="momimestoc:damageCalculationMessageTypeID"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="attackerUnitURN" type="momimemsgs:unitURN"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="defenderUnitURN" type="momimemsgs:unitURN"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="attackSkillID" type="momimecommon:unitSkillID"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="attackAttributeID" type="momimecommon:unitAttributeID"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="attackerFigures" type="momimecommon:figureCount"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="defenderFigures" type="momimecommon:figureCount"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="attackStrength" type="momimecommon:unitAttributeValue"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="defenceStrength" type="momimecommon:unitAttributeValue"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="potentialDamage" type="momimecommon:unitAttributeValue"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="chanceToHit" type="momimecommon:unitAttributeValue"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="chanceToDefend" type="momimecommon:unitAttributeValue"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="tenTimesAverageDamage" type="momimecommon:unitAttributeValue"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="tenTimesAverageBlock" type="momimecommon:unitAttributeValue"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="actualDamage" type="momimecommon:unitAttributeValue"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="actualBlockedHits" type="momimecommon:description"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="combatEndedMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to client to say who won a combat, and whether a city was captured or razed as a result.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="combatLocation" type="map:mapCoordinates3D"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="winningPlayerID" type="mps:playerID"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="captureCityDecisionID" type="momimemsgs:captureCityDecisionID">
						    <xsd:annotation>
    							<xsd:documentation>It the combat was at a city and the attacker won, specifies whether the attacker chose to capture or raze the city.
Will be null if combat wasn't at a city, or if it was a city combat and the defender won.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element minOccurs="0" maxOccurs="1" name="scheduledCombatURN" type="momimemsgs:scheduledCombatURN"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="goldSwiped" type="momimenewgame:undoubledProductionValue"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="goldFromRazing" type="momimenewgame:undoubledProductionValue"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Scheduled combats -->

	<xsd:element name="addScheduledCombatMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to client to notify them of a combat they need to play out at the end of a simultaneous turns game.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="scheduledCombatData" type="momimemsgs:momScheduledCombatData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="updateOtherScheduledCombatsMessage">
	    <xsd:annotation>
    		<xsd:documentation>Notifies clients about how many combats they *aren't* involved in.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="combatCount" type="momimestoc:combatCount"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="showListAndOtherScheduledCombatsMessage">
	    <xsd:annotation>
    		<xsd:documentation>Notifies clients about how many combats they *aren't* involved in, and instructs
them that all scheduled combats have now been sent so they can show the list.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="combatCount" type="momimestoc:combatCount"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="playerCombatRequestStatusMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to inform clients whether players are are busy fighting a combat or have
requested a particular combat (in either situation, we can't request to play a combat against them).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="playerID" type="mps:playerID"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="currentlyPlayingCombat" type="xsd:boolean"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="requestedScheduledCombatURN" type="momimemsgs:scheduledCombatURN">
						    <xsd:annotation>
    							<xsd:documentation>Only included if player has requested to play a particular combat against another human player, but it hasn't actually started.
Players initially start with currentlyPlayingCombat = false, requestedScheduledCombatURN = null - if they request to attack a human player
they'll then go to currentlyPlayingCombat = false, requestedScheduledCombatURN = (nbr) - then if the player accepts to play the combat now they'll
go to currentlyPlayingCombat = true, requestedScheduledCombatURN = null (note requested requestedScheduledCombatURN is null again - effectively the instant the combat
starts, it is no longer "scheduled" and its scheduledCombatURN no longer has any meaning).  Combats against AI players skip the middle step.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="scheduledCombatWalkInWithoutAFightMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to tell client that a combat isn't a combat anymore (that player
already captured the target square in another combat) and they can just walk in without a fight if they wish to.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="scheduledCombatURN" type="momimemsgs:scheduledCombatURN"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="askForCaptureCityDecisionMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to players who capture a city, so they show the "Capture or Raze" form (the decision will be blank at this point).</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="cityLocation" type="map:mapCoordinates3D"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="defendingPlayerID" type="mps:playerID"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Magic -->

	<xsd:element name="fullSpellListMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to client to tell them the status of every spell in the game.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="spellResearchStatus" type="momimemsgs:spellResearchStatus"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="updateRemainingResearchCostMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to client to update the number of research points they have left to spend before getting a particular spell.
This isn't used to RemainingResearchCost = 0 when research is completed, because when we complete researching a spell, the server also has to
randomly pick the 8 further choices of what to research next.  So in that situation we just send the whole fullSpellListMessage again.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="spellID" type="momimecommon:spellID"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="remainingResearchCost" type="momimecommon:spellResearchCost"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="spellResearchChangedMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this back to a client who requested a change in research to let them know the change was OK.
This isn't used to set research to 'nothing', so safe to assume that SpellID is non-blank.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="spellID" type="momimecommon:spellID"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

<!-- Spells -->

	<xsd:element name="overlandCastQueuedMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to players trying to cast overland spells that are too big to cast instantly.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="spellID" type="momimecommon:spellID"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="removeQueuedSpellMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this if a spell has finished casting to tell the client to remove it from the queue.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="queuedSpellIndex" type="momimestoc:listIndex"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="updateManaSpentOnCastingCurrentSpellMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to client to let them know progress on casting big spells.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="manaSpentOnCastingCurrentSpell" type="momimecommon:spellCastingCost"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Fog of war messages - Note these are declared both as messages in their own right,
and just as types so that they can be included in the massive fogOfWarVisibleAreaChangedMessage -->
	
	<xsd:complexType name="updateTerrainMessageData">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to the client to tell them the map scenery.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="mapLocation" type="map:mapCoordinates3D"/>
			<xsd:element minOccurs="0" maxOccurs="1" name="terrainData" type="momimemsgs:overlandMapTerrainData"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:element name="updateTerrainMessage">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="data" type="momimestoc:updateTerrainMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="updateCityMessageData">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to the client to tell them the map scenery.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="mapLocation" type="map:mapCoordinates3D"/>
			<xsd:element minOccurs="0" maxOccurs="1" name="cityData" type="momimemsgs:overlandMapCityData"/>
			<xsd:element minOccurs="0" maxOccurs="1" name="askForCityName" type="xsd:boolean">
			    <xsd:annotation>
    				<xsd:documentation>Prompts the client to ask for a name for this city, i.e. = city is yours AND newly added this turn.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:element name="updateCityMessage">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="data" type="momimestoc:updateCityMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="addBuildingMessageData">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to clients to tell them about a building added to a city.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="cityLocation" type="map:mapCoordinates3D"/>
			<xsd:element minOccurs="1" maxOccurs="1" name="firstBuildingID" type="momimecommon:buildingID"/>
			<xsd:element minOccurs="0" maxOccurs="1" name="secondBuildingID" type="momimecommon:buildingID">
			    <xsd:annotation>
    				<xsd:documentation>Only situation where a this is specified is when we cast Move Fortress and move the summoning circle at the same time.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="buildingCreatedFromSpellID" type="momimecommon:spellID">
			    <xsd:annotation>
    				<xsd:documentation>This is used to say when buildings have been added by casting spells (Wall of Stone, Summoning Circle
or Move Fortress), however this is only ever set as the building is added (i.e. sent as an individual message), never if the building has simply
come into view (i.e. sent as part of 'visible area changed').</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element minOccurs="0" maxOccurs="1" name="buildingCreationSpellCastByPlayerID" type="mps:playerID"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:element name="addBuildingMessage">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="data" type="momimestoc:addBuildingMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="destroyBuildingMessageData">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to clients to tell them about a building destroyed (or sold) from a city.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="cityLocation" type="map:mapCoordinates3D"/>
			<xsd:element minOccurs="1" maxOccurs="1" name="buildingID" type="momimecommon:buildingID"/>
			<xsd:element minOccurs="1" maxOccurs="1" name="updateBuildingSoldThisTurn" type="xsd:boolean">
			    <xsd:annotation>
    				<xsd:documentation>This will be true for buildings that are sold (rather than destroyed), so the client knows to not allow another sale this turn</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:element name="destroyBuildingMessage">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="data" type="momimestoc:destroyBuildingMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:complexType name="addUnitMessageData">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to clients to tell them about a new unit added to the map, or can add them in bulk as part of fogOfWarVisibleAreaChanged.
Server now always sends complete skill list.  Experience, if applicable, will be included in the complete skill list.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="momimemsgs:availableUnit">
				<xsd:sequence>
					<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN"/>
					<xsd:element minOccurs="0" maxOccurs="1" name="heroNameID" type="momimecommon:heroNameID"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:element name="addUnitMessage">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="data" type="momimestoc:addUnitMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="killUnitMessageData">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to everyone to notify of dead units, except where it is already obvious from an
Apply Damage message that a unit is dead.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN"/>
			<xsd:element minOccurs="1" maxOccurs="1" name="killUnitActionID" type="momimestoc:killUnitActionID"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:element name="killUnitMessage">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="data" type="momimestoc:killUnitMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="addMaintainedSpellMessageData">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to notify clients of new maintained spells cast, or those that have newly come into view.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="momimemsgs:memoryMaintainedSpell"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="addMaintainedSpellMessage">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="data" type="momimestoc:addMaintainedSpellMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="switchOffMaintainedSpellMessageData">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to notify clients of cancelled maintained spells, or those that have gone out of view.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="momimemsgs:memoryMaintainedSpell"/>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:element name="switchOffMaintainedSpellMessage">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="data" type="momimestoc:switchOffMaintainedSpellMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:complexType name="addCombatAreaEffectMessageData">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to notify clients of new CAEs, or those that have newly come into view.
Besides the info we remember, the client also needs the spell ID for animation purposes..</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="momimemsgs:memoryCombatAreaEffect">
				<xsd:sequence>
					<xsd:element minOccurs="0" maxOccurs="1" name="spellID" type="momimecommon:spellID"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:element name="addCombatAreaEffectMessage">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="data" type="momimestoc:addCombatAreaEffectMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="cancelCombatAreaEffectMessageData">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to notify clients of cancelled CAEs, or those that have gone out of view.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="momimemsgs:memoryCombatAreaEffect"/>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:element name="cancelCombatAreaEffectMessage">
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="data" type="momimestoc:cancelCombatAreaEffectMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:complexType name="fogOfWarStateMessageData">
	    <xsd:annotation>
    		<xsd:documentation>Server sends to client to let them know changes in the area of the map they can see.
This is never sent as a message by itself, hence has no element wrapper defined.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="1" name="mapLocation" type="map:mapCoordinates3D"/>
			<xsd:element minOccurs="1" maxOccurs="1" name="state" type="momimemsgs:fogOfWarStateID"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:element name="fogOfWarVisibleAreaChangedMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this main message to update the client on changes in their fog of war area and what units, buildings, spells, CAEs, etc. they can see.
It basically comprises 0..n of most of the other types of message defined above, sent together so that the client processes them in a single transaction/locked update.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="0" maxOccurs="1" name="triggeredFrom" type="momimecommon:description">
						    <xsd:annotation>
    							<xsd:documentation>This is just a text string logged in the debug logs on the client, has no real effect.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="terrainUpdate" type="momimestoc:updateTerrainMessageData"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="cityUpdate" type="momimestoc:updateCityMessageData"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="addBuilding" type="momimestoc:addBuildingMessageData"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="destroyBuilding" type="momimestoc:destroyBuildingMessageData"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="addUnit" type="momimestoc:addUnitMessageData"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="killUnit" type="momimestoc:killUnitMessageData"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="addMaintainedSpell" type="momimestoc:addMaintainedSpellMessageData"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="switchOffMaintainedSpell" type="momimestoc:switchOffMaintainedSpellMessageData"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="addCombatAreaEffect" type="momimestoc:addCombatAreaEffectMessageData"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="cancelCombaAreaEffect" type="momimestoc:cancelCombatAreaEffectMessageData"/>
						<xsd:element minOccurs="0" maxOccurs="unbounded" name="fogOfWarUpdate" type="momimestoc:fogOfWarStateMessageData"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Fog of war-type updates, but that can't be included in the big fogOfWarVisibleAreaChanged message -->
	
	<xsd:element name="updateUnitToAliveMessage">
	    <xsd:annotation>
    		<xsd:documentation>This is like a reduced version of addUnitMessage.
Server sends this to clients to tell them about a new unit that already existed on the map but at an odd status, that is now being set to alive.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="unitLocation" type="map:mapCoordinates3D"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="updateUnitNameMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message server sends to clients to tell them that a hero was renamed.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="unitName" type="momimecommon:description"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="moveUnitStackOverlandMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server breaks down client move requests into a series of directions and sends them back to the client.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="moveFrom" type="map:mapCoordinates3D"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="moveTo" type="map:mapCoordinates3D"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="freeAfterMoving" type="xsd:boolean">
						    <xsd:annotation>
    							<xsd:documentation>Set if this move will result in this unit stack going out of visible range -
in that case the client shows the animation, then the units disappear.</xsd:documentation>
							</xsd:annotation>
						</xsd:element>
						<xsd:element minOccurs="1" maxOccurs="unbounded" name="unitURN" type="momimemsgs:unitURN"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
	<xsd:element name="applyDamageMessage">
	    <xsd:annotation>
    		<xsd:documentation>Message server sends to all clients when an attack takes place, this might damage the attacker and/or the defender.
For the players actually involved in the combat, this message will also generate the animation to show the units swinging their swords at each other.
This also gets sent to players not involved in the combat who can see one or other unit; in that situation its possible that an outside observer can see one of the units but
not the other - in that situation one of the UnitURNs (and other values associated with that unit) will all be left null, this is why every value is optional.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="0" maxOccurs="1" name="attackerUnitURN" type="momimemsgs:unitURN"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="attackerDamageTaken" type="momimecommon:unitAttributeValue"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="attackerDirection" type="map:mapDirection"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="attackerDoubleCombatMovesLeft" type="momimenewgame:integerMapDistance"/>
						
						<xsd:element minOccurs="0" maxOccurs="1" name="defenderUnitURN" type="momimemsgs:unitURN"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="defenderDamageTaken" type="momimecommon:unitAttributeValue"/>
						<xsd:element minOccurs="0" maxOccurs="1" name="defenderDirection" type="map:mapDirection"/>
						
						<xsd:element minOccurs="1" maxOccurs="1" name="rangedAttack" type="xsd:boolean"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="updateDamageTakenAndExperienceMessage">
	    <xsd:annotation>
    		<xsd:documentation>Server sends this to to update these values without showing any animations.
Used when units heal and gain experience at the start of a turn, and when units gain experience during combat.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="mp:serverToClientMessage">
					<xsd:sequence>
						<xsd:element minOccurs="1" maxOccurs="1" name="unitURN" type="momimemsgs:unitURN"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="damageTaken" type="momimecommon:unitAttributeValue"/>
						<xsd:element minOccurs="1" maxOccurs="1" name="experience" type="momimecommon:experiencePoints"/>
					</xsd:sequence>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
	
<!-- Map areas -->

	<!-- Equivalent of TMomOverlandMoveTypeArea -->

	<xsd:complexType name="mapRowOfOverlandMoveType">
        <xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded" name="cell" type="momimestoc:overlandMoveTypeID"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="mapAreaOfOverlandMoveType">
        <xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded" name="row" type="momimestoc:mapRowOfOverlandMoveType"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="mapVolumeOfOverlandMoveType">
        <xsd:sequence>
			<xsd:element minOccurs="1" maxOccurs="unbounded" name="plane" type="momimestoc:mapAreaOfOverlandMoveType"/>
		</xsd:sequence>
	</xsd:complexType>
	
<!--  Enums -->

	<xsd:simpleType name="startGameProgressStageID">
	    <xsd:annotation>
    		<xsd:documentation>The literal values used must match the language entries in the language XML file.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="AddingAI"><xsd:annotation>
				<xsd:documentation>Adding AI players</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ADDING_AI_PLAYERS"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="AddingMonsters"><xsd:annotation>
				<xsd:documentation>Adding Monsters</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ADDING_MONSTERS"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="AddingHeroes"><xsd:annotation>
				<xsd:documentation>Adding Heroes</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ADDING_HEROES"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="AddingCities"><xsd:annotation>
				<xsd:documentation>Adding Cities</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ADDING_CITIES"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="FogOfWar"><xsd:annotation>
				<xsd:documentation>Generating initial fog of war</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="GENERATING_INITIAL_FOG_OF_WAR"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="overlandMoveTypeID">
	    <xsd:annotation>
    		<xsd:documentation>The possible states of each map cell when we select a unit stack to move overland</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="C"><xsd:annotation>
				<xsd:documentation>Cannot move here</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="CANNOT_MOVE_HERE"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="O"><xsd:annotation>
				<xsd:documentation>Can move here in one turn</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="MOVE_IN_ONE_TURN"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="M"><xsd:annotation>
				<xsd:documentation>Can move here in more than one turn</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="MOVE_IN_MULTIPLE_TURNS"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="killUnitActionID">
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="F"><xsd:annotation>
				<xsd:documentation>Free (Unit dismissed voluntarily)</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="FREE"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="D"><xsd:annotation>
				<xsd:documentation>Hero dismissed voluntarily</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="HERO_DIMISSED_VOLUNTARILY"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="U"><xsd:annotation>
				<xsd:documentation>Unit killed by lack of production</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="UNIT_LACK_OF_PRODUCTION"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="H"><xsd:annotation>
				<xsd:documentation>Hero dismissed by lack of production</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="HERO_LACK_OF_PRODUCTION"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="V"><xsd:annotation>
				<xsd:documentation>Visible area changed - can no longer see unit</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="VISIBLE_AREA_CHANGED"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="damageCalculationMessageTypeID">
		<xsd:restriction base="xsd:normalizedString">
			<xsd:enumeration value="S"><xsd:annotation>
				<xsd:documentation>Attack and defence statistics</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="ATTACK_AND_DEFENCE_STATISTICS"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="M"><xsd:annotation>
				<xsd:documentation>Melee attack</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="MELEE_ATTACK"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
			<xsd:enumeration value="R"><xsd:annotation>
				<xsd:documentation>Ranged attack</xsd:documentation>
				<xsd:appinfo><jaxb:typesafeEnumMember name="RANGED_ATTACK"/></xsd:appinfo>
			</xsd:annotation></xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

<!-- Simple types -->
	
	<xsd:simpleType name="combatCount">
		<xsd:annotation>
			<xsd:documentation>A count of how many scheduled combats.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>

	<xsd:simpleType name="listIndex">
		<xsd:annotation>
			<xsd:documentation>An index into an unbounded list.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:unsignedShort" />
	</xsd:simpleType>
	
</xsd:schema>